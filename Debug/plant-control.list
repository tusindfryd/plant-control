
plant-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007824  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c4c  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008670  08008670  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008678  08008678  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008678  08008678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800867c  0800867c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a58  2000007c  080086fc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ad4  080086fc  00020ad4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c39  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004802  00000000  00000000  00044ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  000494e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001620  00000000  00000000  0004ad18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cae1  00000000  00000000  0004c338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000215ee  00000000  00000000  00078e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106508  00000000  00000000  0009a407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a090f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000675c  00000000  00000000  001a0964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007a0c 	.word	0x08007a0c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08007a0c 	.word	0x08007a0c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <lerp>:
#include "WS9527.h"

uint16_t WS9527_Reading_ADC;
uint16_t WS9527_Reading;

float lerp(uint16_t v0, uint32_t v1, float t) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005e6:	81fb      	strh	r3, [r7, #14]
	return (1 - t) * v0 + t * v1;
 80005e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80005f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f4:	89fb      	ldrh	r3, [r7, #14]
 80005f6:	ee07 3a90 	vmov	s15, r3
 80005fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800060c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000614:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000618:	eeb0 0a67 	vmov.f32	s0, s15
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <WS9527_Initialize>:

void WS9527_Initialize() {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <WS9527_Initialize+0x10>)
 800062e:	f001 fccf 	bl	8001fd0 <HAL_ADC_Start_IT>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200004bc 	.word	0x200004bc

0800063c <WS9527_StartReadings>:

void WS9527_StartReadings() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <WS9527_StartReadings+0x10>)
 8000642:	f001 fcc5 	bl	8001fd0 <HAL_ADC_Start_IT>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200004bc 	.word	0x200004bc

08000650 <WS9527_GetReadings>:

void WS9527_GetReadings(ADC_HandleTypeDef *hadc) {
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	/* first we lerp everything out and then scale the result by 18  *
	 * that's because maximally moist soil gives the reading of 1800 *
	 * so 1% is the reading divided by 18                            */
	if (hadc->Instance == ADC1) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <WS9527_GetReadings+0x58>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d11d      	bne.n	800069e <WS9527_GetReadings+0x4e>
		WS9527_Reading_ADC = (int) lerp(WS9527_Reading_ADC,
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <WS9527_GetReadings+0x5c>)
 8000664:	881c      	ldrh	r4, [r3, #0]
 8000666:	4812      	ldr	r0, [pc, #72]	; (80006b0 <WS9527_GetReadings+0x60>)
 8000668:	f001 fe9a 	bl	80023a0 <HAL_ADC_GetValue>
 800066c:	4603      	mov	r3, r0
 800066e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80006b4 <WS9527_GetReadings+0x64>
 8000672:	4619      	mov	r1, r3
 8000674:	4620      	mov	r0, r4
 8000676:	f7ff ffaf 	bl	80005d8 <lerp>
 800067a:	eef0 7a40 	vmov.f32	s15, s0
 800067e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000682:	ee17 3a90 	vmov	r3, s15
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <WS9527_GetReadings+0x5c>)
 800068a:	801a      	strh	r2, [r3, #0]
				HAL_ADC_GetValue(&hadc1), 0.001);
		WS9527_Reading = WS9527_Reading_ADC / 18;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <WS9527_GetReadings+0x5c>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <WS9527_GetReadings+0x68>)
 8000692:	fba2 2303 	umull	r2, r3, r2, r3
 8000696:	089b      	lsrs	r3, r3, #2
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <WS9527_GetReadings+0x6c>)
 800069c:	801a      	strh	r2, [r3, #0]
	}
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40012000 	.word	0x40012000
 80006ac:	200004b8 	.word	0x200004b8
 80006b0:	200004bc 	.word	0x200004bc
 80006b4:	3a83126f 	.word	0x3a83126f
 80006b8:	38e38e39 	.word	0x38e38e39
 80006bc:	200004ba 	.word	0x200004ba

080006c0 <MX_ADC1_Init>:
/* USER CODE END 0 */

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006de:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_ADC1_Init+0x98>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_ADC1_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_ADC1_Init+0x98>)
 8000722:	f001 fc11 	bl	8001f48 <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x70>
		Error_Handler();
 800072c:	f000 fcb2 	bl	8001094 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000734:	2301      	movs	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_ADC1_Init+0x98>)
 8000742:	f001 fe4f 	bl	80023e4 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x90>
		Error_Handler();
 800074c:	f000 fca2 	bl	8001094 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200004bc 	.word	0x200004bc
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
	if (adcHandle->Instance == ADC1) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <HAL_ADC_MspInit+0x84>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d12b      	bne.n	80007de <HAL_ADC_MspInit+0x7a>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_ADC_MspInit+0x88>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <HAL_ADC_MspInit+0x88>)
 800078c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <HAL_ADC_MspInit+0x88>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA0/WKUP     ------> ADC1_IN0
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b6:	2301      	movs	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_ADC_MspInit+0x8c>)
 80007ca:	f002 fa09 	bl	8002be0 <HAL_GPIO_Init>

		/* ADC1 interrupt Init */
		HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2012      	movs	r0, #18
 80007d4:	f002 f93b 	bl	8002a4e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007d8:	2012      	movs	r0, #18
 80007da:	f002 f954 	bl	8002a86 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40012000 	.word	0x40012000
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000

080007f4 <Splash>:

extern uint16_t WS9527_Reading;
bool menu_open = false;
extern volatile uint16_t positions;

void Splash() {
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af02      	add	r7, sp, #8
	ssd1306_Init();
 80007fa:	f000 fca7 	bl	800114c <ssd1306_Init>
	ssd1306_DrawBitmap(0, 0, bg, 128, 64, White);
 80007fe:	2301      	movs	r3, #1
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <Splash+0x64>)
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f000 ff10 	bl	8001632 <ssd1306_DrawBitmap>
	for (uint8_t i = 0; i < 11; i++) {
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e015      	b.n	8000844 <Splash+0x50>
			ssd1306_DrawRectangle(0 + i, 20 + i, SSD1306_WIDTH - i, 43 - i, Black);
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	3314      	adds	r3, #20
 800081c:	b2d9      	uxtb	r1, r3
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000824:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000828:	3380      	adds	r3, #128	; 0x80
 800082a:	b2da      	uxtb	r2, r3
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 8000832:	b2db      	uxtb	r3, r3
 8000834:	79f8      	ldrb	r0, [r7, #7]
 8000836:	2400      	movs	r4, #0
 8000838:	9400      	str	r4, [sp, #0]
 800083a:	f000 fec3 	bl	80015c4 <ssd1306_DrawRectangle>
	for (uint8_t i = 0; i < 11; i++) {
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	3301      	adds	r3, #1
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b0a      	cmp	r3, #10
 8000848:	d9e6      	bls.n	8000818 <Splash+0x24>
		}
	ssd1306_UpdateScreen();
 800084a:	f000 fd0d 	bl	8001268 <ssd1306_UpdateScreen>
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	bf00      	nop
 8000858:	08007ab8 	.word	0x08007ab8

0800085c <DisplayMeasurements>:

void DisplayMeasurements() {
 800085c:	b580      	push	{r7, lr}
 800085e:	b092      	sub	sp, #72	; 0x48
 8000860:	af00      	add	r7, sp, #0
	ssd1306_SetCursor(3, 27);
 8000862:	211b      	movs	r1, #27
 8000864:	2003      	movs	r0, #3
 8000866:	f000 fe29 	bl	80014bc <ssd1306_SetCursor>
	if (WS9527_Reading < 10) {
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <DisplayMeasurements+0x8c>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	2b09      	cmp	r3, #9
 8000870:	d810      	bhi.n	8000894 <DisplayMeasurements+0x38>
		char moisture_data[20];
		sprintf(moisture_data, "Soil moisture: %01d%%", WS9527_Reading);
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <DisplayMeasurements+0x8c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800087c:	491b      	ldr	r1, [pc, #108]	; (80008ec <DisplayMeasurements+0x90>)
 800087e:	4618      	mov	r0, r3
 8000880:	f006 fcbe 	bl	8007200 <siprintf>
		ssd1306_WriteString(moisture_data, Font_7x10, White);
 8000884:	4a1a      	ldr	r2, [pc, #104]	; (80008f0 <DisplayMeasurements+0x94>)
 8000886:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800088a:	2301      	movs	r3, #1
 800088c:	ca06      	ldmia	r2, {r1, r2}
 800088e:	f000 fdef 	bl	8001470 <ssd1306_WriteString>
 8000892:	e022      	b.n	80008da <DisplayMeasurements+0x7e>
	} else if (WS9527_Reading < 100) {
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <DisplayMeasurements+0x8c>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	2b63      	cmp	r3, #99	; 0x63
 800089a:	d810      	bhi.n	80008be <DisplayMeasurements+0x62>
		char moisture_data[21];
		sprintf(moisture_data, "Soil moisture: %02d%%", WS9527_Reading);
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <DisplayMeasurements+0x8c>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4913      	ldr	r1, [pc, #76]	; (80008f4 <DisplayMeasurements+0x98>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	f006 fca9 	bl	8007200 <siprintf>
		ssd1306_WriteString(moisture_data, Font_7x10, White);
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <DisplayMeasurements+0x94>)
 80008b0:	f107 001c 	add.w	r0, r7, #28
 80008b4:	2301      	movs	r3, #1
 80008b6:	ca06      	ldmia	r2, {r1, r2}
 80008b8:	f000 fdda 	bl	8001470 <ssd1306_WriteString>
 80008bc:	e00d      	b.n	80008da <DisplayMeasurements+0x7e>
	} else {
		char moisture_data[22];
		sprintf(moisture_data, "Soil moisture: %03d%%", WS9527_Reading);
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <DisplayMeasurements+0x8c>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	490c      	ldr	r1, [pc, #48]	; (80008f8 <DisplayMeasurements+0x9c>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	f006 fc99 	bl	8007200 <siprintf>
		ssd1306_WriteString(moisture_data, Font_7x10, White);
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <DisplayMeasurements+0x94>)
 80008d0:	1d38      	adds	r0, r7, #4
 80008d2:	2301      	movs	r3, #1
 80008d4:	ca06      	ldmia	r2, {r1, r2}
 80008d6:	f000 fdcb 	bl	8001470 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 80008da:	f000 fcc5 	bl	8001268 <ssd1306_UpdateScreen>
}
 80008de:	bf00      	nop
 80008e0:	3748      	adds	r7, #72	; 0x48
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200004ba 	.word	0x200004ba
 80008ec:	08007a24 	.word	0x08007a24
 80008f0:	20000004 	.word	0x20000004
 80008f4:	08007a3c 	.word	0x08007a3c
 80008f8:	08007a54 	.word	0x08007a54

080008fc <OpenMenu>:

void OpenMenu() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	menu_open = true;
 8000900:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <OpenMenu+0xb4>)
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
	ssd1306_Fill(Black);
 8000906:	2000      	movs	r0, #0
 8000908:	f000 fc8a 	bl	8001220 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 800090c:	2100      	movs	r1, #0
 800090e:	2000      	movs	r0, #0
 8000910:	f000 fdd4 	bl	80014bc <ssd1306_SetCursor>
	ssd1306_WriteString("Set soil moisture value", Font_7x10, (positions % 3 == 0) ? Black : White);
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <OpenMenu+0xb8>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b29a      	uxth	r2, r3
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <OpenMenu+0xbc>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	0859      	lsrs	r1, r3, #1
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	b29b      	uxth	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4a21      	ldr	r2, [pc, #132]	; (80009bc <OpenMenu+0xc0>)
 8000938:	ca06      	ldmia	r2, {r1, r2}
 800093a:	4821      	ldr	r0, [pc, #132]	; (80009c0 <OpenMenu+0xc4>)
 800093c:	f000 fd98 	bl	8001470 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 11);
 8000940:	210b      	movs	r1, #11
 8000942:	2000      	movs	r0, #0
 8000944:	f000 fdba 	bl	80014bc <ssd1306_SetCursor>
	ssd1306_WriteString("Run the pump", Font_7x10, (positions % 3 == 1) ? Black : White);
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <OpenMenu+0xb8>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <OpenMenu+0xbc>)
 8000950:	fba3 1302 	umull	r1, r3, r3, r2
 8000954:	0859      	lsrs	r1, r3, #1
 8000956:	460b      	mov	r3, r1
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	440b      	add	r3, r1
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	b29b      	uxth	r3, r3
 8000960:	2b01      	cmp	r3, #1
 8000962:	bf14      	ite	ne
 8000964:	2301      	movne	r3, #1
 8000966:	2300      	moveq	r3, #0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <OpenMenu+0xc0>)
 800096c:	ca06      	ldmia	r2, {r1, r2}
 800096e:	4815      	ldr	r0, [pc, #84]	; (80009c4 <OpenMenu+0xc8>)
 8000970:	f000 fd7e 	bl	8001470 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 64 - 10);
 8000974:	2136      	movs	r1, #54	; 0x36
 8000976:	2000      	movs	r0, #0
 8000978:	f000 fda0 	bl	80014bc <ssd1306_SetCursor>
	ssd1306_WriteString("< Back", Font_7x10, (positions % 3 == 2) ? Black : White);
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <OpenMenu+0xb8>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	b29a      	uxth	r2, r3
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <OpenMenu+0xbc>)
 8000984:	fba3 1302 	umull	r1, r3, r3, r2
 8000988:	0859      	lsrs	r1, r3, #1
 800098a:	460b      	mov	r3, r1
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	440b      	add	r3, r1
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	b29b      	uxth	r3, r3
 8000994:	2b02      	cmp	r3, #2
 8000996:	bf14      	ite	ne
 8000998:	2301      	movne	r3, #1
 800099a:	2300      	moveq	r3, #0
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <OpenMenu+0xc0>)
 80009a0:	ca06      	ldmia	r2, {r1, r2}
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <OpenMenu+0xcc>)
 80009a4:	f000 fd64 	bl	8001470 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80009a8:	f000 fc5e 	bl	8001268 <ssd1306_UpdateScreen>
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000098 	.word	0x20000098
 80009b4:	20000552 	.word	0x20000552
 80009b8:	aaaaaaab 	.word	0xaaaaaaab
 80009bc:	20000004 	.word	0x20000004
 80009c0:	08007a6c 	.word	0x08007a6c
 80009c4:	08007a84 	.word	0x08007a84
 80009c8:	08007a94 	.word	0x08007a94

080009cc <CloseMenu>:

void CloseMenu() {
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af02      	add	r7, sp, #8
	menu_open = false;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <CloseMenu+0x6c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
	ssd1306_Fill(Black);
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 fc21 	bl	8001220 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, bg, 128, 64, White);
 80009de:	2301      	movs	r3, #1
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <CloseMenu+0x70>)
 80009ea:	2100      	movs	r1, #0
 80009ec:	2000      	movs	r0, #0
 80009ee:	f000 fe20 	bl	8001632 <ssd1306_DrawBitmap>
	for (uint8_t i = 0; i < 11; i++) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e015      	b.n	8000a24 <CloseMenu+0x58>
		ssd1306_DrawRectangle(0 + i, 20 + i, SSD1306_WIDTH - i, 43 - i, Black);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	3314      	adds	r3, #20
 80009fc:	b2d9      	uxtb	r1, r3
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000a04:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000a08:	3380      	adds	r3, #128	; 0x80
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	79f8      	ldrb	r0, [r7, #7]
 8000a16:	2400      	movs	r4, #0
 8000a18:	9400      	str	r4, [sp, #0]
 8000a1a:	f000 fdd3 	bl	80015c4 <ssd1306_DrawRectangle>
	for (uint8_t i = 0; i < 11; i++) {
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	3301      	adds	r3, #1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b0a      	cmp	r3, #10
 8000a28:	d9e6      	bls.n	80009f8 <CloseMenu+0x2c>
	}
	DisplayMeasurements();
 8000a2a:	f7ff ff17 	bl	800085c <DisplayMeasurements>
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd90      	pop	{r4, r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000098 	.word	0x20000098
 8000a3c:	08007ab8 	.word	0x08007ab8

08000a40 <QE_Initialize>:
uint8_t debounce = 20;
uint8_t button = 0;

extern bool menu_open;

void QE_Initialize() {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000a44:	213c      	movs	r1, #60	; 0x3c
 8000a46:	4802      	ldr	r0, [pc, #8]	; (8000a50 <QE_Initialize+0x10>)
 8000a48:	f004 fb46 	bl	80050d8 <HAL_TIM_Encoder_Start>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200005ec 	.word	0x200005ec

08000a54 <QE_CheckPosition>:

void QE_CheckPosition() {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	pulse_count = TIM1->CNT;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <QE_CheckPosition+0x2c>)
 8000a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <QE_CheckPosition+0x30>)
 8000a60:	801a      	strh	r2, [r3, #0]
	positions = pulse_count / 4;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <QE_CheckPosition+0x30>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <QE_CheckPosition+0x34>)
 8000a6e:	801a      	strh	r2, [r3, #0]
	if (menu_open) {
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <QE_CheckPosition+0x38>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <QE_CheckPosition+0x28>
		OpenMenu();
 8000a78:	f7ff ff40 	bl	80008fc <OpenMenu>
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40010000 	.word	0x40010000
 8000a84:	20000550 	.word	0x20000550
 8000a88:	20000552 	.word	0x20000552
 8000a8c:	20000098 	.word	0x20000098

08000a90 <SwitchHandler>:

void SwitchHandler() {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - last_press > debounce) {
 8000a94:	f001 fa28 	bl	8001ee8 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <SwitchHandler+0xa8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <SwitchHandler+0xac>)
 8000aa2:	7812      	ldrb	r2, [r2, #0]
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d944      	bls.n	8000b32 <SwitchHandler+0xa2>
		if (!menu_open) {
 8000aa8:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <SwitchHandler+0xb0>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	f083 0301 	eor.w	r3, r3, #1
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <SwitchHandler+0x2c>
			OpenMenu();
 8000ab6:	f7ff ff21 	bl	80008fc <OpenMenu>
 8000aba:	e02f      	b.n	8000b1c <SwitchHandler+0x8c>
		} else if (menu_open) {
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <SwitchHandler+0xb0>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d02b      	beq.n	8000b1c <SwitchHandler+0x8c>
			if (positions % 3 == 0) {
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <SwitchHandler+0xb4>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <SwitchHandler+0xb8>)
 8000acc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ad0:	0859      	lsrs	r1, r3, #1
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	440b      	add	r3, r1
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d01d      	beq.n	8000b1c <SwitchHandler+0x8c>
//				SetSoilMoistureScreen();
			} else if (positions % 3 == 1) {
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <SwitchHandler+0xb4>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <SwitchHandler+0xb8>)
 8000ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8000aec:	0859      	lsrs	r1, r3, #1
 8000aee:	460b      	mov	r3, r1
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	440b      	add	r3, r1
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d00f      	beq.n	8000b1c <SwitchHandler+0x8c>
//				RunPump();
			} else if (positions % 3 == 2) {
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <SwitchHandler+0xb4>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <SwitchHandler+0xb8>)
 8000b04:	fba3 1302 	umull	r1, r3, r3, r2
 8000b08:	0859      	lsrs	r1, r3, #1
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	440b      	add	r3, r1
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d101      	bne.n	8000b1c <SwitchHandler+0x8c>
				CloseMenu();
 8000b18:	f7ff ff58 	bl	80009cc <CloseMenu>
			}
		}
		button++;
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <SwitchHandler+0xbc>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <SwitchHandler+0xbc>)
 8000b26:	701a      	strb	r2, [r3, #0]
		last_press = HAL_GetTick();
 8000b28:	f001 f9de 	bl	8001ee8 <HAL_GetTick>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a02      	ldr	r2, [pc, #8]	; (8000b38 <SwitchHandler+0xa8>)
 8000b30:	6013      	str	r3, [r2, #0]
	}
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000009c 	.word	0x2000009c
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000098 	.word	0x20000098
 8000b44:	20000552 	.word	0x20000552
 8000b48:	aaaaaaab 	.word	0xaaaaaaab
 8000b4c:	200000a0 	.word	0x200000a0

08000b50 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b78      	ldr	r3, [pc, #480]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a77      	ldr	r2, [pc, #476]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b75      	ldr	r3, [pc, #468]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7e:	4b72      	ldr	r3, [pc, #456]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a71      	ldr	r2, [pc, #452]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b6f      	ldr	r3, [pc, #444]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b6c      	ldr	r3, [pc, #432]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a6b      	ldr	r2, [pc, #428]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b69      	ldr	r3, [pc, #420]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
 8000bac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b66      	ldr	r3, [pc, #408]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a65      	ldr	r2, [pc, #404]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b63      	ldr	r3, [pc, #396]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc6:	4b60      	ldr	r3, [pc, #384]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a5f      	ldr	r2, [pc, #380]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000bcc:	f043 0320 	orr.w	r3, r3, #32
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b5d      	ldr	r3, [pc, #372]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0320 	and.w	r3, r3, #32
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bde:	4b5a      	ldr	r3, [pc, #360]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a59      	ldr	r2, [pc, #356]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000be4:	f043 0310 	orr.w	r3, r3, #16
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b57      	ldr	r3, [pc, #348]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf6:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a53      	ldr	r2, [pc, #332]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b51      	ldr	r3, [pc, #324]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0e:	4b4e      	ldr	r3, [pc, #312]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a4d      	ldr	r2, [pc, #308]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b4b      	ldr	r3, [pc, #300]	; (8000d48 <MX_GPIO_Init+0x1f8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c2c:	4847      	ldr	r0, [pc, #284]	; (8000d4c <MX_GPIO_Init+0x1fc>)
 8000c2e:	f002 f983 	bl	8002f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	4846      	ldr	r0, [pc, #280]	; (8000d50 <MX_GPIO_Init+0x200>)
 8000c38:	f002 f97e 	bl	8002f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c3c:	2332      	movs	r3, #50	; 0x32
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	483f      	ldr	r0, [pc, #252]	; (8000d54 <MX_GPIO_Init+0x204>)
 8000c58:	f001 ffc2 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c5c:	2386      	movs	r3, #134	; 0x86
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4838      	ldr	r0, [pc, #224]	; (8000d58 <MX_GPIO_Init+0x208>)
 8000c78:	f001 ffb2 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c7c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	482d      	ldr	r0, [pc, #180]	; (8000d4c <MX_GPIO_Init+0x1fc>)
 8000c96:	f001 ffa3 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	482a      	ldr	r0, [pc, #168]	; (8000d5c <MX_GPIO_Init+0x20c>)
 8000cb2:	f001 ff95 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	481e      	ldr	r0, [pc, #120]	; (8000d4c <MX_GPIO_Init+0x1fc>)
 8000cd4:	f001 ff84 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cd8:	2340      	movs	r3, #64	; 0x40
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	4818      	ldr	r0, [pc, #96]	; (8000d50 <MX_GPIO_Init+0x200>)
 8000cf0:	f001 ff76 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4812      	ldr	r0, [pc, #72]	; (8000d50 <MX_GPIO_Init+0x200>)
 8000d08:	f001 ff6a 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1e:	230b      	movs	r3, #11
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <MX_GPIO_Init+0x200>)
 8000d2a:	f001 ff59 	bl	8002be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2028      	movs	r0, #40	; 0x28
 8000d34:	f001 fe8b 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d38:	2028      	movs	r0, #40	; 0x28
 8000d3a:	f001 fea4 	bl	8002a86 <HAL_NVIC_EnableIRQ>

}
 8000d3e:	bf00      	nop
 8000d40:	3738      	adds	r7, #56	; 0x38
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40021800 	.word	0x40021800
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40021400 	.word	0x40021400

08000d60 <MX_I2C1_Init>:
/* USER CODE END 0 */

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d66:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <MX_I2C1_Init+0x78>)
 8000d68:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <MX_I2C1_Init+0x7c>)
 8000d6e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d9a:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d9c:	f002 f8fe 	bl	8002f9c <HAL_I2C_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000da6:	f000 f975 	bl	8001094 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000dae:	f002 fd05 	bl	80037bc <HAL_I2CEx_ConfigAnalogFilter>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000db8:	f000 f96c 	bl	8001094 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000dc0:	f002 fd47 	bl	8003852 <HAL_I2CEx_ConfigDigitalFilter>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000dca:	f000 f963 	bl	8001094 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000504 	.word	0x20000504
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	20303e5d 	.word	0x20303e5d

08000de0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
	if (i2cHandle->Instance == I2C1) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <HAL_I2C_MspInit+0x8c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d130      	bne.n	8000e64 <HAL_I2C_MspInit+0x84>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_I2C_MspInit+0x90>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <HAL_I2C_MspInit+0x90>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_I2C_MspInit+0x90>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 8000e1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e1e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e20:	2312      	movs	r3, #18
 8000e22:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	480f      	ldr	r0, [pc, #60]	; (8000e74 <HAL_I2C_MspInit+0x94>)
 8000e38:	f001 fed2 	bl	8002be0 <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_I2C_MspInit+0x90>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_I2C_MspInit+0x90>)
 8000e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_I2C_MspInit+0x90>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	201f      	movs	r0, #31
 8000e5a:	f001 fdf8 	bl	8002a4e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e5e:	201f      	movs	r0, #31
 8000e60:	f001 fe11 	bl	8002a86 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020400 	.word	0x40020400

08000e78 <HAL_ADC_ConvCpltCallback>:
extern uint16_t positions;
extern uint8_t button;
extern bool menu_open;
extern const unsigned char bg[];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	WS9527_GetReadings(hadc);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff fbe5 	bl	8000650 <WS9527_GetReadings>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d102      	bne.n	8000ea8 <HAL_TIM_PeriodElapsedCallback+0x18>
		/* TIM3 is set with the frequency of 1000 Hz (period of 1 ms) */
		WS9527_StartReadings();
 8000ea2:	f7ff fbcb 	bl	800063c <WS9527_StartReadings>
			if (!menu_open) {
				DisplayMeasurements();
			}
			QE_CheckPosition(); // todo: move this to a timer with a smaller period. or live with the lag
	}
}
 8000ea6:	e014      	b.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x42>
	else if (htim->Instance == TIM4) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d10f      	bne.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x42>
			UART_TransmitData(WS9527_Reading);
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f8f2 	bl	80010a0 <UART_TransmitData>
			if (!menu_open) {
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	f083 0301 	eor.w	r3, r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x3e>
				DisplayMeasurements();
 8000eca:	f7ff fcc7 	bl	800085c <DisplayMeasurements>
			QE_CheckPosition(); // todo: move this to a timer with a smaller period. or live with the lag
 8000ece:	f7ff fdc1 	bl	8000a54 <QE_CheckPosition>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40000400 	.word	0x40000400
 8000ee0:	40000800 	.word	0x40000800
 8000ee4:	200004ba 	.word	0x200004ba
 8000ee8:	20000098 	.word	0x20000098

08000eec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_EXTI_Callback+0x16>
		SwitchHandler();
 8000efe:	f7ff fdc7 	bl	8000a90 <SwitchHandler>
	}
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f000 ff99 	bl	8001e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f822 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 8000f18:	f000 fd42 	bl	80019a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f1c:	f000 fd8e 	bl	8001a3c <MX_TIM4_Init>
  MX_GPIO_Init();
 8000f20:	f7ff fe16 	bl	8000b50 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f24:	f000 fe60 	bl	8001be8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000f28:	f7ff fbca 	bl	80006c0 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f2c:	f000 fed8 	bl	8001ce0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000f30:	f7ff ff16 	bl	8000d60 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f34:	f000 fcda 	bl	80018ec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	Splash();
 8000f38:	f7ff fc5c 	bl	80007f4 <Splash>
	HAL_TIM_Base_Start_IT(&htim3);
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <main+0x48>)
 8000f3e:	f003 ffad 	bl	8004e9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <main+0x4c>)
 8000f44:	f003 ffaa 	bl	8004e9c <HAL_TIM_Base_Start_IT>
	WS9527_Initialize();
 8000f48:	f7ff fb6e 	bl	8000628 <WS9527_Initialize>
	QE_Initialize();
 8000f4c:	f7ff fd78 	bl	8000a40 <QE_Initialize>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f50:	e7fe      	b.n	8000f50 <main+0x44>
 8000f52:	bf00      	nop
 8000f54:	200005a0 	.word	0x200005a0
 8000f58:	20000554 	.word	0x20000554

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0b8      	sub	sp, #224	; 0xe0
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f66:	2234      	movs	r2, #52	; 0x34
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f006 f940 	bl	80071f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	2290      	movs	r2, #144	; 0x90
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f006 f931 	bl	80071f0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f8e:	f002 fdf5 	bl	8003b7c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <SystemClock_Config+0x12c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a3c      	ldr	r2, [pc, #240]	; (8001088 <SystemClock_Config+0x12c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <SystemClock_Config+0x12c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000faa:	4b38      	ldr	r3, [pc, #224]	; (800108c <SystemClock_Config+0x130>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fb2:	4a36      	ldr	r2, [pc, #216]	; (800108c <SystemClock_Config+0x130>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b34      	ldr	r3, [pc, #208]	; (800108c <SystemClock_Config+0x130>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fe8:	2360      	movs	r3, #96	; 0x60
 8000fea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fe19 	bl	8003c3c <HAL_RCC_OscConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001010:	f000 f840 	bl	8001094 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001014:	f002 fdc2 	bl	8003b9c <HAL_PWREx_EnableOverDrive>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800101e:	f000 f839 	bl	8001094 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001022:	230f      	movs	r3, #15
 8001024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001028:	2302      	movs	r3, #2
 800102a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001042:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001046:	2103      	movs	r1, #3
 8001048:	4618      	mov	r0, r3
 800104a:	f003 f8a5 	bl	8004198 <HAL_RCC_ClockConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001054:	f000 f81e 	bl	8001094 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <SystemClock_Config+0x134>)
 800105a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800105c:	2300      	movs	r3, #0
 800105e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fa94 	bl	800459c <HAL_RCCEx_PeriphCLKConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x122>
  {
    Error_Handler();
 800107a:	f000 f80b 	bl	8001094 <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	37e0      	adds	r7, #224	; 0xe0
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000
 8001090:	00204100 	.word	0x00204100

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x8>
	...

080010a0 <UART_TransmitData>:
/* the UART port is hardcoded as UART3 for simplicity */

#include "messages.h"

void UART_TransmitData(uint16_t reading) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
	char json_data[25];
	sprintf(json_data, "{ \"moisture\" : \"%03d\" }\r\n", reading);
 80010aa:	88fa      	ldrh	r2, [r7, #6]
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4907      	ldr	r1, [pc, #28]	; (80010d0 <UART_TransmitData+0x30>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f006 f8a4 	bl	8007200 <siprintf>

	HAL_UART_Transmit(&huart3, (uint8_t*) json_data, sizeof(json_data) - 1,
 80010b8:	f107 010c 	add.w	r1, r7, #12
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	2218      	movs	r2, #24
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <UART_TransmitData+0x34>)
 80010c2:	f004 fd03 	bl	8005acc <HAL_UART_Transmit>
			100);
}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	08007a9c 	.word	0x08007a9c
 80010d4:	20000638 	.word	0x20000638

080010d8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	2200      	movs	r2, #0
 8001104:	2178      	movs	r1, #120	; 0x78
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <ssd1306_WriteCommand+0x2c>)
 8001108:	f001 ffd8 	bl	80030bc <HAL_I2C_Mem_Write>
	HAL_MAX_DELAY);
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000504 	.word	0x20000504

08001118 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af04      	add	r7, sp, #16
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	f04f 32ff 	mov.w	r2, #4294967295
 800112a:	9202      	str	r2, [sp, #8]
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	2240      	movs	r2, #64	; 0x40
 8001136:	2178      	movs	r1, #120	; 0x78
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <ssd1306_WriteData+0x30>)
 800113a:	f001 ffbf 	bl	80030bc <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000504 	.word	0x20000504

0800114c <ssd1306_Init>:
	}
	return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001150:	f7ff ffc2 	bl	80010d8 <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8001154:	2064      	movs	r0, #100	; 0x64
 8001156:	f000 fed3 	bl	8001f00 <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 800115a:	2000      	movs	r0, #0
 800115c:	f000 fad8 	bl	8001710 <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001160:	2020      	movs	r0, #32
 8001162:	f7ff ffc1 	bl	80010e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff ffbe 	bl	80010e8 <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800116c:	20b0      	movs	r0, #176	; 0xb0
 800116e:	f7ff ffbb 	bl	80010e8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001172:	20c8      	movs	r0, #200	; 0xc8
 8001174:	f7ff ffb8 	bl	80010e8 <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff ffb5 	bl	80010e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800117e:	2010      	movs	r0, #16
 8001180:	f7ff ffb2 	bl	80010e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001184:	2040      	movs	r0, #64	; 0x40
 8001186:	f7ff ffaf 	bl	80010e8 <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 800118a:	20ff      	movs	r0, #255	; 0xff
 800118c:	f000 faac 	bl	80016e8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001190:	20a1      	movs	r0, #161	; 0xa1
 8001192:	f7ff ffa9 	bl	80010e8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 8001196:	20a6      	movs	r0, #166	; 0xa6
 8001198:	f7ff ffa6 	bl	80010e8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800119c:	20a8      	movs	r0, #168	; 0xa8
 800119e:	f7ff ffa3 	bl	80010e8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 80011a2:	203f      	movs	r0, #63	; 0x3f
 80011a4:	f7ff ffa0 	bl	80010e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80011a8:	20a4      	movs	r0, #164	; 0xa4
 80011aa:	f7ff ff9d 	bl	80010e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80011ae:	20d3      	movs	r0, #211	; 0xd3
 80011b0:	f7ff ff9a 	bl	80010e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff ff97 	bl	80010e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80011ba:	20d5      	movs	r0, #213	; 0xd5
 80011bc:	f7ff ff94 	bl	80010e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80011c0:	20f0      	movs	r0, #240	; 0xf0
 80011c2:	f7ff ff91 	bl	80010e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80011c6:	20d9      	movs	r0, #217	; 0xd9
 80011c8:	f7ff ff8e 	bl	80010e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80011cc:	2022      	movs	r0, #34	; 0x22
 80011ce:	f7ff ff8b 	bl	80010e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80011d2:	20da      	movs	r0, #218	; 0xda
 80011d4:	f7ff ff88 	bl	80010e8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 80011d8:	2012      	movs	r0, #18
 80011da:	f7ff ff85 	bl	80010e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 80011de:	20db      	movs	r0, #219	; 0xdb
 80011e0:	f7ff ff82 	bl	80010e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80011e4:	2020      	movs	r0, #32
 80011e6:	f7ff ff7f 	bl	80010e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80011ea:	208d      	movs	r0, #141	; 0x8d
 80011ec:	f7ff ff7c 	bl	80010e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80011f0:	2014      	movs	r0, #20
 80011f2:	f7ff ff79 	bl	80010e8 <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80011f6:	2001      	movs	r0, #1
 80011f8:	f000 fa8a 	bl	8001710 <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f000 f80f 	bl	8001220 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001202:	f000 f831 	bl	8001268 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <ssd1306_Init+0xd0>)
 8001208:	2200      	movs	r2, #0
 800120a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <ssd1306_Init+0xd0>)
 800120e:	2200      	movs	r2, #0
 8001210:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8001212:	4b02      	ldr	r3, [pc, #8]	; (800121c <ssd1306_Init+0xd0>)
 8001214:	2201      	movs	r2, #1
 8001216:	711a      	strb	r2, [r3, #4]
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200004a4 	.word	0x200004a4

08001220 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	e00d      	b.n	800124c <ssd1306_Fill+0x2c>
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <ssd1306_Fill+0x1a>
 8001236:	2100      	movs	r1, #0
 8001238:	e000      	b.n	800123c <ssd1306_Fill+0x1c>
 800123a:	21ff      	movs	r1, #255	; 0xff
 800123c:	4a09      	ldr	r2, [pc, #36]	; (8001264 <ssd1306_Fill+0x44>)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4413      	add	r3, r2
 8001242:	460a      	mov	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001252:	d3ed      	bcc.n	8001230 <ssd1306_Fill+0x10>
	}
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200000a4 	.word	0x200000a4

08001268 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	e016      	b.n	80012a2 <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	3b50      	subs	r3, #80	; 0x50
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff34 	bl	80010e8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff ff31 	bl	80010e8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001286:	2010      	movs	r0, #16
 8001288:	f7ff ff2e 	bl	80010e8 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	01db      	lsls	r3, r3, #7
 8001290:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <ssd1306_UpdateScreen+0x4c>)
 8001292:	4413      	add	r3, r2
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff3e 	bl	8001118 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	3301      	adds	r3, #1
 80012a0:	71fb      	strb	r3, [r7, #7]
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	d9e5      	bls.n	8001274 <ssd1306_UpdateScreen+0xc>
	}
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200000a4 	.word	0x200000a4

080012b8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	460b      	mov	r3, r1
 80012c4:	71bb      	strb	r3, [r7, #6]
 80012c6:	4613      	mov	r3, r2
 80012c8:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db3d      	blt.n	800134e <ssd1306_DrawPixel+0x96>
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	2b3f      	cmp	r3, #63	; 0x3f
 80012d6:	d83a      	bhi.n	800134e <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 80012d8:	797b      	ldrb	r3, [r7, #5]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d11a      	bne.n	8001314 <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012de:	79fa      	ldrb	r2, [r7, #7]
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	b2d8      	uxtb	r0, r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	01db      	lsls	r3, r3, #7
 80012ea:	4413      	add	r3, r2
 80012ec:	4a1b      	ldr	r2, [pc, #108]	; (800135c <ssd1306_DrawPixel+0xa4>)
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	2101      	movs	r1, #1
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b259      	sxtb	r1, r3
 8001304:	79fa      	ldrb	r2, [r7, #7]
 8001306:	4603      	mov	r3, r0
 8001308:	01db      	lsls	r3, r3, #7
 800130a:	4413      	add	r3, r2
 800130c:	b2c9      	uxtb	r1, r1
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <ssd1306_DrawPixel+0xa4>)
 8001310:	54d1      	strb	r1, [r2, r3]
 8001312:	e01d      	b.n	8001350 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001314:	79fa      	ldrb	r2, [r7, #7]
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	b2d8      	uxtb	r0, r3
 800131c:	4603      	mov	r3, r0
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	4413      	add	r3, r2
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <ssd1306_DrawPixel+0xa4>)
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	b25a      	sxtb	r2, r3
 8001328:	79bb      	ldrb	r3, [r7, #6]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	b25b      	sxtb	r3, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	b25b      	sxtb	r3, r3
 800133a:	4013      	ands	r3, r2
 800133c:	b259      	sxtb	r1, r3
 800133e:	79fa      	ldrb	r2, [r7, #7]
 8001340:	4603      	mov	r3, r0
 8001342:	01db      	lsls	r3, r3, #7
 8001344:	4413      	add	r3, r2
 8001346:	b2c9      	uxtb	r1, r1
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <ssd1306_DrawPixel+0xa4>)
 800134a:	54d1      	strb	r1, [r2, r3]
 800134c:	e000      	b.n	8001350 <ssd1306_DrawPixel+0x98>
		return;
 800134e:	bf00      	nop
	}
}
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200000a4 	.word	0x200000a4

08001360 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	4604      	mov	r4, r0
 8001368:	1d38      	adds	r0, r7, #4
 800136a:	e880 0006 	stmia.w	r0, {r1, r2}
 800136e:	461a      	mov	r2, r3
 8001370:	4623      	mov	r3, r4
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	4613      	mov	r3, r2
 8001376:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2b1f      	cmp	r3, #31
 800137c:	d902      	bls.n	8001384 <ssd1306_WriteChar+0x24>
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	2b7e      	cmp	r3, #126	; 0x7e
 8001382:	d901      	bls.n	8001388 <ssd1306_WriteChar+0x28>
		return 0;
 8001384:	2300      	movs	r3, #0
 8001386:	e06d      	b.n	8001464 <ssd1306_WriteChar+0x104>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <ssd1306_WriteChar+0x10c>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	793b      	ldrb	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	2b80      	cmp	r3, #128	; 0x80
 8001394:	dc06      	bgt.n	80013a4 <ssd1306_WriteChar+0x44>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight)) {
 8001396:	4b35      	ldr	r3, [pc, #212]	; (800146c <ssd1306_WriteChar+0x10c>)
 8001398:	885b      	ldrh	r3, [r3, #2]
 800139a:	461a      	mov	r2, r3
 800139c:	797b      	ldrb	r3, [r7, #5]
 800139e:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80013a0:	2b40      	cmp	r3, #64	; 0x40
 80013a2:	dd01      	ble.n	80013a8 <ssd1306_WriteChar+0x48>
		// Not enough space on current line
		return 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e05d      	b.n	8001464 <ssd1306_WriteChar+0x104>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++) {
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	e04c      	b.n	8001448 <ssd1306_WriteChar+0xe8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	3b20      	subs	r3, #32
 80013b4:	7979      	ldrb	r1, [r7, #5]
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	4619      	mov	r1, r3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	440b      	add	r3, r1
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	e034      	b.n	8001438 <ssd1306_WriteChar+0xd8>
			if ((b << j) & 0x8000) {
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d012      	beq.n	8001404 <ssd1306_WriteChar+0xa4>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <ssd1306_WriteChar+0x10c>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4413      	add	r3, r2
 80013ea:	b2d8      	uxtb	r0, r3
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <ssd1306_WriteChar+0x10c>)
 80013ee:	885b      	ldrh	r3, [r3, #2]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	7bba      	ldrb	r2, [r7, #14]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff ff5b 	bl	80012b8 <ssd1306_DrawPixel>
 8001402:	e016      	b.n	8001432 <ssd1306_WriteChar+0xd2>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <ssd1306_WriteChar+0x10c>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b2d8      	uxtb	r0, r3
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <ssd1306_WriteChar+0x10c>)
 8001414:	885b      	ldrh	r3, [r3, #2]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4413      	add	r3, r2
 800141e:	b2d9      	uxtb	r1, r3
 8001420:	7bbb      	ldrb	r3, [r7, #14]
 8001422:	2b00      	cmp	r3, #0
 8001424:	bf0c      	ite	eq
 8001426:	2301      	moveq	r3, #1
 8001428:	2300      	movne	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	f7ff ff43 	bl	80012b8 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	3301      	adds	r3, #1
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	793b      	ldrb	r3, [r7, #4]
 800143a:	461a      	mov	r2, r3
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	4293      	cmp	r3, r2
 8001440:	d3c5      	bcc.n	80013ce <ssd1306_WriteChar+0x6e>
	for (i = 0; i < Font.FontHeight; i++) {
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	797b      	ldrb	r3, [r7, #5]
 800144a:	461a      	mov	r2, r3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	4293      	cmp	r3, r2
 8001450:	d3ad      	bcc.n	80013ae <ssd1306_WriteChar+0x4e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <ssd1306_WriteChar+0x10c>)
 8001454:	881a      	ldrh	r2, [r3, #0]
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4413      	add	r3, r2
 800145c:	b29a      	uxth	r2, r3
 800145e:	4b03      	ldr	r3, [pc, #12]	; (800146c <ssd1306_WriteChar+0x10c>)
 8001460:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3724      	adds	r7, #36	; 0x24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	200004a4 	.word	0x200004a4

08001470 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	1d38      	adds	r0, r7, #4
 800147a:	e880 0006 	stmia.w	r0, {r1, r2}
 800147e:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) {
 8001480:	e012      	b.n	80014a8 <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	7818      	ldrb	r0, [r3, #0]
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	1d3a      	adds	r2, r7, #4
 800148a:	ca06      	ldmia	r2, {r1, r2}
 800148c:	f7ff ff68 	bl	8001360 <ssd1306_WriteChar>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d002      	beq.n	80014a2 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	e008      	b.n	80014b4 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1e8      	bne.n	8001482 <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	781b      	ldrb	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	460a      	mov	r2, r1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <ssd1306_SetCursor+0x2c>)
 80014d2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <ssd1306_SetCursor+0x2c>)
 80014da:	805a      	strh	r2, [r3, #2]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	200004a4 	.word	0x200004a4

080014ec <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2,
		SSD1306_COLOR color) {
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4604      	mov	r4, r0
 80014f4:	4608      	mov	r0, r1
 80014f6:	4611      	mov	r1, r2
 80014f8:	461a      	mov	r2, r3
 80014fa:	4623      	mov	r3, r4
 80014fc:	71fb      	strb	r3, [r7, #7]
 80014fe:	4603      	mov	r3, r0
 8001500:	71bb      	strb	r3, [r7, #6]
 8001502:	460b      	mov	r3, r1
 8001504:	717b      	strb	r3, [r7, #5]
 8001506:	4613      	mov	r3, r2
 8001508:	713b      	strb	r3, [r7, #4]
	int32_t deltaX = abs(x2 - x1);
 800150a:	797a      	ldrb	r2, [r7, #5]
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	bfb8      	it	lt
 8001514:	425b      	neglt	r3, r3
 8001516:	61bb      	str	r3, [r7, #24]
	int32_t deltaY = abs(y2 - y1);
 8001518:	793a      	ldrb	r2, [r7, #4]
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	bfb8      	it	lt
 8001522:	425b      	neglt	r3, r3
 8001524:	617b      	str	r3, [r7, #20]
	int32_t signX = ((x1 < x2) ? 1 : -1);
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	797b      	ldrb	r3, [r7, #5]
 800152a:	429a      	cmp	r2, r3
 800152c:	d201      	bcs.n	8001532 <ssd1306_Line+0x46>
 800152e:	2301      	movs	r3, #1
 8001530:	e001      	b.n	8001536 <ssd1306_Line+0x4a>
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	613b      	str	r3, [r7, #16]
	int32_t signY = ((y1 < y2) ? 1 : -1);
 8001538:	79ba      	ldrb	r2, [r7, #6]
 800153a:	793b      	ldrb	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d201      	bcs.n	8001544 <ssd1306_Line+0x58>
 8001540:	2301      	movs	r3, #1
 8001542:	e001      	b.n	8001548 <ssd1306_Line+0x5c>
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	60fb      	str	r3, [r7, #12]
	int32_t error = deltaX - deltaY;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	61fb      	str	r3, [r7, #28]
	int32_t error2;

	ssd1306_DrawPixel(x2, y2, color);
 8001552:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001556:	7939      	ldrb	r1, [r7, #4]
 8001558:	797b      	ldrb	r3, [r7, #5]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff feac 	bl	80012b8 <ssd1306_DrawPixel>
	while ((x1 != x2) || (y1 != y2)) {
 8001560:	e024      	b.n	80015ac <ssd1306_Line+0xc0>
		ssd1306_DrawPixel(x1, y1, color);
 8001562:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001566:	79b9      	ldrb	r1, [r7, #6]
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fea4 	bl	80012b8 <ssd1306_DrawPixel>
		error2 = error * 2;
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY) {
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	425b      	negs	r3, r3
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	429a      	cmp	r2, r3
 800157e:	dd08      	ble.n	8001592 <ssd1306_Line+0xa6>
			error -= deltaY;
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4413      	add	r3, r2
 8001590:	71fb      	strb	r3, [r7, #7]
		} else {
			/*nothing to do*/
		}

		if (error2 < deltaX) {
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	429a      	cmp	r2, r3
 8001598:	da08      	bge.n	80015ac <ssd1306_Line+0xc0>
			error += deltaX;
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	4413      	add	r3, r2
 80015a0:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	79bb      	ldrb	r3, [r7, #6]
 80015a8:	4413      	add	r3, r2
 80015aa:	71bb      	strb	r3, [r7, #6]
	while ((x1 != x2) || (y1 != y2)) {
 80015ac:	79fa      	ldrb	r2, [r7, #7]
 80015ae:	797b      	ldrb	r3, [r7, #5]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d1d6      	bne.n	8001562 <ssd1306_Line+0x76>
 80015b4:	79ba      	ldrb	r2, [r7, #6]
 80015b6:	793b      	ldrb	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d1d2      	bne.n	8001562 <ssd1306_Line+0x76>
		} else {
			/*nothing to do*/
		}
	}
	return;
 80015bc:	bf00      	nop
}
 80015be:	3724      	adds	r7, #36	; 0x24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}

080015c4 <ssd1306_DrawRectangle>:
	return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2,
		SSD1306_COLOR color) {
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4604      	mov	r4, r0
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	71fb      	strb	r3, [r7, #7]
 80015d6:	4603      	mov	r3, r0
 80015d8:	71bb      	strb	r3, [r7, #6]
 80015da:	460b      	mov	r3, r1
 80015dc:	717b      	strb	r3, [r7, #5]
 80015de:	4613      	mov	r3, r2
 80015e0:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x1, y1, x2, y1, color);
 80015e2:	79bc      	ldrb	r4, [r7, #6]
 80015e4:	797a      	ldrb	r2, [r7, #5]
 80015e6:	79b9      	ldrb	r1, [r7, #6]
 80015e8:	79f8      	ldrb	r0, [r7, #7]
 80015ea:	7e3b      	ldrb	r3, [r7, #24]
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	4623      	mov	r3, r4
 80015f0:	f7ff ff7c 	bl	80014ec <ssd1306_Line>
	ssd1306_Line(x2, y1, x2, y2, color);
 80015f4:	793c      	ldrb	r4, [r7, #4]
 80015f6:	797a      	ldrb	r2, [r7, #5]
 80015f8:	79b9      	ldrb	r1, [r7, #6]
 80015fa:	7978      	ldrb	r0, [r7, #5]
 80015fc:	7e3b      	ldrb	r3, [r7, #24]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	4623      	mov	r3, r4
 8001602:	f7ff ff73 	bl	80014ec <ssd1306_Line>
	ssd1306_Line(x2, y2, x1, y2, color);
 8001606:	793c      	ldrb	r4, [r7, #4]
 8001608:	79fa      	ldrb	r2, [r7, #7]
 800160a:	7939      	ldrb	r1, [r7, #4]
 800160c:	7978      	ldrb	r0, [r7, #5]
 800160e:	7e3b      	ldrb	r3, [r7, #24]
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4623      	mov	r3, r4
 8001614:	f7ff ff6a 	bl	80014ec <ssd1306_Line>
	ssd1306_Line(x1, y2, x1, y1, color);
 8001618:	79bc      	ldrb	r4, [r7, #6]
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	7939      	ldrb	r1, [r7, #4]
 800161e:	79f8      	ldrb	r0, [r7, #7]
 8001620:	7e3b      	ldrb	r3, [r7, #24]
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4623      	mov	r3, r4
 8001626:	f7ff ff61 	bl	80014ec <ssd1306_Line>

	return;
 800162a:	bf00      	nop
}
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}

08001632 <ssd1306_DrawBitmap>:

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char *bitmap,
		uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	603a      	str	r2, [r7, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
 8001640:	460b      	mov	r3, r1
 8001642:	71bb      	strb	r3, [r7, #6]
 8001644:	4613      	mov	r3, r2
 8001646:	717b      	strb	r3, [r7, #5]
	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001648:	797b      	ldrb	r3, [r7, #5]
 800164a:	3307      	adds	r3, #7
 800164c:	2b00      	cmp	r3, #0
 800164e:	da00      	bge.n	8001652 <ssd1306_DrawBitmap+0x20>
 8001650:	3307      	adds	r3, #7
 8001652:	10db      	asrs	r3, r3, #3
 8001654:	817b      	strh	r3, [r7, #10]
	uint8_t byte = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]

	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db3e      	blt.n	80016e0 <ssd1306_DrawBitmap+0xae>
 8001662:	79bb      	ldrb	r3, [r7, #6]
 8001664:	2b3f      	cmp	r3, #63	; 0x3f
 8001666:	d83b      	bhi.n	80016e0 <ssd1306_DrawBitmap+0xae>
		return;
	}

	for (uint8_t j = 0; j < h; j++, y++) {
 8001668:	2300      	movs	r3, #0
 800166a:	73bb      	strb	r3, [r7, #14]
 800166c:	e033      	b.n	80016d6 <ssd1306_DrawBitmap+0xa4>
		for (uint8_t i = 0; i < w; i++) {
 800166e:	2300      	movs	r3, #0
 8001670:	737b      	strb	r3, [r7, #13]
 8001672:	e026      	b.n	80016c2 <ssd1306_DrawBitmap+0x90>
			if (i & 7)
 8001674:	7b7b      	ldrb	r3, [r7, #13]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <ssd1306_DrawBitmap+0x54>
				byte <<= 1;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e00d      	b.n	80016a2 <ssd1306_DrawBitmap+0x70>
			else
				byte =
						(*(const unsigned char*) (&bitmap[j * byteWidth + i / 8]));
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	7b7a      	ldrb	r2, [r7, #13]
 8001692:	08d2      	lsrs	r2, r2, #3
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	4413      	add	r3, r2
 8001698:	461a      	mov	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	4413      	add	r3, r2
				byte =
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	73fb      	strb	r3, [r7, #15]
			if (byte & 0x80)
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	da08      	bge.n	80016bc <ssd1306_DrawBitmap+0x8a>
				ssd1306_DrawPixel(x + i, y, color);
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	7b7b      	ldrb	r3, [r7, #13]
 80016ae:	4413      	add	r3, r2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	7f3a      	ldrb	r2, [r7, #28]
 80016b4:	79b9      	ldrb	r1, [r7, #6]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fdfe 	bl	80012b8 <ssd1306_DrawPixel>
		for (uint8_t i = 0; i < w; i++) {
 80016bc:	7b7b      	ldrb	r3, [r7, #13]
 80016be:	3301      	adds	r3, #1
 80016c0:	737b      	strb	r3, [r7, #13]
 80016c2:	7b7a      	ldrb	r2, [r7, #13]
 80016c4:	797b      	ldrb	r3, [r7, #5]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d3d4      	bcc.n	8001674 <ssd1306_DrawBitmap+0x42>
	for (uint8_t j = 0; j < h; j++, y++) {
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	3301      	adds	r3, #1
 80016ce:	73bb      	strb	r3, [r7, #14]
 80016d0:	79bb      	ldrb	r3, [r7, #6]
 80016d2:	3301      	adds	r3, #1
 80016d4:	71bb      	strb	r3, [r7, #6]
 80016d6:	7bba      	ldrb	r2, [r7, #14]
 80016d8:	7e3b      	ldrb	r3, [r7, #24]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3c7      	bcc.n	800166e <ssd1306_DrawBitmap+0x3c>
		}
	}
	return;
 80016de:	e000      	b.n	80016e2 <ssd1306_DrawBitmap+0xb0>
		return;
 80016e0:	bf00      	nop
}
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 80016f2:	2381      	movs	r3, #129	; 0x81
 80016f4:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fcf5 	bl	80010e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fcf1 	bl	80010e8 <ssd1306_WriteCommand>
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 8001720:	23af      	movs	r3, #175	; 0xaf
 8001722:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <ssd1306_SetDisplayOn+0x38>)
 8001726:	2201      	movs	r2, #1
 8001728:	715a      	strb	r2, [r3, #5]
 800172a:	e004      	b.n	8001736 <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 800172c:	23ae      	movs	r3, #174	; 0xae
 800172e:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <ssd1306_SetDisplayOn+0x38>)
 8001732:	2200      	movs	r2, #0
 8001734:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fcd5 	bl	80010e8 <ssd1306_WriteCommand>
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200004a4 	.word	0x200004a4

0800174c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_MspInit+0x44>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_MspInit+0x44>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_MspInit+0x44>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x44>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x44>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x44>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80017e0:	f000 fb6e 	bl	8001ec0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <ADC_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
 */
void ADC_IRQHandler(void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <ADC_IRQHandler+0x10>)
 80017ee:	f000 fcc7 	bl	8002180 <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC_IRQn 1 */

	/* USER CODE END ADC_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200004bc 	.word	0x200004bc

080017fc <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM3_IRQHandler+0x10>)
 8001802:	f003 fcf7 	bl	80051f4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200005a0 	.word	0x200005a0

08001810 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM4_IRQHandler+0x10>)
 8001816:	f003 fced 	bl	80051f4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000554 	.word	0x20000554

08001824 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <I2C1_EV_IRQHandler+0x10>)
 800182a:	f001 fd5b 	bl	80032e4 <HAL_I2C_EV_IRQHandler>
	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000504 	.word	0x20000504

08001838 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <USART3_IRQHandler+0x10>)
 800183e:	f004 f9d9 	bl	8005bf4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000638 	.word	0x20000638

0800184c <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001850:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001854:	f001 fb8a 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
		errno = ENOMEM;
 800188c:	f005 fc5e 	bl	800714c <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20080000 	.word	0x20080000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	200004ac 	.word	0x200004ac
 80018c4:	20000ad8 	.word	0x20000ad8

080018c8 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2224      	movs	r2, #36	; 0x24
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f005 fc78 	bl	80071f0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <MX_TIM1_Init+0xac>)
 800190c:	4a23      	ldr	r2, [pc, #140]	; (800199c <MX_TIM1_Init+0xb0>)
 800190e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <MX_TIM1_Init+0xac>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <MX_TIM1_Init+0xac>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 403;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <MX_TIM1_Init+0xac>)
 800191e:	f240 1293 	movw	r2, #403	; 0x193
 8001922:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MX_TIM1_Init+0xac>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_TIM1_Init+0xac>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <MX_TIM1_Init+0xac>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001936:	2303      	movs	r3, #3
 8001938:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800193e:	2301      	movs	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800194e:	2301      	movs	r3, #1
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4619      	mov	r1, r3
 8001960:	480d      	ldr	r0, [pc, #52]	; (8001998 <MX_TIM1_Init+0xac>)
 8001962:	f003 fb13 	bl	8004f8c <HAL_TIM_Encoder_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0x84>
		Error_Handler();
 800196c:	f7ff fb92 	bl	8001094 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800197c:	463b      	mov	r3, r7
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_TIM1_Init+0xac>)
 8001982:	f003 ffa9 	bl	80058d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0xa4>
			!= HAL_OK) {
		Error_Handler();
 800198c:	f7ff fb82 	bl	8001094 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	3730      	adds	r7, #48	; 0x30
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200005ec 	.word	0x200005ec
 800199c:	40010000 	.word	0x40010000

080019a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019c0:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <MX_TIM3_Init+0x98>)
 80019c2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 95;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019c6:	225f      	movs	r2, #95	; 0x5f
 80019c8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019d6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80019e4:	4813      	ldr	r0, [pc, #76]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019e6:	f003 fa01 	bl	8004dec <HAL_TIM_Base_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM3_Init+0x54>
		Error_Handler();
 80019f0:	f7ff fb50 	bl	8001094 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80019fa:	f107 0310 	add.w	r3, r7, #16
 80019fe:	4619      	mov	r1, r3
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <MX_TIM3_Init+0x94>)
 8001a02:	f003 fd17 	bl	8005434 <HAL_TIM_ConfigClockSource>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM3_Init+0x70>
		Error_Handler();
 8001a0c:	f7ff fb42 	bl	8001094 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_TIM3_Init+0x94>)
 8001a1e:	f003 ff5b 	bl	80058d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001a28:	f7ff fb34 	bl	8001094 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200005a0 	.word	0x200005a0
 8001a38:	40000400 	.word	0x40000400

08001a3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_TIM4_Init+0x98>)
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <MX_TIM4_Init+0x9c>)
 8001a5e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 9599;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_TIM4_Init+0x98>)
 8001a62:	f242 527f 	movw	r2, #9599	; 0x257f
 8001a66:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <MX_TIM4_Init+0x98>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_TIM4_Init+0x98>)
 8001a70:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a74:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_TIM4_Init+0x98>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_TIM4_Init+0x98>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <MX_TIM4_Init+0x98>)
 8001a84:	f003 f9b2 	bl	8004dec <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM4_Init+0x56>
		Error_Handler();
 8001a8e:	f7ff fb01 	bl	8001094 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <MX_TIM4_Init+0x98>)
 8001aa0:	f003 fcc8 	bl	8005434 <HAL_TIM_ConfigClockSource>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM4_Init+0x72>
		Error_Handler();
 8001aaa:	f7ff faf3 	bl	8001094 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_TIM4_Init+0x98>)
 8001abc:	f003 ff0c 	bl	80058d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM4_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001ac6:	f7ff fae5 	bl	8001094 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000554 	.word	0x20000554
 8001ad8:	40000800 	.word	0x40000800

08001adc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *tim_encoderHandle) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
	if (tim_encoderHandle->Instance == TIM1) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a17      	ldr	r2, [pc, #92]	; (8001b58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d128      	bne.n	8001b50 <HAL_TIM_Encoder_MspInit+0x74>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* TIM1 clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_TIM_Encoder_MspInit+0x80>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
		/**TIM1 GPIO Configuration
		 PE9     ------> TIM1_CH1
		 PE11     ------> TIM1_CH2
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_11;
 8001b2e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001b32:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b4c:	f001 f848 	bl	8002be0 <HAL_GPIO_Init>

		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	}
}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40021000 	.word	0x40021000

08001b64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM3) {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_TIM_Base_MspInit+0x78>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d114      	bne.n	8001ba0 <HAL_TIM_Base_MspInit+0x3c>
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* TIM3 clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	201d      	movs	r0, #29
 8001b94:	f000 ff5b 	bl	8002a4e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b98:	201d      	movs	r0, #29
 8001b9a:	f000 ff74 	bl	8002a86 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	}
}
 8001b9e:	e018      	b.n	8001bd2 <HAL_TIM_Base_MspInit+0x6e>
	} else if (tim_baseHandle->Instance == TIM4) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <HAL_TIM_Base_MspInit+0x80>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d113      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x6e>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_TIM_Base_MspInit+0x7c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	201e      	movs	r0, #30
 8001bc8:	f000 ff41 	bl	8002a4e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bcc:	201e      	movs	r0, #30
 8001bce:	f000 ff5a 	bl	8002a86 <HAL_NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40000800 	.word	0x40000800

08001be8 <MX_USART3_UART_Init>:

UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MX_USART3_UART_Init+0x58>)
 8001bee:	4a15      	ldr	r2, [pc, #84]	; (8001c44 <MX_USART3_UART_Init+0x5c>)
 8001bf0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MX_USART3_UART_Init+0x58>)
 8001bf4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bf8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_USART3_UART_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <MX_USART3_UART_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_USART3_UART_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_USART3_UART_Init+0x58>)
 8001c0e:	220c      	movs	r2, #12
 8001c10:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_USART3_UART_Init+0x58>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_USART3_UART_Init+0x58>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_USART3_UART_Init+0x58>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_USART3_UART_Init+0x58>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_USART3_UART_Init+0x58>)
 8001c2c:	f003 ff00 	bl	8005a30 <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8001c36:	f7ff fa2d 	bl	8001094 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000638 	.word	0x20000638
 8001c44:	40004800 	.word	0x40004800

08001c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
	if (uartHandle->Instance == USART3) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <HAL_UART_MspInit+0x8c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d130      	bne.n	8001ccc <HAL_UART_MspInit+0x84>
		/* USER CODE BEGIN USART3_MspInit 0 */

		/* USER CODE END USART3_MspInit 0 */
		/* USART3 clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_UART_MspInit+0x90>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <HAL_UART_MspInit+0x90>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_UART_MspInit+0x90>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_UART_MspInit+0x90>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <HAL_UART_MspInit+0x90>)
 8001c88:	f043 0308 	orr.w	r3, r3, #8
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_UART_MspInit+0x90>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8001c9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c9e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cac:	2307      	movs	r3, #7
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4809      	ldr	r0, [pc, #36]	; (8001cdc <HAL_UART_MspInit+0x94>)
 8001cb8:	f000 ff92 	bl	8002be0 <HAL_GPIO_Init>

		/* USART3 interrupt Init */
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2027      	movs	r0, #39	; 0x27
 8001cc2:	f000 fec4 	bl	8002a4e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cc6:	2027      	movs	r0, #39	; 0x27
 8001cc8:	f000 fedd 	bl	8002a86 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	; 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40004800 	.word	0x40004800
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020c00 	.word	0x40020c00

08001ce0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ce6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001cea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cee:	2206      	movs	r2, #6
 8001cf0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d00:	2202      	movs	r2, #2
 8001d02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d24:	f001 fde1 	bl	80038ea <HAL_PCD_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d2e:	f7ff f9b1 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200006bc 	.word	0x200006bc

08001d3c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d5c:	d141      	bne.n	8001de2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <HAL_PCD_MspInit+0xb0>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a22      	ldr	r2, [pc, #136]	; (8001dec <HAL_PCD_MspInit+0xb0>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_PCD_MspInit+0xb0>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d76:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d88:	230a      	movs	r3, #10
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4817      	ldr	r0, [pc, #92]	; (8001df0 <HAL_PCD_MspInit+0xb4>)
 8001d94:	f000 ff24 	bl	8002be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	4810      	ldr	r0, [pc, #64]	; (8001df0 <HAL_PCD_MspInit+0xb4>)
 8001dae:	f000 ff17 	bl	8002be0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_PCD_MspInit+0xb0>)
 8001db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db6:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <HAL_PCD_MspInit+0xb0>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	6353      	str	r3, [r2, #52]	; 0x34
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_PCD_MspInit+0xb0>)
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_PCD_MspInit+0xb0>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_PCD_MspInit+0xb0>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_PCD_MspInit+0xb0>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	; 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020000 	.word	0x40020000

08001df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dfa:	490e      	ldr	r1, [pc, #56]	; (8001e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e00:	e002      	b.n	8001e08 <LoopCopyDataInit>

08001e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e06:	3304      	adds	r3, #4

08001e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e0c:	d3f9      	bcc.n	8001e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e10:	4c0b      	ldr	r4, [pc, #44]	; (8001e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e14:	e001      	b.n	8001e1a <LoopFillZerobss>

08001e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e18:	3204      	adds	r2, #4

08001e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e1c:	d3fb      	bcc.n	8001e16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e1e:	f7ff fd53 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e22:	f005 f999 	bl	8007158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e26:	f7ff f871 	bl	8000f0c <main>
  bx  lr    
 8001e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e2c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e38:	08008680 	.word	0x08008680
  ldr r2, =_sbss
 8001e3c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001e40:	20000ad4 	.word	0x20000ad4

08001e44 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <CAN1_RX0_IRQHandler>

08001e46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	f000 fdf4 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 f805 	bl	8001e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e56:	f7ff fc79 	bl	800174c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_InitTick+0x54>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_InitTick+0x58>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fe0f 	bl	8002aa2 <HAL_SYSTICK_Config>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00e      	b.n	8001eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b0f      	cmp	r3, #15
 8001e92:	d80a      	bhi.n	8001eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e94:	2200      	movs	r2, #0
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f000 fdd7 	bl	8002a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea0:	4a06      	ldr	r2, [pc, #24]	; (8001ebc <HAL_InitTick+0x5c>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e000      	b.n	8001eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000000c 	.word	0x2000000c
 8001eb8:	20000014 	.word	0x20000014
 8001ebc:	20000010 	.word	0x20000010

08001ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x20>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000014 	.word	0x20000014
 8001ee4:	20000ac0 	.word	0x20000ac0

08001ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return uwTick;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_GetTick+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000ac0 	.word	0x20000ac0

08001f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff ffee 	bl	8001ee8 <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f26:	bf00      	nop
 8001f28:	f7ff ffde 	bl	8001ee8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000014 	.word	0x20000014

08001f48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e031      	b.n	8001fc2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe fbfc 	bl	8000764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_ADC_Init+0x84>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	f043 0202 	orr.w	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fb7a 	bl	8002690 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f023 0303 	bic.w	r3, r3, #3
 8001faa:	f043 0201 	orr.w	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fb2:	e001      	b.n	8001fb8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	ffffeefd 	.word	0xffffeefd

08001fd0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Start_IT+0x1a>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e0b5      	b.n	8002156 <HAL_ADC_Start_IT+0x186>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d018      	beq.n	8002032 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002010:	4b54      	ldr	r3, [pc, #336]	; (8002164 <HAL_ADC_Start_IT+0x194>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a54      	ldr	r2, [pc, #336]	; (8002168 <HAL_ADC_Start_IT+0x198>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0c9a      	lsrs	r2, r3, #18
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002024:	e002      	b.n	800202c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3b01      	subs	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f9      	bne.n	8002026 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d17d      	bne.n	800213c <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002044:	4b49      	ldr	r3, [pc, #292]	; (800216c <HAL_ADC_Start_IT+0x19c>)
 8002046:	4013      	ands	r3, r2
 8002048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002066:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207a:	d106      	bne.n	800208a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	f023 0206 	bic.w	r2, r3, #6
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	645a      	str	r2, [r3, #68]	; 0x44
 8002088:	e002      	b.n	8002090 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020a0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_ADC_Start_IT+0x1a0>)
 80020ae:	430b      	orrs	r3, r1
 80020b0:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80020b2:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_ADC_Start_IT+0x1a4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d143      	bne.n	8002154 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	e03a      	b.n	8002154 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a25      	ldr	r2, [pc, #148]	; (8002178 <HAL_ADC_Start_IT+0x1a8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d10e      	bne.n	8002106 <HAL_ADC_Start_IT+0x136>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d107      	bne.n	8002106 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002104:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_ADC_Start_IT+0x1a4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	d120      	bne.n	8002154 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_ADC_Start_IT+0x1ac>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d11b      	bne.n	8002154 <HAL_ADC_Start_IT+0x184>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d114      	bne.n	8002154 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	e00b      	b.n	8002154 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f043 0210 	orr.w	r2, r3, #16
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	f043 0201 	orr.w	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	2000000c 	.word	0x2000000c
 8002168:	431bde83 	.word	0x431bde83
 800216c:	fffff8fe 	.word	0xfffff8fe
 8002170:	04000020 	.word	0x04000020
 8002174:	40012300 	.word	0x40012300
 8002178:	40012000 	.word	0x40012000
 800217c:	40012200 	.word	0x40012200

08002180 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d049      	beq.n	800224a <HAL_ADC_IRQHandler+0xca>
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d046      	beq.n	800224a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d12b      	bne.n	800223a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d127      	bne.n	800223a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d006      	beq.n	8002206 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002202:	2b00      	cmp	r3, #0
 8002204:	d119      	bne.n	800223a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0220 	bic.w	r2, r2, #32
 8002214:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fe1c 	bl	8000e78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0212 	mvn.w	r2, #18
 8002248:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002258:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d057      	beq.n	8002310 <HAL_ADC_IRQHandler+0x190>
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d054      	beq.n	8002310 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d139      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d12b      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d124      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11d      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d119      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fabf 	bl	8002884 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f06f 020c 	mvn.w	r2, #12
 800230e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d017      	beq.n	8002356 <HAL_ADC_IRQHandler+0x1d6>
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d014      	beq.n	8002356 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10d      	bne.n	8002356 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f837 	bl	80023ba <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0201 	mvn.w	r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002364:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <HAL_ADC_IRQHandler+0x218>
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d012      	beq.n	8002398 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f043 0202 	orr.w	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f06f 0220 	mvn.w	r2, #32
 8002386:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f820 	bl	80023ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f06f 0220 	mvn.w	r2, #32
 8002396:	601a      	str	r2, [r3, #0]
  }
}
 8002398:	bf00      	nop
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x1c>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e136      	b.n	800266e <HAL_ADC_ConfigChannel+0x28a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b09      	cmp	r3, #9
 800240e:	d93a      	bls.n	8002486 <HAL_ADC_ConfigChannel+0xa2>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002418:	d035      	beq.n	8002486 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68d9      	ldr	r1, [r3, #12]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	3b1e      	subs	r3, #30
 8002430:	2207      	movs	r2, #7
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	400a      	ands	r2, r1
 800243e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a8d      	ldr	r2, [pc, #564]	; (800267c <HAL_ADC_ConfigChannel+0x298>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10a      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68d9      	ldr	r1, [r3, #12]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	061a      	lsls	r2, r3, #24
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800245e:	e035      	b.n	80024cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	4618      	mov	r0, r3
 8002472:	4603      	mov	r3, r0
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4403      	add	r3, r0
 8002478:	3b1e      	subs	r3, #30
 800247a:	409a      	lsls	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002484:	e022      	b.n	80024cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6919      	ldr	r1, [r3, #16]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	2207      	movs	r2, #7
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43da      	mvns	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	400a      	ands	r2, r1
 80024a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6919      	ldr	r1, [r3, #16]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	4603      	mov	r3, r0
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4403      	add	r3, r0
 80024c2:	409a      	lsls	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b06      	cmp	r3, #6
 80024d2:	d824      	bhi.n	800251e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	3b05      	subs	r3, #5
 80024e6:	221f      	movs	r2, #31
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43da      	mvns	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	400a      	ands	r2, r1
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b29b      	uxth	r3, r3
 8002502:	4618      	mov	r0, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	3b05      	subs	r3, #5
 8002510:	fa00 f203 	lsl.w	r2, r0, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	635a      	str	r2, [r3, #52]	; 0x34
 800251c:	e04c      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d824      	bhi.n	8002570 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	3b23      	subs	r3, #35	; 0x23
 8002538:	221f      	movs	r2, #31
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	400a      	ands	r2, r1
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	4618      	mov	r0, r3
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	3b23      	subs	r3, #35	; 0x23
 8002562:	fa00 f203 	lsl.w	r2, r0, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
 800256e:	e023      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b41      	subs	r3, #65	; 0x41
 8002582:	221f      	movs	r2, #31
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43da      	mvns	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	400a      	ands	r2, r1
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b41      	subs	r3, #65	; 0x41
 80025ac:	fa00 f203 	lsl.w	r2, r0, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a30      	ldr	r2, [pc, #192]	; (8002680 <HAL_ADC_ConfigChannel+0x29c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10a      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1f4>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025cc:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <HAL_ADC_ConfigChannel+0x2a0>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a2c      	ldr	r2, [pc, #176]	; (8002684 <HAL_ADC_ConfigChannel+0x2a0>)
 80025d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a28      	ldr	r2, [pc, #160]	; (8002680 <HAL_ADC_ConfigChannel+0x29c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10f      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x21e>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b12      	cmp	r3, #18
 80025e8:	d10b      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <HAL_ADC_ConfigChannel+0x2a0>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4a25      	ldr	r2, [pc, #148]	; (8002684 <HAL_ADC_ConfigChannel+0x2a0>)
 80025f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025f4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_ADC_ConfigChannel+0x2a0>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_ADC_ConfigChannel+0x2a0>)
 80025fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002600:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <HAL_ADC_ConfigChannel+0x29c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d12b      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x280>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1a      	ldr	r2, [pc, #104]	; (800267c <HAL_ADC_ConfigChannel+0x298>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d003      	beq.n	800261e <HAL_ADC_ConfigChannel+0x23a>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b11      	cmp	r3, #17
 800261c:	d122      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800261e:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_ADC_ConfigChannel+0x2a0>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a18      	ldr	r2, [pc, #96]	; (8002684 <HAL_ADC_ConfigChannel+0x2a0>)
 8002624:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002628:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800262a:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_ADC_ConfigChannel+0x2a0>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a15      	ldr	r2, [pc, #84]	; (8002684 <HAL_ADC_ConfigChannel+0x2a0>)
 8002630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002634:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <HAL_ADC_ConfigChannel+0x298>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d111      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_ADC_ConfigChannel+0x2a4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_ADC_ConfigChannel+0x2a8>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0c9a      	lsrs	r2, r3, #18
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002656:	e002      	b.n	800265e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3b01      	subs	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f9      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	10000012 	.word	0x10000012
 8002680:	40012000 	.word	0x40012000
 8002684:	40012300 	.word	0x40012300
 8002688:	2000000c 	.word	0x2000000c
 800268c:	431bde83 	.word	0x431bde83

08002690 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002698:	4b78      	ldr	r3, [pc, #480]	; (800287c <ADC_Init+0x1ec>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4a77      	ldr	r2, [pc, #476]	; (800287c <ADC_Init+0x1ec>)
 800269e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026a2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026a4:	4b75      	ldr	r3, [pc, #468]	; (800287c <ADC_Init+0x1ec>)
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4973      	ldr	r1, [pc, #460]	; (800287c <ADC_Init+0x1ec>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	021a      	lsls	r2, r3, #8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	4a58      	ldr	r2, [pc, #352]	; (8002880 <ADC_Init+0x1f0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d022      	beq.n	800276a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002732:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6899      	ldr	r1, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	e00f      	b.n	800278a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002788:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0202 	bic.w	r2, r2, #2
 8002798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	005a      	lsls	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01b      	beq.n	80027f0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6859      	ldr	r1, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	3b01      	subs	r3, #1
 80027e4:	035a      	lsls	r2, r3, #13
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	e007      	b.n	8002800 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	3b01      	subs	r3, #1
 800281c:	051a      	lsls	r2, r3, #20
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002842:	025a      	lsls	r2, r3, #9
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6899      	ldr	r1, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	029a      	lsls	r2, r3, #10
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40012300 	.word	0x40012300
 8002880:	0f000001 	.word	0x0f000001

08002884 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <__NVIC_SetPriorityGrouping+0x40>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <__NVIC_SetPriorityGrouping+0x40>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	60d3      	str	r3, [r2, #12]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00
 80028dc:	05fa0000 	.word	0x05fa0000

080028e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <__NVIC_GetPriorityGrouping+0x18>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0307 	and.w	r3, r3, #7
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db0b      	blt.n	8002926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4907      	ldr	r1, [pc, #28]	; (8002934 <__NVIC_EnableIRQ+0x38>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2001      	movs	r0, #1
 800291e:	fa00 f202 	lsl.w	r2, r0, r2
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000e100 	.word	0xe000e100

08002938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0a      	blt.n	8002962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	490c      	ldr	r1, [pc, #48]	; (8002984 <__NVIC_SetPriority+0x4c>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002960:	e00a      	b.n	8002978 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <__NVIC_SetPriority+0x50>)
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	3b04      	subs	r3, #4
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	440b      	add	r3, r1
 8002976:	761a      	strb	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f1c3 0307 	rsb	r3, r3, #7
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	bf28      	it	cs
 80029aa:	2304      	movcs	r3, #4
 80029ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <NVIC_EncodePriority+0x30>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b03      	subs	r3, #3
 80029ba:	e000      	b.n	80029be <NVIC_EncodePriority+0x32>
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	401a      	ands	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43d9      	mvns	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	4313      	orrs	r3, r2
         );
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	; 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a04:	d301      	bcc.n	8002a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <SysTick_Config+0x40>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a12:	210f      	movs	r1, #15
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f7ff ff8e 	bl	8002938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <SysTick_Config+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <SysTick_Config+0x40>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff29 	bl	8002898 <__NVIC_SetPriorityGrouping>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a60:	f7ff ff3e 	bl	80028e0 <__NVIC_GetPriorityGrouping>
 8002a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff8e 	bl	800298c <NVIC_EncodePriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff5d 	bl	8002938 <__NVIC_SetPriority>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff31 	bl	80028fc <__NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffa2 	bl	80029f4 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff fa0e 	bl	8001ee8 <HAL_GetTick>
 8002acc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d008      	beq.n	8002aec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2280      	movs	r2, #128	; 0x80
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e052      	b.n	8002b92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0216 	bic.w	r2, r2, #22
 8002afa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d103      	bne.n	8002b1c <HAL_DMA_Abort+0x62>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0208 	bic.w	r2, r2, #8
 8002b2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b3c:	e013      	b.n	8002b66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b3e:	f7ff f9d3 	bl	8001ee8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	d90c      	bls.n	8002b66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2203      	movs	r2, #3
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e015      	b.n	8002b92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e4      	bne.n	8002b3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	223f      	movs	r2, #63	; 0x3f
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d004      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e00c      	b.n	8002bd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2205      	movs	r2, #5
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e175      	b.n	8002eec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	f040 8164 	bne.w	8002ee6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d005      	beq.n	8002c36 <HAL_GPIO_Init+0x56>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d130      	bne.n	8002c98 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	2203      	movs	r2, #3
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 0201 	and.w	r2, r3, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d017      	beq.n	8002cd4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d123      	bne.n	8002d28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	08da      	lsrs	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3208      	adds	r2, #8
 8002ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	220f      	movs	r2, #15
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	08da      	lsrs	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3208      	adds	r2, #8
 8002d22:	69b9      	ldr	r1, [r7, #24]
 8002d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0203 	and.w	r2, r3, #3
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80be 	beq.w	8002ee6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6a:	4b66      	ldr	r3, [pc, #408]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4a65      	ldr	r2, [pc, #404]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d74:	6453      	str	r3, [r2, #68]	; 0x44
 8002d76:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d82:	4a61      	ldr	r2, [pc, #388]	; (8002f08 <HAL_GPIO_Init+0x328>)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <HAL_GPIO_Init+0x32c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d037      	beq.n	8002e1e <HAL_GPIO_Init+0x23e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a57      	ldr	r2, [pc, #348]	; (8002f10 <HAL_GPIO_Init+0x330>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d031      	beq.n	8002e1a <HAL_GPIO_Init+0x23a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a56      	ldr	r2, [pc, #344]	; (8002f14 <HAL_GPIO_Init+0x334>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02b      	beq.n	8002e16 <HAL_GPIO_Init+0x236>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a55      	ldr	r2, [pc, #340]	; (8002f18 <HAL_GPIO_Init+0x338>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d025      	beq.n	8002e12 <HAL_GPIO_Init+0x232>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a54      	ldr	r2, [pc, #336]	; (8002f1c <HAL_GPIO_Init+0x33c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01f      	beq.n	8002e0e <HAL_GPIO_Init+0x22e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a53      	ldr	r2, [pc, #332]	; (8002f20 <HAL_GPIO_Init+0x340>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d019      	beq.n	8002e0a <HAL_GPIO_Init+0x22a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_GPIO_Init+0x344>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_GPIO_Init+0x226>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a51      	ldr	r2, [pc, #324]	; (8002f28 <HAL_GPIO_Init+0x348>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00d      	beq.n	8002e02 <HAL_GPIO_Init+0x222>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a50      	ldr	r2, [pc, #320]	; (8002f2c <HAL_GPIO_Init+0x34c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <HAL_GPIO_Init+0x21e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a4f      	ldr	r2, [pc, #316]	; (8002f30 <HAL_GPIO_Init+0x350>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_GPIO_Init+0x21a>
 8002df6:	2309      	movs	r3, #9
 8002df8:	e012      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	e010      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	e00e      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e02:	2307      	movs	r3, #7
 8002e04:	e00c      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e06:	2306      	movs	r3, #6
 8002e08:	e00a      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e0a:	2305      	movs	r3, #5
 8002e0c:	e008      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e0e:	2304      	movs	r3, #4
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e12:	2303      	movs	r3, #3
 8002e14:	e004      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	f002 0203 	and.w	r2, r2, #3
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	4093      	lsls	r3, r2
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e30:	4935      	ldr	r1, [pc, #212]	; (8002f08 <HAL_GPIO_Init+0x328>)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3302      	adds	r3, #2
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e62:	4a34      	ldr	r2, [pc, #208]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e68:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e8c:	4a29      	ldr	r2, [pc, #164]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee0:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	f67f ae86 	bls.w	8002c00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	40020000 	.word	0x40020000
 8002f10:	40020400 	.word	0x40020400
 8002f14:	40020800 	.word	0x40020800
 8002f18:	40020c00 	.word	0x40020c00
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40021400 	.word	0x40021400
 8002f24:	40021800 	.word	0x40021800
 8002f28:	40021c00 	.word	0x40021c00
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	40022400 	.word	0x40022400
 8002f34:	40013c00 	.word	0x40013c00

08002f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
 8002f44:	4613      	mov	r3, r2
 8002f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f48:	787b      	ldrb	r3, [r7, #1]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4e:	887a      	ldrh	r2, [r7, #2]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f54:	e003      	b.n	8002f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f56:	887b      	ldrh	r3, [r7, #2]
 8002f58:	041a      	lsls	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	619a      	str	r2, [r3, #24]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd ffae 	bl	8000eec <HAL_GPIO_EXTI_Callback>
  }
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40013c00 	.word	0x40013c00

08002f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e07f      	b.n	80030ae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd ff0c 	bl	8000de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	; 0x24
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ffc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d107      	bne.n	8003016 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	e006      	b.n	8003024 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003022:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d104      	bne.n	8003036 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003034:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_I2C_Init+0x11c>)
 8003042:	430b      	orrs	r3, r1
 8003044:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003054:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69d9      	ldr	r1, [r3, #28]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	02008000 	.word	0x02008000

080030bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	817b      	strh	r3, [r7, #10]
 80030ce:	460b      	mov	r3, r1
 80030d0:	813b      	strh	r3, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b20      	cmp	r3, #32
 80030e0:	f040 80f9 	bne.w	80032d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_I2C_Mem_Write+0x34>
 80030ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0ed      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_I2C_Mem_Write+0x4e>
 8003106:	2302      	movs	r3, #2
 8003108:	e0e6      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003112:	f7fe fee9 	bl	8001ee8 <HAL_GetTick>
 8003116:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2319      	movs	r3, #25
 800311e:	2201      	movs	r2, #1
 8003120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f96f 	bl	8003408 <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0d1      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2221      	movs	r2, #33	; 0x21
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2240      	movs	r2, #64	; 0x40
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003154:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800315c:	88f8      	ldrh	r0, [r7, #6]
 800315e:	893a      	ldrh	r2, [r7, #8]
 8003160:	8979      	ldrh	r1, [r7, #10]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	4603      	mov	r3, r0
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f8d3 	bl	8003318 <I2C_RequestMemoryWrite>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0a9      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2bff      	cmp	r3, #255	; 0xff
 800318c:	d90e      	bls.n	80031ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	22ff      	movs	r2, #255	; 0xff
 8003192:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	b2da      	uxtb	r2, r3
 800319a:	8979      	ldrh	r1, [r7, #10]
 800319c:	2300      	movs	r3, #0
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fad7 	bl	8003758 <I2C_TransferConfig>
 80031aa:	e00f      	b.n	80031cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	8979      	ldrh	r1, [r7, #10]
 80031be:	2300      	movs	r3, #0
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fac6 	bl	8003758 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f959 	bl	8003488 <I2C_WaitOnTXISFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e07b      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	781a      	ldrb	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d034      	beq.n	8003284 <HAL_I2C_Mem_Write+0x1c8>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d130      	bne.n	8003284 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	2200      	movs	r2, #0
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f8eb 	bl	8003408 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e04d      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	2bff      	cmp	r3, #255	; 0xff
 8003244:	d90e      	bls.n	8003264 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	22ff      	movs	r2, #255	; 0xff
 800324a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	b2da      	uxtb	r2, r3
 8003252:	8979      	ldrh	r1, [r7, #10]
 8003254:	2300      	movs	r3, #0
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fa7b 	bl	8003758 <I2C_TransferConfig>
 8003262:	e00f      	b.n	8003284 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	b2da      	uxtb	r2, r3
 8003274:	8979      	ldrh	r1, [r7, #10]
 8003276:	2300      	movs	r3, #0
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fa6a 	bl	8003758 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d19e      	bne.n	80031cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f938 	bl	8003508 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e01a      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2220      	movs	r2, #32
 80032a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_I2C_Mem_Write+0x224>)
 80032b6:	400b      	ands	r3, r1
 80032b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	fe00e800 	.word	0xfe00e800

080032e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
  }
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	817b      	strh	r3, [r7, #10]
 800332a:	460b      	mov	r3, r1
 800332c:	813b      	strh	r3, [r7, #8]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	8979      	ldrh	r1, [r7, #10]
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <I2C_RequestMemoryWrite+0xa4>)
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fa09 	bl	8003758 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	69b9      	ldr	r1, [r7, #24]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f89c 	bl	8003488 <I2C_WaitOnTXISFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e02c      	b.n	80033b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003360:	893b      	ldrh	r3, [r7, #8]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
 800336a:	e015      	b.n	8003398 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800336c:	893b      	ldrh	r3, [r7, #8]
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	b29b      	uxth	r3, r3
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	69b9      	ldr	r1, [r7, #24]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f882 	bl	8003488 <I2C_WaitOnTXISFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e012      	b.n	80033b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800338e:	893b      	ldrh	r3, [r7, #8]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2200      	movs	r2, #0
 80033a0:	2180      	movs	r1, #128	; 0x80
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f830 	bl	8003408 <I2C_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	80002000 	.word	0x80002000

080033c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d103      	bne.n	80033de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d007      	beq.n	80033fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	619a      	str	r2, [r3, #24]
  }
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	4613      	mov	r3, r2
 8003416:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003418:	e022      	b.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d01e      	beq.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003422:	f7fe fd61 	bl	8001ee8 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d113      	bne.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e00f      	b.n	8003480 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	429a      	cmp	r2, r3
 800347c:	d0cd      	beq.n	800341a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003494:	e02c      	b.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f870 	bl	8003580 <I2C_IsErrorOccurred>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e02a      	b.n	8003500 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d01e      	beq.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b2:	f7fe fd19 	bl	8001ee8 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d302      	bcc.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d113      	bne.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e007      	b.n	8003500 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d1cb      	bne.n	8003496 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003514:	e028      	b.n	8003568 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f830 	bl	8003580 <I2C_IsErrorOccurred>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e026      	b.n	8003578 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7fe fcdd 	bl	8001ee8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d113      	bne.n	8003568 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e007      	b.n	8003578 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b20      	cmp	r3, #32
 8003574:	d1cf      	bne.n	8003516 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d075      	beq.n	8003698 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2210      	movs	r2, #16
 80035b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035b4:	e056      	b.n	8003664 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d052      	beq.n	8003664 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7fe fc93 	bl	8001ee8 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_IsErrorOccurred+0x54>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d147      	bne.n	8003664 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f6:	d12e      	bne.n	8003656 <I2C_IsErrorOccurred+0xd6>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035fe:	d02a      	beq.n	8003656 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	2b20      	cmp	r3, #32
 8003604:	d027      	beq.n	8003656 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003614:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003616:	f7fe fc67 	bl	8001ee8 <HAL_GetTick>
 800361a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800361c:	e01b      	b.n	8003656 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800361e:	f7fe fc63 	bl	8001ee8 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b19      	cmp	r3, #25
 800362a:	d914      	bls.n	8003656 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d1dc      	bne.n	800361e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b20      	cmp	r3, #32
 8003670:	d003      	beq.n	800367a <I2C_IsErrorOccurred+0xfa>
 8003672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003676:	2b00      	cmp	r3, #0
 8003678:	d09d      	beq.n	80035b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800367a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800367e:	2b00      	cmp	r3, #0
 8003680:	d103      	bne.n	800368a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2220      	movs	r2, #32
 8003688:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	f043 0304 	orr.w	r3, r3, #4
 8003690:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	f043 0308 	orr.w	r3, r3, #8
 80036d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01c      	beq.n	8003748 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f7ff fe56 	bl	80033c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6859      	ldr	r1, [r3, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <I2C_IsErrorOccurred+0x1d4>)
 8003720:	400b      	ands	r3, r1
 8003722:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	431a      	orrs	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800374c:	4618      	mov	r0, r3
 800374e:	3728      	adds	r7, #40	; 0x28
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	fe00e800 	.word	0xfe00e800

08003758 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	817b      	strh	r3, [r7, #10]
 8003766:	4613      	mov	r3, r2
 8003768:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003770:	7a7b      	ldrb	r3, [r7, #9]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003778:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	4313      	orrs	r3, r2
 8003782:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003786:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	0d5b      	lsrs	r3, r3, #21
 8003792:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <I2C_TransferConfig+0x60>)
 8003798:	430b      	orrs	r3, r1
 800379a:	43db      	mvns	r3, r3
 800379c:	ea02 0103 	and.w	r1, r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	03ff63ff 	.word	0x03ff63ff

080037bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d138      	bne.n	8003844 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037dc:	2302      	movs	r3, #2
 80037de:	e032      	b.n	8003846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800380e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6819      	ldr	r1, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b20      	cmp	r3, #32
 8003866:	d139      	bne.n	80038dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003872:	2302      	movs	r3, #2
 8003874:	e033      	b.n	80038de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2224      	movs	r2, #36	; 0x24
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e000      	b.n	80038de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
  }
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ec:	b08f      	sub	sp, #60	; 0x3c
 80038ee:	af0a      	add	r7, sp, #40	; 0x28
 80038f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e116      	b.n	8003b2a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fe fa10 	bl	8001d3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2203      	movs	r2, #3
 8003920:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d102      	bne.n	8003936 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f003 f970 	bl	8006c20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	687e      	ldr	r6, [r7, #4]
 8003948:	466d      	mov	r5, sp
 800394a:	f106 0410 	add.w	r4, r6, #16
 800394e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800395a:	e885 0003 	stmia.w	r5, {r0, r1}
 800395e:	1d33      	adds	r3, r6, #4
 8003960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	f003 f904 	bl	8006b70 <USB_CoreInit>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e0d7      	b.n	8003b2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f003 f95e 	bl	8006c42 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003986:	2300      	movs	r3, #0
 8003988:	73fb      	strb	r3, [r7, #15]
 800398a:	e04a      	b.n	8003a22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800398c:	7bfa      	ldrb	r2, [r7, #15]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	333d      	adds	r3, #61	; 0x3d
 800399c:	2201      	movs	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	333c      	adds	r3, #60	; 0x3c
 80039b0:	7bfa      	ldrb	r2, [r7, #15]
 80039b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	b298      	uxth	r0, r3
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	3342      	adds	r3, #66	; 0x42
 80039c8:	4602      	mov	r2, r0
 80039ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039cc:	7bfa      	ldrb	r2, [r7, #15]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	333f      	adds	r3, #63	; 0x3f
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	3344      	adds	r3, #68	; 0x44
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3348      	adds	r3, #72	; 0x48
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	3350      	adds	r3, #80	; 0x50
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d3af      	bcc.n	800398c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
 8003a30:	e044      	b.n	8003abc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a5a:	7bfa      	ldrb	r2, [r7, #15]
 8003a5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d3b5      	bcc.n	8003a32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	687e      	ldr	r6, [r7, #4]
 8003ace:	466d      	mov	r5, sp
 8003ad0:	f106 0410 	add.w	r4, r6, #16
 8003ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003adc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ae0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ae4:	1d33      	adds	r3, r6, #4
 8003ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ae8:	6838      	ldr	r0, [r7, #0]
 8003aea:	f003 f8f7 	bl	8006cdc <USB_DevInit>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e014      	b.n	8003b2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d102      	bne.n	8003b1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f80b 	bl	8003b34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f003 fab1 	bl	800708a <USB_DevDisconnect>

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	10000003 	.word	0x10000003

08003b7c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a04      	ldr	r2, [pc, #16]	; (8003b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40007000 	.word	0x40007000

08003b9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bbe:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1d      	ldr	r2, [pc, #116]	; (8003c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bca:	f7fe f98d 	bl	8001ee8 <HAL_GetTick>
 8003bce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bd0:	e009      	b.n	8003be6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bd2:	f7fe f989 	bl	8001ee8 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003be0:	d901      	bls.n	8003be6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e022      	b.n	8003c2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf2:	d1ee      	bne.n	8003bd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c00:	f7fe f972 	bl	8001ee8 <HAL_GetTick>
 8003c04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c06:	e009      	b.n	8003c1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c08:	f7fe f96e 	bl	8001ee8 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c16:	d901      	bls.n	8003c1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e007      	b.n	8003c2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c28:	d1ee      	bne.n	8003c08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40007000 	.word	0x40007000

08003c3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c44:	2300      	movs	r3, #0
 8003c46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e29b      	b.n	800418a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8087 	beq.w	8003d6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c60:	4b96      	ldr	r3, [pc, #600]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d00c      	beq.n	8003c86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6c:	4b93      	ldr	r3, [pc, #588]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d112      	bne.n	8003c9e <HAL_RCC_OscConfig+0x62>
 8003c78:	4b90      	ldr	r3, [pc, #576]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c84:	d10b      	bne.n	8003c9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c86:	4b8d      	ldr	r3, [pc, #564]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d06c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x130>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d168      	bne.n	8003d6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e275      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x7a>
 8003ca8:	4b84      	ldr	r3, [pc, #528]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a83      	ldr	r2, [pc, #524]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	e02e      	b.n	8003d14 <HAL_RCC_OscConfig+0xd8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x9c>
 8003cbe:	4b7f      	ldr	r3, [pc, #508]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7e      	ldr	r2, [pc, #504]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b7c      	ldr	r3, [pc, #496]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a7b      	ldr	r2, [pc, #492]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e01d      	b.n	8003d14 <HAL_RCC_OscConfig+0xd8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0xc0>
 8003ce2:	4b76      	ldr	r3, [pc, #472]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a75      	ldr	r2, [pc, #468]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b73      	ldr	r3, [pc, #460]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a72      	ldr	r2, [pc, #456]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCC_OscConfig+0xd8>
 8003cfc:	4b6f      	ldr	r3, [pc, #444]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6e      	ldr	r2, [pc, #440]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b6c      	ldr	r3, [pc, #432]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a6b      	ldr	r2, [pc, #428]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d013      	beq.n	8003d44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe f8e4 	bl	8001ee8 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fe f8e0 	bl	8001ee8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e229      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b61      	ldr	r3, [pc, #388]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0xe8>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fe f8d0 	bl	8001ee8 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7fe f8cc 	bl	8001ee8 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e215      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5e:	4b57      	ldr	r3, [pc, #348]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x110>
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d069      	beq.n	8003e4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d7a:	4b50      	ldr	r3, [pc, #320]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d86:	4b4d      	ldr	r3, [pc, #308]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d11c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x190>
 8003d92:	4b4a      	ldr	r3, [pc, #296]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d116      	bne.n	8003dcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_RCC_OscConfig+0x17a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e1e9      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db6:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	493d      	ldr	r1, [pc, #244]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dca:	e040      	b.n	8003e4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d023      	beq.n	8003e1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd4:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a38      	ldr	r2, [pc, #224]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fe f882 	bl	8001ee8 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de8:	f7fe f87e 	bl	8001ee8 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e1c7      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfa:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e06:	4b2d      	ldr	r3, [pc, #180]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4929      	ldr	r1, [pc, #164]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
 8003e1a:	e018      	b.n	8003e4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e1c:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a26      	ldr	r2, [pc, #152]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fe f85e 	bl	8001ee8 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e30:	f7fe f85a 	bl	8001ee8 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e1a3      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d038      	beq.n	8003ecc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d019      	beq.n	8003e96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e62:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e66:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fe f83b 	bl	8001ee8 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e76:	f7fe f837 	bl	8001ee8 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e180      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x23a>
 8003e94:	e01a      	b.n	8003ecc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9a:	4a08      	ldr	r2, [pc, #32]	; (8003ebc <HAL_RCC_OscConfig+0x280>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fe f821 	bl	8001ee8 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eaa:	f7fe f81d 	bl	8001ee8 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d903      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e166      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
 8003ebc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec0:	4b92      	ldr	r3, [pc, #584]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ee      	bne.n	8003eaa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80a4 	beq.w	8004022 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eda:	4b8c      	ldr	r3, [pc, #560]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10d      	bne.n	8003f02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee6:	4b89      	ldr	r3, [pc, #548]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	4a88      	ldr	r2, [pc, #544]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef2:	4b86      	ldr	r3, [pc, #536]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efe:	2301      	movs	r3, #1
 8003f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f02:	4b83      	ldr	r3, [pc, #524]	; (8004110 <HAL_RCC_OscConfig+0x4d4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d118      	bne.n	8003f40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f0e:	4b80      	ldr	r3, [pc, #512]	; (8004110 <HAL_RCC_OscConfig+0x4d4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a7f      	ldr	r2, [pc, #508]	; (8004110 <HAL_RCC_OscConfig+0x4d4>)
 8003f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f1a:	f7fd ffe5 	bl	8001ee8 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f22:	f7fd ffe1 	bl	8001ee8 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b64      	cmp	r3, #100	; 0x64
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e12a      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f34:	4b76      	ldr	r3, [pc, #472]	; (8004110 <HAL_RCC_OscConfig+0x4d4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d106      	bne.n	8003f56 <HAL_RCC_OscConfig+0x31a>
 8003f48:	4b70      	ldr	r3, [pc, #448]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	4a6f      	ldr	r2, [pc, #444]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	6713      	str	r3, [r2, #112]	; 0x70
 8003f54:	e02d      	b.n	8003fb2 <HAL_RCC_OscConfig+0x376>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x33c>
 8003f5e:	4b6b      	ldr	r3, [pc, #428]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	4a6a      	ldr	r2, [pc, #424]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6a:	4b68      	ldr	r3, [pc, #416]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	4a67      	ldr	r2, [pc, #412]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003f70:	f023 0304 	bic.w	r3, r3, #4
 8003f74:	6713      	str	r3, [r2, #112]	; 0x70
 8003f76:	e01c      	b.n	8003fb2 <HAL_RCC_OscConfig+0x376>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b05      	cmp	r3, #5
 8003f7e:	d10c      	bne.n	8003f9a <HAL_RCC_OscConfig+0x35e>
 8003f80:	4b62      	ldr	r3, [pc, #392]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	4a61      	ldr	r2, [pc, #388]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003f86:	f043 0304 	orr.w	r3, r3, #4
 8003f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8c:	4b5f      	ldr	r3, [pc, #380]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	4a5e      	ldr	r2, [pc, #376]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	6713      	str	r3, [r2, #112]	; 0x70
 8003f98:	e00b      	b.n	8003fb2 <HAL_RCC_OscConfig+0x376>
 8003f9a:	4b5c      	ldr	r3, [pc, #368]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	4a5b      	ldr	r2, [pc, #364]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa6:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	4a58      	ldr	r2, [pc, #352]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	f023 0304 	bic.w	r3, r3, #4
 8003fb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d015      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fba:	f7fd ff95 	bl	8001ee8 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fd ff91 	bl	8001ee8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0d8      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd8:	4b4c      	ldr	r3, [pc, #304]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0ee      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x386>
 8003fe4:	e014      	b.n	8004010 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe6:	f7fd ff7f 	bl	8001ee8 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fec:	e00a      	b.n	8004004 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fee:	f7fd ff7b 	bl	8001ee8 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e0c2      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004004:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1ee      	bne.n	8003fee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004010:	7dfb      	ldrb	r3, [r7, #23]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d105      	bne.n	8004022 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	4a3c      	ldr	r2, [pc, #240]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 800401c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80ae 	beq.w	8004188 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800402c:	4b37      	ldr	r3, [pc, #220]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 030c 	and.w	r3, r3, #12
 8004034:	2b08      	cmp	r3, #8
 8004036:	d06d      	beq.n	8004114 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d14b      	bne.n	80040d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004040:	4b32      	ldr	r3, [pc, #200]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a31      	ldr	r2, [pc, #196]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8004046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800404a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fd ff4c 	bl	8001ee8 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004054:	f7fd ff48 	bl	8001ee8 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e091      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	4b29      	ldr	r3, [pc, #164]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	019b      	lsls	r3, r3, #6
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	3b01      	subs	r3, #1
 800408c:	041b      	lsls	r3, r3, #16
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	071b      	lsls	r3, r3, #28
 800409e:	491b      	ldr	r1, [pc, #108]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a18      	ldr	r2, [pc, #96]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 80040aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fd ff1a 	bl	8001ee8 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fd ff16 	bl	8001ee8 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e05f      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x47c>
 80040d6:	e057      	b.n	8004188 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a0b      	ldr	r2, [pc, #44]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 80040de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fd ff00 	bl	8001ee8 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fd fefc 	bl	8001ee8 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e045      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fe:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_RCC_OscConfig+0x4d0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x4b0>
 800410a:	e03d      	b.n	8004188 <HAL_RCC_OscConfig+0x54c>
 800410c:	40023800 	.word	0x40023800
 8004110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004114:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <HAL_RCC_OscConfig+0x558>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d030      	beq.n	8004184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d129      	bne.n	8004184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d122      	bne.n	8004184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004144:	4013      	ands	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800414a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800414c:	4293      	cmp	r3, r2
 800414e:	d119      	bne.n	8004184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	3b01      	subs	r3, #1
 800415e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d10f      	bne.n	8004184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800

08004198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0d0      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041b0:	4b6a      	ldr	r3, [pc, #424]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d910      	bls.n	80041e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b67      	ldr	r3, [pc, #412]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 020f 	bic.w	r2, r3, #15
 80041c6:	4965      	ldr	r1, [pc, #404]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ce:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0b8      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f8:	4b59      	ldr	r3, [pc, #356]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a58      	ldr	r2, [pc, #352]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 80041fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004202:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4a52      	ldr	r2, [pc, #328]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800421a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421c:	4b50      	ldr	r3, [pc, #320]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	494d      	ldr	r1, [pc, #308]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d040      	beq.n	80042bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d107      	bne.n	8004252 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d115      	bne.n	800427a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e07f      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d107      	bne.n	800426a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e073      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426a:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e06b      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800427a:	4b39      	ldr	r3, [pc, #228]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f023 0203 	bic.w	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	4936      	ldr	r1, [pc, #216]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	4313      	orrs	r3, r2
 800428a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428c:	f7fd fe2c 	bl	8001ee8 <HAL_GetTick>
 8004290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004292:	e00a      	b.n	80042aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004294:	f7fd fe28 	bl	8001ee8 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e053      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042aa:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 020c 	and.w	r2, r3, #12
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d1eb      	bne.n	8004294 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d210      	bcs.n	80042ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 020f 	bic.w	r2, r3, #15
 80042d2:	4922      	ldr	r1, [pc, #136]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b20      	ldr	r3, [pc, #128]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e032      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4916      	ldr	r1, [pc, #88]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	490e      	ldr	r1, [pc, #56]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800432a:	f000 f821 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 800432e:	4602      	mov	r2, r0
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	091b      	lsrs	r3, r3, #4
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	490a      	ldr	r1, [pc, #40]	; (8004364 <HAL_RCC_ClockConfig+0x1cc>)
 800433c:	5ccb      	ldrb	r3, [r1, r3]
 800433e:	fa22 f303 	lsr.w	r3, r2, r3
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <HAL_RCC_ClockConfig+0x1d0>)
 8004344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_RCC_ClockConfig+0x1d4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fd fd88 	bl	8001e60 <HAL_InitTick>

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023c00 	.word	0x40023c00
 8004360:	40023800 	.word	0x40023800
 8004364:	08008624 	.word	0x08008624
 8004368:	2000000c 	.word	0x2000000c
 800436c:	20000010 	.word	0x20000010

08004370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004370:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	2300      	movs	r3, #0
 8004382:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004388:	4b67      	ldr	r3, [pc, #412]	; (8004528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b08      	cmp	r3, #8
 8004392:	d00d      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004394:	2b08      	cmp	r3, #8
 8004396:	f200 80bd 	bhi.w	8004514 <HAL_RCC_GetSysClockFreq+0x1a4>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x34>
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x3a>
 80043a2:	e0b7      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a4:	4b61      	ldr	r3, [pc, #388]	; (800452c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043a6:	60bb      	str	r3, [r7, #8]
      break;
 80043a8:	e0b7      	b.n	800451a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043aa:	4b61      	ldr	r3, [pc, #388]	; (8004530 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80043ac:	60bb      	str	r3, [r7, #8]
      break;
 80043ae:	e0b4      	b.n	800451a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043b0:	4b5d      	ldr	r3, [pc, #372]	; (8004528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043ba:	4b5b      	ldr	r3, [pc, #364]	; (8004528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d04d      	beq.n	8004462 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c6:	4b58      	ldr	r3, [pc, #352]	; (8004528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	461a      	mov	r2, r3
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043d6:	f04f 0100 	mov.w	r1, #0
 80043da:	ea02 0800 	and.w	r8, r2, r0
 80043de:	ea03 0901 	and.w	r9, r3, r1
 80043e2:	4640      	mov	r0, r8
 80043e4:	4649      	mov	r1, r9
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	014b      	lsls	r3, r1, #5
 80043f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043f4:	0142      	lsls	r2, r0, #5
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	ebb0 0008 	subs.w	r0, r0, r8
 80043fe:	eb61 0109 	sbc.w	r1, r1, r9
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	018b      	lsls	r3, r1, #6
 800440c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004410:	0182      	lsls	r2, r0, #6
 8004412:	1a12      	subs	r2, r2, r0
 8004414:	eb63 0301 	sbc.w	r3, r3, r1
 8004418:	f04f 0000 	mov.w	r0, #0
 800441c:	f04f 0100 	mov.w	r1, #0
 8004420:	00d9      	lsls	r1, r3, #3
 8004422:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004426:	00d0      	lsls	r0, r2, #3
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	eb12 0208 	adds.w	r2, r2, r8
 8004430:	eb43 0309 	adc.w	r3, r3, r9
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	0259      	lsls	r1, r3, #9
 800443e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004442:	0250      	lsls	r0, r2, #9
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	461a      	mov	r2, r3
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	f7fb ff44 	bl	80002e0 <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4613      	mov	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e04a      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004462:	4b31      	ldr	r3, [pc, #196]	; (8004528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	461a      	mov	r2, r3
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004472:	f04f 0100 	mov.w	r1, #0
 8004476:	ea02 0400 	and.w	r4, r2, r0
 800447a:	ea03 0501 	and.w	r5, r3, r1
 800447e:	4620      	mov	r0, r4
 8004480:	4629      	mov	r1, r5
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	014b      	lsls	r3, r1, #5
 800448c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004490:	0142      	lsls	r2, r0, #5
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	1b00      	subs	r0, r0, r4
 8004498:	eb61 0105 	sbc.w	r1, r1, r5
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	018b      	lsls	r3, r1, #6
 80044a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044aa:	0182      	lsls	r2, r0, #6
 80044ac:	1a12      	subs	r2, r2, r0
 80044ae:	eb63 0301 	sbc.w	r3, r3, r1
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f04f 0100 	mov.w	r1, #0
 80044ba:	00d9      	lsls	r1, r3, #3
 80044bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044c0:	00d0      	lsls	r0, r2, #3
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	1912      	adds	r2, r2, r4
 80044c8:	eb45 0303 	adc.w	r3, r5, r3
 80044cc:	f04f 0000 	mov.w	r0, #0
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	0299      	lsls	r1, r3, #10
 80044d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044da:	0290      	lsls	r0, r2, #10
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4610      	mov	r0, r2
 80044e2:	4619      	mov	r1, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	461a      	mov	r2, r3
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	f7fb fef8 	bl	80002e0 <__aeabi_uldivmod>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4613      	mov	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	3301      	adds	r3, #1
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	60bb      	str	r3, [r7, #8]
      break;
 8004512:	e002      	b.n	800451a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004516:	60bb      	str	r3, [r7, #8]
      break;
 8004518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800451a:	68bb      	ldr	r3, [r7, #8]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800
 800452c:	00f42400 	.word	0x00f42400
 8004530:	007a1200 	.word	0x007a1200

08004534 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004538:	4b03      	ldr	r3, [pc, #12]	; (8004548 <HAL_RCC_GetHCLKFreq+0x14>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	2000000c 	.word	0x2000000c

0800454c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004550:	f7ff fff0 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	0a9b      	lsrs	r3, r3, #10
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4903      	ldr	r1, [pc, #12]	; (8004570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40023800 	.word	0x40023800
 8004570:	08008634 	.word	0x08008634

08004574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004578:	f7ff ffdc 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 800457c:	4602      	mov	r2, r0
 800457e:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	0b5b      	lsrs	r3, r3, #13
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	4903      	ldr	r1, [pc, #12]	; (8004598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800458a:	5ccb      	ldrb	r3, [r1, r3]
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40023800 	.word	0x40023800
 8004598:	08008634 	.word	0x08008634

0800459c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d012      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045c4:	4b69      	ldr	r3, [pc, #420]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a68      	ldr	r2, [pc, #416]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045ce:	6093      	str	r3, [r2, #8]
 80045d0:	4b66      	ldr	r3, [pc, #408]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	4964      	ldr	r1, [pc, #400]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045e6:	2301      	movs	r3, #1
 80045e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d017      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045f6:	4b5d      	ldr	r3, [pc, #372]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	4959      	ldr	r1, [pc, #356]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004614:	d101      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004616:	2301      	movs	r3, #1
 8004618:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d017      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004632:	4b4e      	ldr	r3, [pc, #312]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004638:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	494a      	ldr	r1, [pc, #296]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004650:	d101      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004652:	2301      	movs	r3, #1
 8004654:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800465e:	2301      	movs	r3, #1
 8004660:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 808b 	beq.w	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004680:	4b3a      	ldr	r3, [pc, #232]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	4a39      	ldr	r2, [pc, #228]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468a:	6413      	str	r3, [r2, #64]	; 0x40
 800468c:	4b37      	ldr	r3, [pc, #220]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004698:	4b35      	ldr	r3, [pc, #212]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a34      	ldr	r2, [pc, #208]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800469e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a4:	f7fd fc20 	bl	8001ee8 <HAL_GetTick>
 80046a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ac:	f7fd fc1c 	bl	8001ee8 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	; 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e38f      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046be:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046ca:	4b28      	ldr	r3, [pc, #160]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d035      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d02e      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046e8:	4b20      	ldr	r3, [pc, #128]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046f2:	4b1e      	ldr	r3, [pc, #120]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a1d      	ldr	r2, [pc, #116]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046fe:	4b1b      	ldr	r3, [pc, #108]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	4a1a      	ldr	r2, [pc, #104]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004708:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800470a:	4a18      	ldr	r2, [pc, #96]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004710:	4b16      	ldr	r3, [pc, #88]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d114      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fd fbe4 	bl	8001ee8 <HAL_GetTick>
 8004720:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004722:	e00a      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004724:	f7fd fbe0 	bl	8001ee8 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e351      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473a:	4b0c      	ldr	r3, [pc, #48]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0ee      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004752:	d111      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004762:	400b      	ands	r3, r1
 8004764:	4901      	ldr	r1, [pc, #4]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
 800476a:	e00b      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800476c:	40023800 	.word	0x40023800
 8004770:	40007000 	.word	0x40007000
 8004774:	0ffffcff 	.word	0x0ffffcff
 8004778:	4bb3      	ldr	r3, [pc, #716]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4ab2      	ldr	r2, [pc, #712]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004782:	6093      	str	r3, [r2, #8]
 8004784:	4bb0      	ldr	r3, [pc, #704]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004790:	49ad      	ldr	r1, [pc, #692]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004792:	4313      	orrs	r3, r2
 8004794:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d010      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047a2:	4ba9      	ldr	r3, [pc, #676]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a8:	4aa7      	ldr	r2, [pc, #668]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047b2:	4ba5      	ldr	r3, [pc, #660]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	49a2      	ldr	r1, [pc, #648]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d0:	4b9d      	ldr	r3, [pc, #628]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047de:	499a      	ldr	r1, [pc, #616]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047f2:	4b95      	ldr	r3, [pc, #596]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004800:	4991      	ldr	r1, [pc, #580]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004814:	4b8c      	ldr	r3, [pc, #560]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004822:	4989      	ldr	r1, [pc, #548]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004836:	4b84      	ldr	r3, [pc, #528]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4980      	ldr	r1, [pc, #512]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004858:	4b7b      	ldr	r3, [pc, #492]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f023 0203 	bic.w	r2, r3, #3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	4978      	ldr	r1, [pc, #480]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800487a:	4b73      	ldr	r3, [pc, #460]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f023 020c 	bic.w	r2, r3, #12
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004888:	496f      	ldr	r1, [pc, #444]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800489c:	4b6a      	ldr	r3, [pc, #424]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	4967      	ldr	r1, [pc, #412]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048be:	4b62      	ldr	r3, [pc, #392]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048cc:	495e      	ldr	r1, [pc, #376]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048e0:	4b59      	ldr	r3, [pc, #356]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	4956      	ldr	r1, [pc, #344]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004902:	4b51      	ldr	r3, [pc, #324]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004910:	494d      	ldr	r1, [pc, #308]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004924:	4b48      	ldr	r3, [pc, #288]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	4945      	ldr	r1, [pc, #276]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004946:	4b40      	ldr	r3, [pc, #256]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004954:	493c      	ldr	r1, [pc, #240]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004968:	4b37      	ldr	r3, [pc, #220]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004976:	4934      	ldr	r1, [pc, #208]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d011      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800498a:	4b2f      	ldr	r3, [pc, #188]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004998:	492b      	ldr	r1, [pc, #172]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049a8:	d101      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80049aa:	2301      	movs	r3, #1
 80049ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049ba:	2301      	movs	r3, #1
 80049bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ca:	4b1f      	ldr	r3, [pc, #124]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d8:	491b      	ldr	r1, [pc, #108]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049ec:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049fc:	4912      	ldr	r1, [pc, #72]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a20:	4909      	ldr	r1, [pc, #36]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00f      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	e002      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004a46:	bf00      	nop
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	4986      	ldr	r1, [pc, #536]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a60:	4b81      	ldr	r3, [pc, #516]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a70:	497d      	ldr	r1, [pc, #500]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d006      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80d6 	beq.w	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a8c:	4b76      	ldr	r3, [pc, #472]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a75      	ldr	r2, [pc, #468]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a98:	f7fd fa26 	bl	8001ee8 <HAL_GetTick>
 8004a9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aa0:	f7fd fa22 	bl	8001ee8 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e195      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab2:	4b6d      	ldr	r3, [pc, #436]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d021      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d11d      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ad2:	4b65      	ldr	r3, [pc, #404]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ae0:	4b61      	ldr	r3, [pc, #388]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae6:	0e1b      	lsrs	r3, r3, #24
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	019a      	lsls	r2, r3, #6
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	041b      	lsls	r3, r3, #16
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	061b      	lsls	r3, r3, #24
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	071b      	lsls	r3, r3, #28
 8004b06:	4958      	ldr	r1, [pc, #352]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d004      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b22:	d00a      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02e      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b38:	d129      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b3a:	4b4b      	ldr	r3, [pc, #300]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b48:	4b47      	ldr	r3, [pc, #284]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4e:	0f1b      	lsrs	r3, r3, #28
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	019a      	lsls	r2, r3, #6
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	061b      	lsls	r3, r3, #24
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	071b      	lsls	r3, r3, #28
 8004b6e:	493e      	ldr	r1, [pc, #248]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b76:	4b3c      	ldr	r3, [pc, #240]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7c:	f023 021f 	bic.w	r2, r3, #31
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	3b01      	subs	r3, #1
 8004b86:	4938      	ldr	r1, [pc, #224]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01d      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b9a:	4b33      	ldr	r3, [pc, #204]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba0:	0e1b      	lsrs	r3, r3, #24
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ba8:	4b2f      	ldr	r3, [pc, #188]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bae:	0f1b      	lsrs	r3, r3, #28
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	019a      	lsls	r2, r3, #6
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	061b      	lsls	r3, r3, #24
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	071b      	lsls	r3, r3, #28
 8004bce:	4926      	ldr	r1, [pc, #152]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d011      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	019a      	lsls	r2, r3, #6
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	071b      	lsls	r3, r3, #28
 8004bfe:	491a      	ldr	r1, [pc, #104]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c06:	4b18      	ldr	r3, [pc, #96]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c12:	f7fd f969 	bl	8001ee8 <HAL_GetTick>
 8004c16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c1a:	f7fd f965 	bl	8001ee8 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b64      	cmp	r3, #100	; 0x64
 8004c26:	d901      	bls.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e0d8      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	f040 80ce 	bne.w	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4c:	f7fd f94c 	bl	8001ee8 <HAL_GetTick>
 8004c50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c52:	e00b      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c54:	f7fd f948 	bl	8001ee8 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d904      	bls.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e0bb      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c6c:	4b5e      	ldr	r3, [pc, #376]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c78:	d0ec      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d02e      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d12a      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ca2:	4b51      	ldr	r3, [pc, #324]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cb0:	4b4d      	ldr	r3, [pc, #308]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	0f1b      	lsrs	r3, r3, #28
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	019a      	lsls	r2, r3, #6
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	041b      	lsls	r3, r3, #16
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	061b      	lsls	r3, r3, #24
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	071b      	lsls	r3, r3, #28
 8004cd6:	4944      	ldr	r1, [pc, #272]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cde:	4b42      	ldr	r3, [pc, #264]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	493d      	ldr	r1, [pc, #244]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d022      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d0c:	d11d      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d0e:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	0e1b      	lsrs	r3, r3, #24
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d1c:	4b32      	ldr	r3, [pc, #200]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d22:	0f1b      	lsrs	r3, r3, #28
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	019a      	lsls	r2, r3, #6
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	431a      	orrs	r2, r3
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	061b      	lsls	r3, r3, #24
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	071b      	lsls	r3, r3, #28
 8004d42:	4929      	ldr	r1, [pc, #164]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d028      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d56:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	0e1b      	lsrs	r3, r3, #24
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d64:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	019a      	lsls	r2, r3, #6
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	041b      	lsls	r3, r3, #16
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	061b      	lsls	r3, r3, #24
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	071b      	lsls	r3, r3, #28
 8004d8a:	4917      	ldr	r1, [pc, #92]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	4911      	ldr	r1, [pc, #68]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004da8:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a0e      	ldr	r2, [pc, #56]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db4:	f7fd f898 	bl	8001ee8 <HAL_GetTick>
 8004db8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004dbc:	f7fd f894 	bl	8001ee8 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	; 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e007      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dda:	d1ef      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800

08004dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e049      	b.n	8004e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc fea6 	bl	8001b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f000 fbf4 	bl	8005618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e054      	b.n	8004f5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a26      	ldr	r2, [pc, #152]	; (8004f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d022      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ede:	d01d      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a22      	ldr	r2, [pc, #136]	; (8004f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d018      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1f      	ldr	r2, [pc, #124]	; (8004f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00e      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <HAL_TIM_Base_Start_IT+0xe0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_TIM_Base_Start_IT+0xe4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <HAL_TIM_Base_Start_IT+0xe8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d115      	bne.n	8004f48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <HAL_TIM_Base_Start_IT+0xec>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b06      	cmp	r3, #6
 8004f2c:	d015      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0xbe>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f34:	d011      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0201 	orr.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f46:	e008      	b.n	8004f5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e000      	b.n	8004f5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800
 8004f78:	40000c00 	.word	0x40000c00
 8004f7c:	40010400 	.word	0x40010400
 8004f80:	40014000 	.word	0x40014000
 8004f84:	40001800 	.word	0x40001800
 8004f88:	00010007 	.word	0x00010007

08004f8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e08f      	b.n	80050c0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7fc fd91 	bl	8001adc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6899      	ldr	r1, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	4b3e      	ldr	r3, [pc, #248]	; (80050c8 <HAL_TIM_Encoder_Init+0x13c>)
 8004fce:	400b      	ands	r3, r1
 8004fd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f000 fb1b 	bl	8005618 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_TIM_Encoder_Init+0x140>)
 8005008:	4013      	ands	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	4313      	orrs	r3, r2
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <HAL_TIM_Encoder_Init+0x144>)
 8005022:	4013      	ands	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <HAL_TIM_Encoder_Init+0x148>)
 800502a:	4013      	ands	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	4313      	orrs	r3, r2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	011a      	lsls	r2, r3, #4
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	031b      	lsls	r3, r3, #12
 800504c:	4313      	orrs	r3, r2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	4313      	orrs	r3, r2
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	fffebff8 	.word	0xfffebff8
 80050cc:	fffffcfc 	.word	0xfffffcfc
 80050d0:	fffff3f3 	.word	0xfffff3f3
 80050d4:	ffff0f0f 	.word	0xffff0f0f

080050d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005100:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d110      	bne.n	800512a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d102      	bne.n	8005114 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800510e:	7b7b      	ldrb	r3, [r7, #13]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d001      	beq.n	8005118 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e069      	b.n	80051ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005128:	e031      	b.n	800518e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b04      	cmp	r3, #4
 800512e:	d110      	bne.n	8005152 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005130:	7bbb      	ldrb	r3, [r7, #14]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d102      	bne.n	800513c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005136:	7b3b      	ldrb	r3, [r7, #12]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d001      	beq.n	8005140 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e055      	b.n	80051ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005150:	e01d      	b.n	800518e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d108      	bne.n	800516a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005158:	7bbb      	ldrb	r3, [r7, #14]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d105      	bne.n	800516a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800515e:	7b7b      	ldrb	r3, [r7, #13]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d102      	bne.n	800516a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005164:	7b3b      	ldrb	r3, [r7, #12]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d001      	beq.n	800516e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e03e      	b.n	80051ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_TIM_Encoder_Start+0xc4>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b04      	cmp	r3, #4
 8005198:	d008      	beq.n	80051ac <HAL_TIM_Encoder_Start+0xd4>
 800519a:	e00f      	b.n	80051bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2201      	movs	r2, #1
 80051a2:	2100      	movs	r1, #0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fb71 	bl	800588c <TIM_CCxChannelCmd>
      break;
 80051aa:	e016      	b.n	80051da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2201      	movs	r2, #1
 80051b2:	2104      	movs	r1, #4
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fb69 	bl	800588c <TIM_CCxChannelCmd>
      break;
 80051ba:	e00e      	b.n	80051da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2201      	movs	r2, #1
 80051c2:	2100      	movs	r1, #0
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fb61 	bl	800588c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2201      	movs	r2, #1
 80051d0:	2104      	movs	r1, #4
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fb5a 	bl	800588c <TIM_CCxChannelCmd>
      break;
 80051d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0201 	orr.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d122      	bne.n	8005250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d11b      	bne.n	8005250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0202 	mvn.w	r2, #2
 8005220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f9d0 	bl	80055dc <HAL_TIM_IC_CaptureCallback>
 800523c:	e005      	b.n	800524a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9c2 	bl	80055c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f9d3 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b04      	cmp	r3, #4
 800525c:	d122      	bne.n	80052a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b04      	cmp	r3, #4
 800526a:	d11b      	bne.n	80052a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0204 	mvn.w	r2, #4
 8005274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f9a6 	bl	80055dc <HAL_TIM_IC_CaptureCallback>
 8005290:	e005      	b.n	800529e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f998 	bl	80055c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f9a9 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d122      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d11b      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0208 	mvn.w	r2, #8
 80052c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2204      	movs	r2, #4
 80052ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f97c 	bl	80055dc <HAL_TIM_IC_CaptureCallback>
 80052e4:	e005      	b.n	80052f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f96e 	bl	80055c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f97f 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b10      	cmp	r3, #16
 8005304:	d122      	bne.n	800534c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b10      	cmp	r3, #16
 8005312:	d11b      	bne.n	800534c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0210 	mvn.w	r2, #16
 800531c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2208      	movs	r2, #8
 8005322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f952 	bl	80055dc <HAL_TIM_IC_CaptureCallback>
 8005338:	e005      	b.n	8005346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f944 	bl	80055c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f955 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d10e      	bne.n	8005378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	d107      	bne.n	8005378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0201 	mvn.w	r2, #1
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fb fd8c 	bl	8000e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d10e      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d107      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fb32 	bl	8005a08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b2:	d10e      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d107      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fb25 	bl	8005a1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d10e      	bne.n	80053fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d107      	bne.n	80053fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f903 	bl	8005604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b20      	cmp	r3, #32
 800540a:	d10e      	bne.n	800542a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b20      	cmp	r3, #32
 8005418:	d107      	bne.n	800542a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f06f 0220 	mvn.w	r2, #32
 8005422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fae5 	bl	80059f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIM_ConfigClockSource+0x1c>
 800544c:	2302      	movs	r3, #2
 800544e:	e0b4      	b.n	80055ba <HAL_TIM_ConfigClockSource+0x186>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	4b56      	ldr	r3, [pc, #344]	; (80055c4 <HAL_TIM_ConfigClockSource+0x190>)
 800546c:	4013      	ands	r3, r2
 800546e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005488:	d03e      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0xd4>
 800548a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548e:	f200 8087 	bhi.w	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005496:	f000 8086 	beq.w	80055a6 <HAL_TIM_ConfigClockSource+0x172>
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	d87f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054a0:	2b70      	cmp	r3, #112	; 0x70
 80054a2:	d01a      	beq.n	80054da <HAL_TIM_ConfigClockSource+0xa6>
 80054a4:	2b70      	cmp	r3, #112	; 0x70
 80054a6:	d87b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054a8:	2b60      	cmp	r3, #96	; 0x60
 80054aa:	d050      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x11a>
 80054ac:	2b60      	cmp	r3, #96	; 0x60
 80054ae:	d877      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b0:	2b50      	cmp	r3, #80	; 0x50
 80054b2:	d03c      	beq.n	800552e <HAL_TIM_ConfigClockSource+0xfa>
 80054b4:	2b50      	cmp	r3, #80	; 0x50
 80054b6:	d873      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d058      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x13a>
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d86f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c0:	2b30      	cmp	r3, #48	; 0x30
 80054c2:	d064      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d86b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d060      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d867      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d05c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d05a      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054d8:	e062      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f000 f9af 	bl	800584c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	609a      	str	r2, [r3, #8]
      break;
 8005506:	e04f      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6899      	ldr	r1, [r3, #8]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f000 f998 	bl	800584c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800552a:	609a      	str	r2, [r3, #8]
      break;
 800552c:	e03c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	461a      	mov	r2, r3
 800553c:	f000 f90c 	bl	8005758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2150      	movs	r1, #80	; 0x50
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f965 	bl	8005816 <TIM_ITRx_SetConfig>
      break;
 800554c:	e02c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6859      	ldr	r1, [r3, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	461a      	mov	r2, r3
 800555c:	f000 f92b 	bl	80057b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2160      	movs	r1, #96	; 0x60
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f955 	bl	8005816 <TIM_ITRx_SetConfig>
      break;
 800556c:	e01c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	461a      	mov	r2, r3
 800557c:	f000 f8ec 	bl	8005758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2140      	movs	r1, #64	; 0x40
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f945 	bl	8005816 <TIM_ITRx_SetConfig>
      break;
 800558c:	e00c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f000 f93c 	bl	8005816 <TIM_ITRx_SetConfig>
      break;
 800559e:	e003      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      break;
 80055a4:	e000      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	fffeff88 	.word	0xfffeff88

080055c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a40      	ldr	r2, [pc, #256]	; (800572c <TIM_Base_SetConfig+0x114>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d013      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a3d      	ldr	r2, [pc, #244]	; (8005730 <TIM_Base_SetConfig+0x118>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a3c      	ldr	r2, [pc, #240]	; (8005734 <TIM_Base_SetConfig+0x11c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3b      	ldr	r2, [pc, #236]	; (8005738 <TIM_Base_SetConfig+0x120>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3a      	ldr	r2, [pc, #232]	; (800573c <TIM_Base_SetConfig+0x124>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d108      	bne.n	800566a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a2f      	ldr	r2, [pc, #188]	; (800572c <TIM_Base_SetConfig+0x114>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d02b      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d027      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2c      	ldr	r2, [pc, #176]	; (8005730 <TIM_Base_SetConfig+0x118>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d023      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <TIM_Base_SetConfig+0x11c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01f      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <TIM_Base_SetConfig+0x120>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01b      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a29      	ldr	r2, [pc, #164]	; (800573c <TIM_Base_SetConfig+0x124>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d017      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a28      	ldr	r2, [pc, #160]	; (8005740 <TIM_Base_SetConfig+0x128>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d013      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a27      	ldr	r2, [pc, #156]	; (8005744 <TIM_Base_SetConfig+0x12c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00f      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a26      	ldr	r2, [pc, #152]	; (8005748 <TIM_Base_SetConfig+0x130>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00b      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a25      	ldr	r2, [pc, #148]	; (800574c <TIM_Base_SetConfig+0x134>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d007      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a24      	ldr	r2, [pc, #144]	; (8005750 <TIM_Base_SetConfig+0x138>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a23      	ldr	r2, [pc, #140]	; (8005754 <TIM_Base_SetConfig+0x13c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d108      	bne.n	80056dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a0a      	ldr	r2, [pc, #40]	; (800572c <TIM_Base_SetConfig+0x114>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_Base_SetConfig+0xf8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a0c      	ldr	r2, [pc, #48]	; (800573c <TIM_Base_SetConfig+0x124>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d103      	bne.n	8005718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	615a      	str	r2, [r3, #20]
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40010400 	.word	0x40010400
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800
 800574c:	40001800 	.word	0x40001800
 8005750:	40001c00 	.word	0x40001c00
 8005754:	40002000 	.word	0x40002000

08005758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f023 0201 	bic.w	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 030a 	bic.w	r3, r3, #10
 8005794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b087      	sub	sp, #28
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f023 0210 	bic.w	r2, r3, #16
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	031b      	lsls	r3, r3, #12
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005816:	b480      	push	{r7}
 8005818:	b085      	sub	sp, #20
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	f043 0307 	orr.w	r3, r3, #7
 8005838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	609a      	str	r2, [r3, #8]
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	021a      	lsls	r2, r3, #8
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	431a      	orrs	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4313      	orrs	r3, r2
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	609a      	str	r2, [r3, #8]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2201      	movs	r2, #1
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a1a      	ldr	r2, [r3, #32]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	401a      	ands	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a1a      	ldr	r2, [r3, #32]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	fa01 f303 	lsl.w	r3, r1, r3
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	621a      	str	r2, [r3, #32]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e06d      	b.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a30      	ldr	r2, [pc, #192]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2f      	ldr	r2, [pc, #188]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d108      	bne.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800592a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a20      	ldr	r2, [pc, #128]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d022      	beq.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005962:	d01d      	beq.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1d      	ldr	r2, [pc, #116]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1c      	ldr	r2, [pc, #112]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1a      	ldr	r2, [pc, #104]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a15      	ldr	r2, [pc, #84]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a16      	ldr	r2, [pc, #88]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a15      	ldr	r2, [pc, #84]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d10c      	bne.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40010400 	.word	0x40010400
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40001800 	.word	0x40001800

080059f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e040      	b.n	8005ac4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fc f8f8 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	; 0x24
 8005a5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fbca 	bl	8006208 <UART_SetConfig>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e022      	b.n	8005ac4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fe20 	bl	80066cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fea7 	bl	8006810 <UART_CheckIdleState>
 8005ac2:	4603      	mov	r3, r0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08a      	sub	sp, #40	; 0x28
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	f040 8081 	bne.w	8005be8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_UART_Transmit+0x26>
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e079      	b.n	8005bea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_UART_Transmit+0x38>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e072      	b.n	8005bea <HAL_UART_Transmit+0x11e>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2221      	movs	r2, #33	; 0x21
 8005b18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b1a:	f7fc f9e5 	bl	8001ee8 <HAL_GetTick>
 8005b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b38:	d108      	bne.n	8005b4c <HAL_UART_Transmit+0x80>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	e003      	b.n	8005b54 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b5c:	e02c      	b.n	8005bb8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2180      	movs	r1, #128	; 0x80
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fe9a 	bl	80068a2 <UART_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e038      	b.n	8005bea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	3302      	adds	r3, #2
 8005b92:	61bb      	str	r3, [r7, #24]
 8005b94:	e007      	b.n	8005ba6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	781a      	ldrb	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1cc      	bne.n	8005b5e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2140      	movs	r1, #64	; 0x40
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fe67 	bl	80068a2 <UART_WaitOnFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e005      	b.n	8005bea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e000      	b.n	8005bea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005be8:	2302      	movs	r3, #2
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b0ba      	sub	sp, #232	; 0xe8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c22:	4013      	ands	r3, r2
 8005c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d115      	bne.n	8005c5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00f      	beq.n	8005c5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 82a4 	beq.w	800619a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
      }
      return;
 8005c5a:	e29e      	b.n	800619a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8117 	beq.w	8005e94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c76:	4b85      	ldr	r3, [pc, #532]	; (8005e8c <HAL_UART_IRQHandler+0x298>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 810a 	beq.w	8005e94 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d011      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xbc>
 8005c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00b      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca6:	f043 0201 	orr.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d011      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xec>
 8005cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd6:	f043 0204 	orr.w	r2, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d011      	beq.n	8005d10 <HAL_UART_IRQHandler+0x11c>
 8005cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d06:	f043 0202 	orr.w	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d017      	beq.n	8005d4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d42:	f043 0208 	orr.w	r2, r3, #8
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d012      	beq.n	8005d7e <HAL_UART_IRQHandler+0x18a>
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00c      	beq.n	8005d7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d74:	f043 0220 	orr.w	r2, r3, #32
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 820a 	beq.w	800619e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00d      	beq.n	8005db2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d005      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d04f      	beq.n	8005e76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fe27 	bl	8006a2a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d141      	bne.n	8005e6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3308      	adds	r3, #8
 8005e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1d9      	bne.n	8005dea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d013      	beq.n	8005e66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <HAL_UART_IRQHandler+0x29c>)
 8005e44:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fc fea5 	bl	8002b9a <HAL_DMA_Abort_IT>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d017      	beq.n	8005e86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005e60:	4610      	mov	r0, r2
 8005e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	e00f      	b.n	8005e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f9ae 	bl	80061c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6c:	e00b      	b.n	8005e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f9aa 	bl	80061c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e74:	e007      	b.n	8005e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f9a6 	bl	80061c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005e84:	e18b      	b.n	800619e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e86:	bf00      	nop
    return;
 8005e88:	e189      	b.n	800619e <HAL_UART_IRQHandler+0x5aa>
 8005e8a:	bf00      	nop
 8005e8c:	04000120 	.word	0x04000120
 8005e90:	08006af1 	.word	0x08006af1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	f040 8144 	bne.w	8006126 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 813d 	beq.w	8006126 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8136 	beq.w	8006126 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2210      	movs	r2, #16
 8005ec0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	f040 80b2 	bne.w	8006036 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ede:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 815d 	beq.w	80061a2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	f080 8155 	bcs.w	80061a2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005efe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0c:	f000 8085 	beq.w	800601a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1da      	bne.n	8005f10 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e1      	bne.n	8005f5a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e3      	bne.n	8005f96 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fea:	f023 0310 	bic.w	r3, r3, #16
 8005fee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ffc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ffe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006002:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800600a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e4      	bne.n	8005fda <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006014:	4618      	mov	r0, r3
 8006016:	f7fc fd50 	bl	8002aba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006026:	b29b      	uxth	r3, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	b29b      	uxth	r3, r3
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f8d4 	bl	80061dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006034:	e0b5      	b.n	80061a2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006042:	b29b      	uxth	r3, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 80a7 	beq.w	80061a6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80a2 	beq.w	80061a6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006076:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006084:	647b      	str	r3, [r7, #68]	; 0x44
 8006086:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800608a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e4      	bne.n	8006062 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3308      	adds	r3, #8
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	623b      	str	r3, [r7, #32]
   return(result);
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060bc:	633a      	str	r2, [r7, #48]	; 0x30
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e3      	bne.n	8006098 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0310 	bic.w	r3, r3, #16
 80060f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	69b9      	ldr	r1, [r7, #24]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	617b      	str	r3, [r7, #20]
   return(result);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e4      	bne.n	80060e2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f85c 	bl	80061dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006124:	e03f      	b.n	80061a6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00e      	beq.n	8006150 <HAL_UART_IRQHandler+0x55c>
 8006132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006146:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f853 	bl	80061f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800614e:	e02d      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00e      	beq.n	800617a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006164:	2b00      	cmp	r3, #0
 8006166:	d008      	beq.n	800617a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01c      	beq.n	80061aa <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
    }
    return;
 8006178:	e017      	b.n	80061aa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d012      	beq.n	80061ac <HAL_UART_IRQHandler+0x5b8>
 8006186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00c      	beq.n	80061ac <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fcc2 	bl	8006b1c <UART_EndTransmit_IT>
    return;
 8006198:	e008      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
      return;
 800619a:	bf00      	nop
 800619c:	e006      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
    return;
 800619e:	bf00      	nop
 80061a0:	e004      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
      return;
 80061a2:	bf00      	nop
 80061a4:	e002      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
      return;
 80061a6:	bf00      	nop
 80061a8:	e000      	b.n	80061ac <HAL_UART_IRQHandler+0x5b8>
    return;
 80061aa:	bf00      	nop
  }

}
 80061ac:	37e8      	adds	r7, #232	; 0xe8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop

080061b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4ba7      	ldr	r3, [pc, #668]	; (80064d0 <UART_SetConfig+0x2c8>)
 8006234:	4013      	ands	r3, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	6979      	ldr	r1, [r7, #20]
 800623c:	430b      	orrs	r3, r1
 800623e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a95      	ldr	r2, [pc, #596]	; (80064d4 <UART_SetConfig+0x2cc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d120      	bne.n	80062c6 <UART_SetConfig+0xbe>
 8006284:	4b94      	ldr	r3, [pc, #592]	; (80064d8 <UART_SetConfig+0x2d0>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	2b03      	cmp	r3, #3
 8006290:	d816      	bhi.n	80062c0 <UART_SetConfig+0xb8>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <UART_SetConfig+0x90>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062b5 	.word	0x080062b5
 80062a0:	080062af 	.word	0x080062af
 80062a4:	080062bb 	.word	0x080062bb
 80062a8:	2301      	movs	r3, #1
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e14f      	b.n	800654e <UART_SetConfig+0x346>
 80062ae:	2302      	movs	r3, #2
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e14c      	b.n	800654e <UART_SetConfig+0x346>
 80062b4:	2304      	movs	r3, #4
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e149      	b.n	800654e <UART_SetConfig+0x346>
 80062ba:	2308      	movs	r3, #8
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e146      	b.n	800654e <UART_SetConfig+0x346>
 80062c0:	2310      	movs	r3, #16
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e143      	b.n	800654e <UART_SetConfig+0x346>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a84      	ldr	r2, [pc, #528]	; (80064dc <UART_SetConfig+0x2d4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d132      	bne.n	8006336 <UART_SetConfig+0x12e>
 80062d0:	4b81      	ldr	r3, [pc, #516]	; (80064d8 <UART_SetConfig+0x2d0>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d6:	f003 030c 	and.w	r3, r3, #12
 80062da:	2b0c      	cmp	r3, #12
 80062dc:	d828      	bhi.n	8006330 <UART_SetConfig+0x128>
 80062de:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <UART_SetConfig+0xdc>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	08006319 	.word	0x08006319
 80062e8:	08006331 	.word	0x08006331
 80062ec:	08006331 	.word	0x08006331
 80062f0:	08006331 	.word	0x08006331
 80062f4:	08006325 	.word	0x08006325
 80062f8:	08006331 	.word	0x08006331
 80062fc:	08006331 	.word	0x08006331
 8006300:	08006331 	.word	0x08006331
 8006304:	0800631f 	.word	0x0800631f
 8006308:	08006331 	.word	0x08006331
 800630c:	08006331 	.word	0x08006331
 8006310:	08006331 	.word	0x08006331
 8006314:	0800632b 	.word	0x0800632b
 8006318:	2300      	movs	r3, #0
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e117      	b.n	800654e <UART_SetConfig+0x346>
 800631e:	2302      	movs	r3, #2
 8006320:	77fb      	strb	r3, [r7, #31]
 8006322:	e114      	b.n	800654e <UART_SetConfig+0x346>
 8006324:	2304      	movs	r3, #4
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e111      	b.n	800654e <UART_SetConfig+0x346>
 800632a:	2308      	movs	r3, #8
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e10e      	b.n	800654e <UART_SetConfig+0x346>
 8006330:	2310      	movs	r3, #16
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e10b      	b.n	800654e <UART_SetConfig+0x346>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a69      	ldr	r2, [pc, #420]	; (80064e0 <UART_SetConfig+0x2d8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d120      	bne.n	8006382 <UART_SetConfig+0x17a>
 8006340:	4b65      	ldr	r3, [pc, #404]	; (80064d8 <UART_SetConfig+0x2d0>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800634a:	2b30      	cmp	r3, #48	; 0x30
 800634c:	d013      	beq.n	8006376 <UART_SetConfig+0x16e>
 800634e:	2b30      	cmp	r3, #48	; 0x30
 8006350:	d814      	bhi.n	800637c <UART_SetConfig+0x174>
 8006352:	2b20      	cmp	r3, #32
 8006354:	d009      	beq.n	800636a <UART_SetConfig+0x162>
 8006356:	2b20      	cmp	r3, #32
 8006358:	d810      	bhi.n	800637c <UART_SetConfig+0x174>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <UART_SetConfig+0x15c>
 800635e:	2b10      	cmp	r3, #16
 8006360:	d006      	beq.n	8006370 <UART_SetConfig+0x168>
 8006362:	e00b      	b.n	800637c <UART_SetConfig+0x174>
 8006364:	2300      	movs	r3, #0
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e0f1      	b.n	800654e <UART_SetConfig+0x346>
 800636a:	2302      	movs	r3, #2
 800636c:	77fb      	strb	r3, [r7, #31]
 800636e:	e0ee      	b.n	800654e <UART_SetConfig+0x346>
 8006370:	2304      	movs	r3, #4
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e0eb      	b.n	800654e <UART_SetConfig+0x346>
 8006376:	2308      	movs	r3, #8
 8006378:	77fb      	strb	r3, [r7, #31]
 800637a:	e0e8      	b.n	800654e <UART_SetConfig+0x346>
 800637c:	2310      	movs	r3, #16
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e0e5      	b.n	800654e <UART_SetConfig+0x346>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a57      	ldr	r2, [pc, #348]	; (80064e4 <UART_SetConfig+0x2dc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d120      	bne.n	80063ce <UART_SetConfig+0x1c6>
 800638c:	4b52      	ldr	r3, [pc, #328]	; (80064d8 <UART_SetConfig+0x2d0>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006396:	2bc0      	cmp	r3, #192	; 0xc0
 8006398:	d013      	beq.n	80063c2 <UART_SetConfig+0x1ba>
 800639a:	2bc0      	cmp	r3, #192	; 0xc0
 800639c:	d814      	bhi.n	80063c8 <UART_SetConfig+0x1c0>
 800639e:	2b80      	cmp	r3, #128	; 0x80
 80063a0:	d009      	beq.n	80063b6 <UART_SetConfig+0x1ae>
 80063a2:	2b80      	cmp	r3, #128	; 0x80
 80063a4:	d810      	bhi.n	80063c8 <UART_SetConfig+0x1c0>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <UART_SetConfig+0x1a8>
 80063aa:	2b40      	cmp	r3, #64	; 0x40
 80063ac:	d006      	beq.n	80063bc <UART_SetConfig+0x1b4>
 80063ae:	e00b      	b.n	80063c8 <UART_SetConfig+0x1c0>
 80063b0:	2300      	movs	r3, #0
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e0cb      	b.n	800654e <UART_SetConfig+0x346>
 80063b6:	2302      	movs	r3, #2
 80063b8:	77fb      	strb	r3, [r7, #31]
 80063ba:	e0c8      	b.n	800654e <UART_SetConfig+0x346>
 80063bc:	2304      	movs	r3, #4
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e0c5      	b.n	800654e <UART_SetConfig+0x346>
 80063c2:	2308      	movs	r3, #8
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e0c2      	b.n	800654e <UART_SetConfig+0x346>
 80063c8:	2310      	movs	r3, #16
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e0bf      	b.n	800654e <UART_SetConfig+0x346>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a45      	ldr	r2, [pc, #276]	; (80064e8 <UART_SetConfig+0x2e0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d125      	bne.n	8006424 <UART_SetConfig+0x21c>
 80063d8:	4b3f      	ldr	r3, [pc, #252]	; (80064d8 <UART_SetConfig+0x2d0>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e6:	d017      	beq.n	8006418 <UART_SetConfig+0x210>
 80063e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ec:	d817      	bhi.n	800641e <UART_SetConfig+0x216>
 80063ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f2:	d00b      	beq.n	800640c <UART_SetConfig+0x204>
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f8:	d811      	bhi.n	800641e <UART_SetConfig+0x216>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <UART_SetConfig+0x1fe>
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006402:	d006      	beq.n	8006412 <UART_SetConfig+0x20a>
 8006404:	e00b      	b.n	800641e <UART_SetConfig+0x216>
 8006406:	2300      	movs	r3, #0
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e0a0      	b.n	800654e <UART_SetConfig+0x346>
 800640c:	2302      	movs	r3, #2
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e09d      	b.n	800654e <UART_SetConfig+0x346>
 8006412:	2304      	movs	r3, #4
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e09a      	b.n	800654e <UART_SetConfig+0x346>
 8006418:	2308      	movs	r3, #8
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e097      	b.n	800654e <UART_SetConfig+0x346>
 800641e:	2310      	movs	r3, #16
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e094      	b.n	800654e <UART_SetConfig+0x346>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a30      	ldr	r2, [pc, #192]	; (80064ec <UART_SetConfig+0x2e4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d125      	bne.n	800647a <UART_SetConfig+0x272>
 800642e:	4b2a      	ldr	r3, [pc, #168]	; (80064d8 <UART_SetConfig+0x2d0>)
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800643c:	d017      	beq.n	800646e <UART_SetConfig+0x266>
 800643e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006442:	d817      	bhi.n	8006474 <UART_SetConfig+0x26c>
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006448:	d00b      	beq.n	8006462 <UART_SetConfig+0x25a>
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644e:	d811      	bhi.n	8006474 <UART_SetConfig+0x26c>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <UART_SetConfig+0x254>
 8006454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006458:	d006      	beq.n	8006468 <UART_SetConfig+0x260>
 800645a:	e00b      	b.n	8006474 <UART_SetConfig+0x26c>
 800645c:	2301      	movs	r3, #1
 800645e:	77fb      	strb	r3, [r7, #31]
 8006460:	e075      	b.n	800654e <UART_SetConfig+0x346>
 8006462:	2302      	movs	r3, #2
 8006464:	77fb      	strb	r3, [r7, #31]
 8006466:	e072      	b.n	800654e <UART_SetConfig+0x346>
 8006468:	2304      	movs	r3, #4
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e06f      	b.n	800654e <UART_SetConfig+0x346>
 800646e:	2308      	movs	r3, #8
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e06c      	b.n	800654e <UART_SetConfig+0x346>
 8006474:	2310      	movs	r3, #16
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e069      	b.n	800654e <UART_SetConfig+0x346>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1c      	ldr	r2, [pc, #112]	; (80064f0 <UART_SetConfig+0x2e8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d137      	bne.n	80064f4 <UART_SetConfig+0x2ec>
 8006484:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <UART_SetConfig+0x2d0>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800648e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006492:	d017      	beq.n	80064c4 <UART_SetConfig+0x2bc>
 8006494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006498:	d817      	bhi.n	80064ca <UART_SetConfig+0x2c2>
 800649a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649e:	d00b      	beq.n	80064b8 <UART_SetConfig+0x2b0>
 80064a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a4:	d811      	bhi.n	80064ca <UART_SetConfig+0x2c2>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <UART_SetConfig+0x2aa>
 80064aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ae:	d006      	beq.n	80064be <UART_SetConfig+0x2b6>
 80064b0:	e00b      	b.n	80064ca <UART_SetConfig+0x2c2>
 80064b2:	2300      	movs	r3, #0
 80064b4:	77fb      	strb	r3, [r7, #31]
 80064b6:	e04a      	b.n	800654e <UART_SetConfig+0x346>
 80064b8:	2302      	movs	r3, #2
 80064ba:	77fb      	strb	r3, [r7, #31]
 80064bc:	e047      	b.n	800654e <UART_SetConfig+0x346>
 80064be:	2304      	movs	r3, #4
 80064c0:	77fb      	strb	r3, [r7, #31]
 80064c2:	e044      	b.n	800654e <UART_SetConfig+0x346>
 80064c4:	2308      	movs	r3, #8
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e041      	b.n	800654e <UART_SetConfig+0x346>
 80064ca:	2310      	movs	r3, #16
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	e03e      	b.n	800654e <UART_SetConfig+0x346>
 80064d0:	efff69f3 	.word	0xefff69f3
 80064d4:	40011000 	.word	0x40011000
 80064d8:	40023800 	.word	0x40023800
 80064dc:	40004400 	.word	0x40004400
 80064e0:	40004800 	.word	0x40004800
 80064e4:	40004c00 	.word	0x40004c00
 80064e8:	40005000 	.word	0x40005000
 80064ec:	40011400 	.word	0x40011400
 80064f0:	40007800 	.word	0x40007800
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a71      	ldr	r2, [pc, #452]	; (80066c0 <UART_SetConfig+0x4b8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d125      	bne.n	800654a <UART_SetConfig+0x342>
 80064fe:	4b71      	ldr	r3, [pc, #452]	; (80066c4 <UART_SetConfig+0x4bc>)
 8006500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006508:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800650c:	d017      	beq.n	800653e <UART_SetConfig+0x336>
 800650e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006512:	d817      	bhi.n	8006544 <UART_SetConfig+0x33c>
 8006514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006518:	d00b      	beq.n	8006532 <UART_SetConfig+0x32a>
 800651a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651e:	d811      	bhi.n	8006544 <UART_SetConfig+0x33c>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <UART_SetConfig+0x324>
 8006524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006528:	d006      	beq.n	8006538 <UART_SetConfig+0x330>
 800652a:	e00b      	b.n	8006544 <UART_SetConfig+0x33c>
 800652c:	2300      	movs	r3, #0
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e00d      	b.n	800654e <UART_SetConfig+0x346>
 8006532:	2302      	movs	r3, #2
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e00a      	b.n	800654e <UART_SetConfig+0x346>
 8006538:	2304      	movs	r3, #4
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e007      	b.n	800654e <UART_SetConfig+0x346>
 800653e:	2308      	movs	r3, #8
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	e004      	b.n	800654e <UART_SetConfig+0x346>
 8006544:	2310      	movs	r3, #16
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e001      	b.n	800654e <UART_SetConfig+0x346>
 800654a:	2310      	movs	r3, #16
 800654c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006556:	d15a      	bne.n	800660e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006558:	7ffb      	ldrb	r3, [r7, #31]
 800655a:	2b08      	cmp	r3, #8
 800655c:	d827      	bhi.n	80065ae <UART_SetConfig+0x3a6>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x35c>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006589 	.word	0x08006589
 8006568:	08006591 	.word	0x08006591
 800656c:	08006599 	.word	0x08006599
 8006570:	080065af 	.word	0x080065af
 8006574:	0800659f 	.word	0x0800659f
 8006578:	080065af 	.word	0x080065af
 800657c:	080065af 	.word	0x080065af
 8006580:	080065af 	.word	0x080065af
 8006584:	080065a7 	.word	0x080065a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fd ffe0 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 800658c:	61b8      	str	r0, [r7, #24]
        break;
 800658e:	e013      	b.n	80065b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006590:	f7fd fff0 	bl	8004574 <HAL_RCC_GetPCLK2Freq>
 8006594:	61b8      	str	r0, [r7, #24]
        break;
 8006596:	e00f      	b.n	80065b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006598:	4b4b      	ldr	r3, [pc, #300]	; (80066c8 <UART_SetConfig+0x4c0>)
 800659a:	61bb      	str	r3, [r7, #24]
        break;
 800659c:	e00c      	b.n	80065b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659e:	f7fd fee7 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 80065a2:	61b8      	str	r0, [r7, #24]
        break;
 80065a4:	e008      	b.n	80065b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065aa:	61bb      	str	r3, [r7, #24]
        break;
 80065ac:	e004      	b.n	80065b8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	77bb      	strb	r3, [r7, #30]
        break;
 80065b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d074      	beq.n	80066a8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	005a      	lsls	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	441a      	add	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d916      	bls.n	8006608 <UART_SetConfig+0x400>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e0:	d212      	bcs.n	8006608 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f023 030f 	bic.w	r3, r3, #15
 80065ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	89fb      	ldrh	r3, [r7, #14]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	89fa      	ldrh	r2, [r7, #14]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	e04f      	b.n	80066a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	77bb      	strb	r3, [r7, #30]
 800660c:	e04c      	b.n	80066a8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800660e:	7ffb      	ldrb	r3, [r7, #31]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d828      	bhi.n	8006666 <UART_SetConfig+0x45e>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x414>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006641 	.word	0x08006641
 8006620:	08006649 	.word	0x08006649
 8006624:	08006651 	.word	0x08006651
 8006628:	08006667 	.word	0x08006667
 800662c:	08006657 	.word	0x08006657
 8006630:	08006667 	.word	0x08006667
 8006634:	08006667 	.word	0x08006667
 8006638:	08006667 	.word	0x08006667
 800663c:	0800665f 	.word	0x0800665f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006640:	f7fd ff84 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 8006644:	61b8      	str	r0, [r7, #24]
        break;
 8006646:	e013      	b.n	8006670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006648:	f7fd ff94 	bl	8004574 <HAL_RCC_GetPCLK2Freq>
 800664c:	61b8      	str	r0, [r7, #24]
        break;
 800664e:	e00f      	b.n	8006670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006650:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <UART_SetConfig+0x4c0>)
 8006652:	61bb      	str	r3, [r7, #24]
        break;
 8006654:	e00c      	b.n	8006670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006656:	f7fd fe8b 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 800665a:	61b8      	str	r0, [r7, #24]
        break;
 800665c:	e008      	b.n	8006670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800665e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006662:	61bb      	str	r3, [r7, #24]
        break;
 8006664:	e004      	b.n	8006670 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	77bb      	strb	r3, [r7, #30]
        break;
 800666e:	bf00      	nop
    }

    if (pclk != 0U)
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d018      	beq.n	80066a8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	085a      	lsrs	r2, r3, #1
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	441a      	add	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	fbb2 f3f3 	udiv	r3, r2, r3
 8006688:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b0f      	cmp	r3, #15
 800668e:	d909      	bls.n	80066a4 <UART_SetConfig+0x49c>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006696:	d205      	bcs.n	80066a4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	b29a      	uxth	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60da      	str	r2, [r3, #12]
 80066a2:	e001      	b.n	80066a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40007c00 	.word	0x40007c00
 80066c4:	40023800 	.word	0x40023800
 80066c8:	00f42400 	.word	0x00f42400

080066cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	f003 0310 	and.w	r3, r3, #16
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01a      	beq.n	80067e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ca:	d10a      	bne.n	80067e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	605a      	str	r2, [r3, #4]
  }
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af02      	add	r7, sp, #8
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006820:	f7fb fb62 	bl	8001ee8 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b08      	cmp	r3, #8
 8006832:	d10e      	bne.n	8006852 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f82d 	bl	80068a2 <UART_WaitOnFlagUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e023      	b.n	800689a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b04      	cmp	r3, #4
 800685e:	d10e      	bne.n	800687e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f817 	bl	80068a2 <UART_WaitOnFlagUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e00d      	b.n	800689a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b09c      	sub	sp, #112	; 0x70
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	603b      	str	r3, [r7, #0]
 80068ae:	4613      	mov	r3, r2
 80068b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b2:	e0a5      	b.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ba:	f000 80a1 	beq.w	8006a00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068be:	f7fb fb13 	bl	8001ee8 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d302      	bcc.n	80068d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80068ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d13e      	bne.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068e8:	667b      	str	r3, [r7, #100]	; 0x64
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e6      	bne.n	80068d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3308      	adds	r3, #8
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	f023 0301 	bic.w	r3, r3, #1
 800691c:	663b      	str	r3, [r7, #96]	; 0x60
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006926:	64ba      	str	r2, [r7, #72]	; 0x48
 8006928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800692c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e5      	bne.n	8006906 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e067      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d04f      	beq.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800696e:	d147      	bne.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006978:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800698e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006998:	637b      	str	r3, [r7, #52]	; 0x34
 800699a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800699e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e6      	bne.n	800697a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3308      	adds	r3, #8
 80069b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	613b      	str	r3, [r7, #16]
   return(result);
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f023 0301 	bic.w	r3, r3, #1
 80069c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3308      	adds	r3, #8
 80069ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069cc:	623a      	str	r2, [r7, #32]
 80069ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	69f9      	ldr	r1, [r7, #28]
 80069d2:	6a3a      	ldr	r2, [r7, #32]
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e010      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69da      	ldr	r2, [r3, #28]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	bf0c      	ite	eq
 8006a10:	2301      	moveq	r3, #1
 8006a12:	2300      	movne	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	461a      	mov	r2, r3
 8006a18:	79fb      	ldrb	r3, [r7, #7]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	f43f af4a 	beq.w	80068b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3770      	adds	r7, #112	; 0x70
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b095      	sub	sp, #84	; 0x54
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a50:	643b      	str	r3, [r7, #64]	; 0x40
 8006a52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e6      	bne.n	8006a32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	f023 0301 	bic.w	r3, r3, #1
 8006a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3308      	adds	r3, #8
 8006a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e5      	bne.n	8006a64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d118      	bne.n	8006ad2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f023 0310 	bic.w	r3, r3, #16
 8006ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6979      	ldr	r1, [r7, #20]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	613b      	str	r3, [r7, #16]
   return(result);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e6      	bne.n	8006aa0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ae4:	bf00      	nop
 8006ae6:	3754      	adds	r7, #84	; 0x54
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7ff fb5a 	bl	80061c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6979      	ldr	r1, [r7, #20]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e6      	bne.n	8006b24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff fb26 	bl	80061b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b68:	bf00      	nop
 8006b6a:	3720      	adds	r7, #32
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b70:	b084      	sub	sp, #16
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	f107 001c 	add.w	r0, r7, #28
 8006b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d120      	bne.n	8006bca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	4b20      	ldr	r3, [pc, #128]	; (8006c1c <USB_CoreInit+0xac>)
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d105      	bne.n	8006bbe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fa92 	bl	80070e8 <USB_CoreReset>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73fb      	strb	r3, [r7, #15]
 8006bc8:	e010      	b.n	8006bec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa86 	bl	80070e8 <USB_CoreReset>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d10b      	bne.n	8006c0a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f043 0206 	orr.w	r2, r3, #6
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f043 0220 	orr.w	r2, r3, #32
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c16:	b004      	add	sp, #16
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	ffbdffbf 	.word	0xffbdffbf

08006c20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f023 0201 	bic.w	r2, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c5e:	78fb      	ldrb	r3, [r7, #3]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d115      	bne.n	8006c90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c70:	2001      	movs	r0, #1
 8006c72:	f7fb f945 	bl	8001f00 <HAL_Delay>
      ms++;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fa25 	bl	80070cc <USB_GetMode>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d01e      	beq.n	8006cc6 <USB_SetCurrentMode+0x84>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b31      	cmp	r3, #49	; 0x31
 8006c8c:	d9f0      	bls.n	8006c70 <USB_SetCurrentMode+0x2e>
 8006c8e:	e01a      	b.n	8006cc6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d115      	bne.n	8006cc2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f7fb f92c 	bl	8001f00 <HAL_Delay>
      ms++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa0c 	bl	80070cc <USB_GetMode>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <USB_SetCurrentMode+0x84>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b31      	cmp	r3, #49	; 0x31
 8006cbe:	d9f0      	bls.n	8006ca2 <USB_SetCurrentMode+0x60>
 8006cc0:	e001      	b.n	8006cc6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e005      	b.n	8006cd2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b32      	cmp	r3, #50	; 0x32
 8006cca:	d101      	bne.n	8006cd0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e000      	b.n	8006cd2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cdc:	b084      	sub	sp, #16
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b086      	sub	sp, #24
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	613b      	str	r3, [r7, #16]
 8006cfa:	e009      	b.n	8006d10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	3340      	adds	r3, #64	; 0x40
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	2200      	movs	r2, #0
 8006d08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	613b      	str	r3, [r7, #16]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2b0e      	cmp	r3, #14
 8006d14:	d9f2      	bls.n	8006cfc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11c      	bne.n	8006d56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d2a:	f043 0302 	orr.w	r3, r3, #2
 8006d2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e005      	b.n	8006d62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d74:	4619      	mov	r1, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	680b      	ldr	r3, [r1, #0]
 8006d80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d10c      	bne.n	8006da2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d104      	bne.n	8006d98 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d8e:	2100      	movs	r1, #0
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f961 	bl	8007058 <USB_SetDevSpeed>
 8006d96:	e008      	b.n	8006daa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d98:	2101      	movs	r1, #1
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f95c 	bl	8007058 <USB_SetDevSpeed>
 8006da0:	e003      	b.n	8006daa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006da2:	2103      	movs	r1, #3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f957 	bl	8007058 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006daa:	2110      	movs	r1, #16
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f8f3 	bl	8006f98 <USB_FlushTxFifo>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f91d 	bl	8006ffc <USB_FlushRxFifo>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dde:	461a      	mov	r2, r3
 8006de0:	2300      	movs	r3, #0
 8006de2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	461a      	mov	r2, r3
 8006dec:	2300      	movs	r3, #0
 8006dee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006df0:	2300      	movs	r3, #0
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	e043      	b.n	8006e7e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e0c:	d118      	bne.n	8006e40 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e20:	461a      	mov	r2, r3
 8006e22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	e013      	b.n	8006e52 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e36:	461a      	mov	r2, r3
 8006e38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	e008      	b.n	8006e52 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5e:	461a      	mov	r2, r3
 8006e60:	2300      	movs	r3, #0
 8006e62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e70:	461a      	mov	r2, r3
 8006e72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d3b7      	bcc.n	8006df6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	613b      	str	r3, [r7, #16]
 8006e8a:	e043      	b.n	8006f14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ea2:	d118      	bne.n	8006ed6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10a      	bne.n	8006ec0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	e013      	b.n	8006ee8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	e008      	b.n	8006ee8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f06:	461a      	mov	r2, r3
 8006f08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	3301      	adds	r3, #1
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d3b7      	bcc.n	8006e8c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d105      	bne.n	8006f50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	f043 0210 	orr.w	r2, r3, #16
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699a      	ldr	r2, [r3, #24]
 8006f54:	4b0e      	ldr	r3, [pc, #56]	; (8006f90 <USB_DevInit+0x2b4>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d005      	beq.n	8006f6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	f043 0208 	orr.w	r2, r3, #8
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d105      	bne.n	8006f80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699a      	ldr	r2, [r3, #24]
 8006f78:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <USB_DevInit+0x2b8>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f8c:	b004      	add	sp, #16
 8006f8e:	4770      	bx	lr
 8006f90:	803c3800 	.word	0x803c3800
 8006f94:	40000004 	.word	0x40000004

08006f98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	4a12      	ldr	r2, [pc, #72]	; (8006ff8 <USB_FlushTxFifo+0x60>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d901      	bls.n	8006fb6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e01a      	b.n	8006fec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	daf3      	bge.n	8006fa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	019b      	lsls	r3, r3, #6
 8006fc6:	f043 0220 	orr.w	r2, r3, #32
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <USB_FlushTxFifo+0x60>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d901      	bls.n	8006fde <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e006      	b.n	8006fec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d0f1      	beq.n	8006fce <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	00030d40 	.word	0x00030d40

08006ffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3301      	adds	r3, #1
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	4a11      	ldr	r2, [pc, #68]	; (8007054 <USB_FlushRxFifo+0x58>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d901      	bls.n	8007018 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e017      	b.n	8007048 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	daf3      	bge.n	8007008 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2210      	movs	r2, #16
 8007028:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3301      	adds	r3, #1
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	4a08      	ldr	r2, [pc, #32]	; (8007054 <USB_FlushRxFifo+0x58>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d901      	bls.n	800703a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e006      	b.n	8007048 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	2b10      	cmp	r3, #16
 8007044:	d0f1      	beq.n	800702a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	00030d40 	.word	0x00030d40

08007058 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	68f9      	ldr	r1, [r7, #12]
 8007074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007078:	4313      	orrs	r3, r2
 800707a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070a4:	f023 0303 	bic.w	r3, r3, #3
 80070a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070b8:	f043 0302 	orr.w	r3, r3, #2
 80070bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	f003 0301 	and.w	r3, r3, #1
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	4a13      	ldr	r2, [pc, #76]	; (8007148 <USB_CoreReset+0x60>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d901      	bls.n	8007104 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e01a      	b.n	800713a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	daf3      	bge.n	80070f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f043 0201 	orr.w	r2, r3, #1
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3301      	adds	r3, #1
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <USB_CoreReset+0x60>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d901      	bls.n	800712c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e006      	b.n	800713a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b01      	cmp	r3, #1
 8007136:	d0f1      	beq.n	800711c <USB_CoreReset+0x34>

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	00030d40 	.word	0x00030d40

0800714c <__errno>:
 800714c:	4b01      	ldr	r3, [pc, #4]	; (8007154 <__errno+0x8>)
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20000018 	.word	0x20000018

08007158 <__libc_init_array>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	4d0d      	ldr	r5, [pc, #52]	; (8007190 <__libc_init_array+0x38>)
 800715c:	4c0d      	ldr	r4, [pc, #52]	; (8007194 <__libc_init_array+0x3c>)
 800715e:	1b64      	subs	r4, r4, r5
 8007160:	10a4      	asrs	r4, r4, #2
 8007162:	2600      	movs	r6, #0
 8007164:	42a6      	cmp	r6, r4
 8007166:	d109      	bne.n	800717c <__libc_init_array+0x24>
 8007168:	4d0b      	ldr	r5, [pc, #44]	; (8007198 <__libc_init_array+0x40>)
 800716a:	4c0c      	ldr	r4, [pc, #48]	; (800719c <__libc_init_array+0x44>)
 800716c:	f000 fc4e 	bl	8007a0c <_init>
 8007170:	1b64      	subs	r4, r4, r5
 8007172:	10a4      	asrs	r4, r4, #2
 8007174:	2600      	movs	r6, #0
 8007176:	42a6      	cmp	r6, r4
 8007178:	d105      	bne.n	8007186 <__libc_init_array+0x2e>
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007180:	4798      	blx	r3
 8007182:	3601      	adds	r6, #1
 8007184:	e7ee      	b.n	8007164 <__libc_init_array+0xc>
 8007186:	f855 3b04 	ldr.w	r3, [r5], #4
 800718a:	4798      	blx	r3
 800718c:	3601      	adds	r6, #1
 800718e:	e7f2      	b.n	8007176 <__libc_init_array+0x1e>
 8007190:	08008678 	.word	0x08008678
 8007194:	08008678 	.word	0x08008678
 8007198:	08008678 	.word	0x08008678
 800719c:	0800867c 	.word	0x0800867c

080071a0 <memcpy>:
 80071a0:	440a      	add	r2, r1
 80071a2:	4291      	cmp	r1, r2
 80071a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071a8:	d100      	bne.n	80071ac <memcpy+0xc>
 80071aa:	4770      	bx	lr
 80071ac:	b510      	push	{r4, lr}
 80071ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071b6:	4291      	cmp	r1, r2
 80071b8:	d1f9      	bne.n	80071ae <memcpy+0xe>
 80071ba:	bd10      	pop	{r4, pc}

080071bc <memmove>:
 80071bc:	4288      	cmp	r0, r1
 80071be:	b510      	push	{r4, lr}
 80071c0:	eb01 0402 	add.w	r4, r1, r2
 80071c4:	d902      	bls.n	80071cc <memmove+0x10>
 80071c6:	4284      	cmp	r4, r0
 80071c8:	4623      	mov	r3, r4
 80071ca:	d807      	bhi.n	80071dc <memmove+0x20>
 80071cc:	1e43      	subs	r3, r0, #1
 80071ce:	42a1      	cmp	r1, r4
 80071d0:	d008      	beq.n	80071e4 <memmove+0x28>
 80071d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071da:	e7f8      	b.n	80071ce <memmove+0x12>
 80071dc:	4402      	add	r2, r0
 80071de:	4601      	mov	r1, r0
 80071e0:	428a      	cmp	r2, r1
 80071e2:	d100      	bne.n	80071e6 <memmove+0x2a>
 80071e4:	bd10      	pop	{r4, pc}
 80071e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071ee:	e7f7      	b.n	80071e0 <memmove+0x24>

080071f0 <memset>:
 80071f0:	4402      	add	r2, r0
 80071f2:	4603      	mov	r3, r0
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d100      	bne.n	80071fa <memset+0xa>
 80071f8:	4770      	bx	lr
 80071fa:	f803 1b01 	strb.w	r1, [r3], #1
 80071fe:	e7f9      	b.n	80071f4 <memset+0x4>

08007200 <siprintf>:
 8007200:	b40e      	push	{r1, r2, r3}
 8007202:	b500      	push	{lr}
 8007204:	b09c      	sub	sp, #112	; 0x70
 8007206:	ab1d      	add	r3, sp, #116	; 0x74
 8007208:	9002      	str	r0, [sp, #8]
 800720a:	9006      	str	r0, [sp, #24]
 800720c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007210:	4809      	ldr	r0, [pc, #36]	; (8007238 <siprintf+0x38>)
 8007212:	9107      	str	r1, [sp, #28]
 8007214:	9104      	str	r1, [sp, #16]
 8007216:	4909      	ldr	r1, [pc, #36]	; (800723c <siprintf+0x3c>)
 8007218:	f853 2b04 	ldr.w	r2, [r3], #4
 800721c:	9105      	str	r1, [sp, #20]
 800721e:	6800      	ldr	r0, [r0, #0]
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	a902      	add	r1, sp, #8
 8007224:	f000 f868 	bl	80072f8 <_svfiprintf_r>
 8007228:	9b02      	ldr	r3, [sp, #8]
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	b01c      	add	sp, #112	; 0x70
 8007230:	f85d eb04 	ldr.w	lr, [sp], #4
 8007234:	b003      	add	sp, #12
 8007236:	4770      	bx	lr
 8007238:	20000018 	.word	0x20000018
 800723c:	ffff0208 	.word	0xffff0208

08007240 <__ssputs_r>:
 8007240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007244:	688e      	ldr	r6, [r1, #8]
 8007246:	429e      	cmp	r6, r3
 8007248:	4682      	mov	sl, r0
 800724a:	460c      	mov	r4, r1
 800724c:	4690      	mov	r8, r2
 800724e:	461f      	mov	r7, r3
 8007250:	d838      	bhi.n	80072c4 <__ssputs_r+0x84>
 8007252:	898a      	ldrh	r2, [r1, #12]
 8007254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007258:	d032      	beq.n	80072c0 <__ssputs_r+0x80>
 800725a:	6825      	ldr	r5, [r4, #0]
 800725c:	6909      	ldr	r1, [r1, #16]
 800725e:	eba5 0901 	sub.w	r9, r5, r1
 8007262:	6965      	ldr	r5, [r4, #20]
 8007264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800726c:	3301      	adds	r3, #1
 800726e:	444b      	add	r3, r9
 8007270:	106d      	asrs	r5, r5, #1
 8007272:	429d      	cmp	r5, r3
 8007274:	bf38      	it	cc
 8007276:	461d      	movcc	r5, r3
 8007278:	0553      	lsls	r3, r2, #21
 800727a:	d531      	bpl.n	80072e0 <__ssputs_r+0xa0>
 800727c:	4629      	mov	r1, r5
 800727e:	f000 fb1f 	bl	80078c0 <_malloc_r>
 8007282:	4606      	mov	r6, r0
 8007284:	b950      	cbnz	r0, 800729c <__ssputs_r+0x5c>
 8007286:	230c      	movs	r3, #12
 8007288:	f8ca 3000 	str.w	r3, [sl]
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729c:	6921      	ldr	r1, [r4, #16]
 800729e:	464a      	mov	r2, r9
 80072a0:	f7ff ff7e 	bl	80071a0 <memcpy>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	6126      	str	r6, [r4, #16]
 80072b2:	6165      	str	r5, [r4, #20]
 80072b4:	444e      	add	r6, r9
 80072b6:	eba5 0509 	sub.w	r5, r5, r9
 80072ba:	6026      	str	r6, [r4, #0]
 80072bc:	60a5      	str	r5, [r4, #8]
 80072be:	463e      	mov	r6, r7
 80072c0:	42be      	cmp	r6, r7
 80072c2:	d900      	bls.n	80072c6 <__ssputs_r+0x86>
 80072c4:	463e      	mov	r6, r7
 80072c6:	4632      	mov	r2, r6
 80072c8:	6820      	ldr	r0, [r4, #0]
 80072ca:	4641      	mov	r1, r8
 80072cc:	f7ff ff76 	bl	80071bc <memmove>
 80072d0:	68a3      	ldr	r3, [r4, #8]
 80072d2:	6822      	ldr	r2, [r4, #0]
 80072d4:	1b9b      	subs	r3, r3, r6
 80072d6:	4432      	add	r2, r6
 80072d8:	60a3      	str	r3, [r4, #8]
 80072da:	6022      	str	r2, [r4, #0]
 80072dc:	2000      	movs	r0, #0
 80072de:	e7db      	b.n	8007298 <__ssputs_r+0x58>
 80072e0:	462a      	mov	r2, r5
 80072e2:	f000 fb47 	bl	8007974 <_realloc_r>
 80072e6:	4606      	mov	r6, r0
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d1e1      	bne.n	80072b0 <__ssputs_r+0x70>
 80072ec:	6921      	ldr	r1, [r4, #16]
 80072ee:	4650      	mov	r0, sl
 80072f0:	f000 fa96 	bl	8007820 <_free_r>
 80072f4:	e7c7      	b.n	8007286 <__ssputs_r+0x46>
	...

080072f8 <_svfiprintf_r>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	4698      	mov	r8, r3
 80072fe:	898b      	ldrh	r3, [r1, #12]
 8007300:	061b      	lsls	r3, r3, #24
 8007302:	b09d      	sub	sp, #116	; 0x74
 8007304:	4607      	mov	r7, r0
 8007306:	460d      	mov	r5, r1
 8007308:	4614      	mov	r4, r2
 800730a:	d50e      	bpl.n	800732a <_svfiprintf_r+0x32>
 800730c:	690b      	ldr	r3, [r1, #16]
 800730e:	b963      	cbnz	r3, 800732a <_svfiprintf_r+0x32>
 8007310:	2140      	movs	r1, #64	; 0x40
 8007312:	f000 fad5 	bl	80078c0 <_malloc_r>
 8007316:	6028      	str	r0, [r5, #0]
 8007318:	6128      	str	r0, [r5, #16]
 800731a:	b920      	cbnz	r0, 8007326 <_svfiprintf_r+0x2e>
 800731c:	230c      	movs	r3, #12
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	f04f 30ff 	mov.w	r0, #4294967295
 8007324:	e0d1      	b.n	80074ca <_svfiprintf_r+0x1d2>
 8007326:	2340      	movs	r3, #64	; 0x40
 8007328:	616b      	str	r3, [r5, #20]
 800732a:	2300      	movs	r3, #0
 800732c:	9309      	str	r3, [sp, #36]	; 0x24
 800732e:	2320      	movs	r3, #32
 8007330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007334:	f8cd 800c 	str.w	r8, [sp, #12]
 8007338:	2330      	movs	r3, #48	; 0x30
 800733a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074e4 <_svfiprintf_r+0x1ec>
 800733e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007342:	f04f 0901 	mov.w	r9, #1
 8007346:	4623      	mov	r3, r4
 8007348:	469a      	mov	sl, r3
 800734a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800734e:	b10a      	cbz	r2, 8007354 <_svfiprintf_r+0x5c>
 8007350:	2a25      	cmp	r2, #37	; 0x25
 8007352:	d1f9      	bne.n	8007348 <_svfiprintf_r+0x50>
 8007354:	ebba 0b04 	subs.w	fp, sl, r4
 8007358:	d00b      	beq.n	8007372 <_svfiprintf_r+0x7a>
 800735a:	465b      	mov	r3, fp
 800735c:	4622      	mov	r2, r4
 800735e:	4629      	mov	r1, r5
 8007360:	4638      	mov	r0, r7
 8007362:	f7ff ff6d 	bl	8007240 <__ssputs_r>
 8007366:	3001      	adds	r0, #1
 8007368:	f000 80aa 	beq.w	80074c0 <_svfiprintf_r+0x1c8>
 800736c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800736e:	445a      	add	r2, fp
 8007370:	9209      	str	r2, [sp, #36]	; 0x24
 8007372:	f89a 3000 	ldrb.w	r3, [sl]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80a2 	beq.w	80074c0 <_svfiprintf_r+0x1c8>
 800737c:	2300      	movs	r3, #0
 800737e:	f04f 32ff 	mov.w	r2, #4294967295
 8007382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007386:	f10a 0a01 	add.w	sl, sl, #1
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	9307      	str	r3, [sp, #28]
 800738e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007392:	931a      	str	r3, [sp, #104]	; 0x68
 8007394:	4654      	mov	r4, sl
 8007396:	2205      	movs	r2, #5
 8007398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800739c:	4851      	ldr	r0, [pc, #324]	; (80074e4 <_svfiprintf_r+0x1ec>)
 800739e:	f7f8 ff4f 	bl	8000240 <memchr>
 80073a2:	9a04      	ldr	r2, [sp, #16]
 80073a4:	b9d8      	cbnz	r0, 80073de <_svfiprintf_r+0xe6>
 80073a6:	06d0      	lsls	r0, r2, #27
 80073a8:	bf44      	itt	mi
 80073aa:	2320      	movmi	r3, #32
 80073ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073b0:	0711      	lsls	r1, r2, #28
 80073b2:	bf44      	itt	mi
 80073b4:	232b      	movmi	r3, #43	; 0x2b
 80073b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073ba:	f89a 3000 	ldrb.w	r3, [sl]
 80073be:	2b2a      	cmp	r3, #42	; 0x2a
 80073c0:	d015      	beq.n	80073ee <_svfiprintf_r+0xf6>
 80073c2:	9a07      	ldr	r2, [sp, #28]
 80073c4:	4654      	mov	r4, sl
 80073c6:	2000      	movs	r0, #0
 80073c8:	f04f 0c0a 	mov.w	ip, #10
 80073cc:	4621      	mov	r1, r4
 80073ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073d2:	3b30      	subs	r3, #48	; 0x30
 80073d4:	2b09      	cmp	r3, #9
 80073d6:	d94e      	bls.n	8007476 <_svfiprintf_r+0x17e>
 80073d8:	b1b0      	cbz	r0, 8007408 <_svfiprintf_r+0x110>
 80073da:	9207      	str	r2, [sp, #28]
 80073dc:	e014      	b.n	8007408 <_svfiprintf_r+0x110>
 80073de:	eba0 0308 	sub.w	r3, r0, r8
 80073e2:	fa09 f303 	lsl.w	r3, r9, r3
 80073e6:	4313      	orrs	r3, r2
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	46a2      	mov	sl, r4
 80073ec:	e7d2      	b.n	8007394 <_svfiprintf_r+0x9c>
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	1d19      	adds	r1, r3, #4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	9103      	str	r1, [sp, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	bfbb      	ittet	lt
 80073fa:	425b      	neglt	r3, r3
 80073fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007400:	9307      	strge	r3, [sp, #28]
 8007402:	9307      	strlt	r3, [sp, #28]
 8007404:	bfb8      	it	lt
 8007406:	9204      	strlt	r2, [sp, #16]
 8007408:	7823      	ldrb	r3, [r4, #0]
 800740a:	2b2e      	cmp	r3, #46	; 0x2e
 800740c:	d10c      	bne.n	8007428 <_svfiprintf_r+0x130>
 800740e:	7863      	ldrb	r3, [r4, #1]
 8007410:	2b2a      	cmp	r3, #42	; 0x2a
 8007412:	d135      	bne.n	8007480 <_svfiprintf_r+0x188>
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	1d1a      	adds	r2, r3, #4
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	9203      	str	r2, [sp, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	bfb8      	it	lt
 8007420:	f04f 33ff 	movlt.w	r3, #4294967295
 8007424:	3402      	adds	r4, #2
 8007426:	9305      	str	r3, [sp, #20]
 8007428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074f4 <_svfiprintf_r+0x1fc>
 800742c:	7821      	ldrb	r1, [r4, #0]
 800742e:	2203      	movs	r2, #3
 8007430:	4650      	mov	r0, sl
 8007432:	f7f8 ff05 	bl	8000240 <memchr>
 8007436:	b140      	cbz	r0, 800744a <_svfiprintf_r+0x152>
 8007438:	2340      	movs	r3, #64	; 0x40
 800743a:	eba0 000a 	sub.w	r0, r0, sl
 800743e:	fa03 f000 	lsl.w	r0, r3, r0
 8007442:	9b04      	ldr	r3, [sp, #16]
 8007444:	4303      	orrs	r3, r0
 8007446:	3401      	adds	r4, #1
 8007448:	9304      	str	r3, [sp, #16]
 800744a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800744e:	4826      	ldr	r0, [pc, #152]	; (80074e8 <_svfiprintf_r+0x1f0>)
 8007450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007454:	2206      	movs	r2, #6
 8007456:	f7f8 fef3 	bl	8000240 <memchr>
 800745a:	2800      	cmp	r0, #0
 800745c:	d038      	beq.n	80074d0 <_svfiprintf_r+0x1d8>
 800745e:	4b23      	ldr	r3, [pc, #140]	; (80074ec <_svfiprintf_r+0x1f4>)
 8007460:	bb1b      	cbnz	r3, 80074aa <_svfiprintf_r+0x1b2>
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	3307      	adds	r3, #7
 8007466:	f023 0307 	bic.w	r3, r3, #7
 800746a:	3308      	adds	r3, #8
 800746c:	9303      	str	r3, [sp, #12]
 800746e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007470:	4433      	add	r3, r6
 8007472:	9309      	str	r3, [sp, #36]	; 0x24
 8007474:	e767      	b.n	8007346 <_svfiprintf_r+0x4e>
 8007476:	fb0c 3202 	mla	r2, ip, r2, r3
 800747a:	460c      	mov	r4, r1
 800747c:	2001      	movs	r0, #1
 800747e:	e7a5      	b.n	80073cc <_svfiprintf_r+0xd4>
 8007480:	2300      	movs	r3, #0
 8007482:	3401      	adds	r4, #1
 8007484:	9305      	str	r3, [sp, #20]
 8007486:	4619      	mov	r1, r3
 8007488:	f04f 0c0a 	mov.w	ip, #10
 800748c:	4620      	mov	r0, r4
 800748e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007492:	3a30      	subs	r2, #48	; 0x30
 8007494:	2a09      	cmp	r2, #9
 8007496:	d903      	bls.n	80074a0 <_svfiprintf_r+0x1a8>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0c5      	beq.n	8007428 <_svfiprintf_r+0x130>
 800749c:	9105      	str	r1, [sp, #20]
 800749e:	e7c3      	b.n	8007428 <_svfiprintf_r+0x130>
 80074a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80074a4:	4604      	mov	r4, r0
 80074a6:	2301      	movs	r3, #1
 80074a8:	e7f0      	b.n	800748c <_svfiprintf_r+0x194>
 80074aa:	ab03      	add	r3, sp, #12
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	462a      	mov	r2, r5
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <_svfiprintf_r+0x1f8>)
 80074b2:	a904      	add	r1, sp, #16
 80074b4:	4638      	mov	r0, r7
 80074b6:	f3af 8000 	nop.w
 80074ba:	1c42      	adds	r2, r0, #1
 80074bc:	4606      	mov	r6, r0
 80074be:	d1d6      	bne.n	800746e <_svfiprintf_r+0x176>
 80074c0:	89ab      	ldrh	r3, [r5, #12]
 80074c2:	065b      	lsls	r3, r3, #25
 80074c4:	f53f af2c 	bmi.w	8007320 <_svfiprintf_r+0x28>
 80074c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ca:	b01d      	add	sp, #116	; 0x74
 80074cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d0:	ab03      	add	r3, sp, #12
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	462a      	mov	r2, r5
 80074d6:	4b06      	ldr	r3, [pc, #24]	; (80074f0 <_svfiprintf_r+0x1f8>)
 80074d8:	a904      	add	r1, sp, #16
 80074da:	4638      	mov	r0, r7
 80074dc:	f000 f87a 	bl	80075d4 <_printf_i>
 80074e0:	e7eb      	b.n	80074ba <_svfiprintf_r+0x1c2>
 80074e2:	bf00      	nop
 80074e4:	0800863c 	.word	0x0800863c
 80074e8:	08008646 	.word	0x08008646
 80074ec:	00000000 	.word	0x00000000
 80074f0:	08007241 	.word	0x08007241
 80074f4:	08008642 	.word	0x08008642

080074f8 <_printf_common>:
 80074f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	4616      	mov	r6, r2
 80074fe:	4699      	mov	r9, r3
 8007500:	688a      	ldr	r2, [r1, #8]
 8007502:	690b      	ldr	r3, [r1, #16]
 8007504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007508:	4293      	cmp	r3, r2
 800750a:	bfb8      	it	lt
 800750c:	4613      	movlt	r3, r2
 800750e:	6033      	str	r3, [r6, #0]
 8007510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007514:	4607      	mov	r7, r0
 8007516:	460c      	mov	r4, r1
 8007518:	b10a      	cbz	r2, 800751e <_printf_common+0x26>
 800751a:	3301      	adds	r3, #1
 800751c:	6033      	str	r3, [r6, #0]
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	0699      	lsls	r1, r3, #26
 8007522:	bf42      	ittt	mi
 8007524:	6833      	ldrmi	r3, [r6, #0]
 8007526:	3302      	addmi	r3, #2
 8007528:	6033      	strmi	r3, [r6, #0]
 800752a:	6825      	ldr	r5, [r4, #0]
 800752c:	f015 0506 	ands.w	r5, r5, #6
 8007530:	d106      	bne.n	8007540 <_printf_common+0x48>
 8007532:	f104 0a19 	add.w	sl, r4, #25
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	6832      	ldr	r2, [r6, #0]
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	42ab      	cmp	r3, r5
 800753e:	dc26      	bgt.n	800758e <_printf_common+0x96>
 8007540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007544:	1e13      	subs	r3, r2, #0
 8007546:	6822      	ldr	r2, [r4, #0]
 8007548:	bf18      	it	ne
 800754a:	2301      	movne	r3, #1
 800754c:	0692      	lsls	r2, r2, #26
 800754e:	d42b      	bmi.n	80075a8 <_printf_common+0xb0>
 8007550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007554:	4649      	mov	r1, r9
 8007556:	4638      	mov	r0, r7
 8007558:	47c0      	blx	r8
 800755a:	3001      	adds	r0, #1
 800755c:	d01e      	beq.n	800759c <_printf_common+0xa4>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	68e5      	ldr	r5, [r4, #12]
 8007562:	6832      	ldr	r2, [r6, #0]
 8007564:	f003 0306 	and.w	r3, r3, #6
 8007568:	2b04      	cmp	r3, #4
 800756a:	bf08      	it	eq
 800756c:	1aad      	subeq	r5, r5, r2
 800756e:	68a3      	ldr	r3, [r4, #8]
 8007570:	6922      	ldr	r2, [r4, #16]
 8007572:	bf0c      	ite	eq
 8007574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007578:	2500      	movne	r5, #0
 800757a:	4293      	cmp	r3, r2
 800757c:	bfc4      	itt	gt
 800757e:	1a9b      	subgt	r3, r3, r2
 8007580:	18ed      	addgt	r5, r5, r3
 8007582:	2600      	movs	r6, #0
 8007584:	341a      	adds	r4, #26
 8007586:	42b5      	cmp	r5, r6
 8007588:	d11a      	bne.n	80075c0 <_printf_common+0xc8>
 800758a:	2000      	movs	r0, #0
 800758c:	e008      	b.n	80075a0 <_printf_common+0xa8>
 800758e:	2301      	movs	r3, #1
 8007590:	4652      	mov	r2, sl
 8007592:	4649      	mov	r1, r9
 8007594:	4638      	mov	r0, r7
 8007596:	47c0      	blx	r8
 8007598:	3001      	adds	r0, #1
 800759a:	d103      	bne.n	80075a4 <_printf_common+0xac>
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a4:	3501      	adds	r5, #1
 80075a6:	e7c6      	b.n	8007536 <_printf_common+0x3e>
 80075a8:	18e1      	adds	r1, r4, r3
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	2030      	movs	r0, #48	; 0x30
 80075ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075b2:	4422      	add	r2, r4
 80075b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075bc:	3302      	adds	r3, #2
 80075be:	e7c7      	b.n	8007550 <_printf_common+0x58>
 80075c0:	2301      	movs	r3, #1
 80075c2:	4622      	mov	r2, r4
 80075c4:	4649      	mov	r1, r9
 80075c6:	4638      	mov	r0, r7
 80075c8:	47c0      	blx	r8
 80075ca:	3001      	adds	r0, #1
 80075cc:	d0e6      	beq.n	800759c <_printf_common+0xa4>
 80075ce:	3601      	adds	r6, #1
 80075d0:	e7d9      	b.n	8007586 <_printf_common+0x8e>
	...

080075d4 <_printf_i>:
 80075d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	460c      	mov	r4, r1
 80075da:	4691      	mov	r9, r2
 80075dc:	7e27      	ldrb	r7, [r4, #24]
 80075de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075e0:	2f78      	cmp	r7, #120	; 0x78
 80075e2:	4680      	mov	r8, r0
 80075e4:	469a      	mov	sl, r3
 80075e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075ea:	d807      	bhi.n	80075fc <_printf_i+0x28>
 80075ec:	2f62      	cmp	r7, #98	; 0x62
 80075ee:	d80a      	bhi.n	8007606 <_printf_i+0x32>
 80075f0:	2f00      	cmp	r7, #0
 80075f2:	f000 80d8 	beq.w	80077a6 <_printf_i+0x1d2>
 80075f6:	2f58      	cmp	r7, #88	; 0x58
 80075f8:	f000 80a3 	beq.w	8007742 <_printf_i+0x16e>
 80075fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007604:	e03a      	b.n	800767c <_printf_i+0xa8>
 8007606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800760a:	2b15      	cmp	r3, #21
 800760c:	d8f6      	bhi.n	80075fc <_printf_i+0x28>
 800760e:	a001      	add	r0, pc, #4	; (adr r0, 8007614 <_printf_i+0x40>)
 8007610:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007614:	0800766d 	.word	0x0800766d
 8007618:	08007681 	.word	0x08007681
 800761c:	080075fd 	.word	0x080075fd
 8007620:	080075fd 	.word	0x080075fd
 8007624:	080075fd 	.word	0x080075fd
 8007628:	080075fd 	.word	0x080075fd
 800762c:	08007681 	.word	0x08007681
 8007630:	080075fd 	.word	0x080075fd
 8007634:	080075fd 	.word	0x080075fd
 8007638:	080075fd 	.word	0x080075fd
 800763c:	080075fd 	.word	0x080075fd
 8007640:	0800778d 	.word	0x0800778d
 8007644:	080076b1 	.word	0x080076b1
 8007648:	0800776f 	.word	0x0800776f
 800764c:	080075fd 	.word	0x080075fd
 8007650:	080075fd 	.word	0x080075fd
 8007654:	080077af 	.word	0x080077af
 8007658:	080075fd 	.word	0x080075fd
 800765c:	080076b1 	.word	0x080076b1
 8007660:	080075fd 	.word	0x080075fd
 8007664:	080075fd 	.word	0x080075fd
 8007668:	08007777 	.word	0x08007777
 800766c:	680b      	ldr	r3, [r1, #0]
 800766e:	1d1a      	adds	r2, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	600a      	str	r2, [r1, #0]
 8007674:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800767c:	2301      	movs	r3, #1
 800767e:	e0a3      	b.n	80077c8 <_printf_i+0x1f4>
 8007680:	6825      	ldr	r5, [r4, #0]
 8007682:	6808      	ldr	r0, [r1, #0]
 8007684:	062e      	lsls	r6, r5, #24
 8007686:	f100 0304 	add.w	r3, r0, #4
 800768a:	d50a      	bpl.n	80076a2 <_printf_i+0xce>
 800768c:	6805      	ldr	r5, [r0, #0]
 800768e:	600b      	str	r3, [r1, #0]
 8007690:	2d00      	cmp	r5, #0
 8007692:	da03      	bge.n	800769c <_printf_i+0xc8>
 8007694:	232d      	movs	r3, #45	; 0x2d
 8007696:	426d      	negs	r5, r5
 8007698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800769c:	485e      	ldr	r0, [pc, #376]	; (8007818 <_printf_i+0x244>)
 800769e:	230a      	movs	r3, #10
 80076a0:	e019      	b.n	80076d6 <_printf_i+0x102>
 80076a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076a6:	6805      	ldr	r5, [r0, #0]
 80076a8:	600b      	str	r3, [r1, #0]
 80076aa:	bf18      	it	ne
 80076ac:	b22d      	sxthne	r5, r5
 80076ae:	e7ef      	b.n	8007690 <_printf_i+0xbc>
 80076b0:	680b      	ldr	r3, [r1, #0]
 80076b2:	6825      	ldr	r5, [r4, #0]
 80076b4:	1d18      	adds	r0, r3, #4
 80076b6:	6008      	str	r0, [r1, #0]
 80076b8:	0628      	lsls	r0, r5, #24
 80076ba:	d501      	bpl.n	80076c0 <_printf_i+0xec>
 80076bc:	681d      	ldr	r5, [r3, #0]
 80076be:	e002      	b.n	80076c6 <_printf_i+0xf2>
 80076c0:	0669      	lsls	r1, r5, #25
 80076c2:	d5fb      	bpl.n	80076bc <_printf_i+0xe8>
 80076c4:	881d      	ldrh	r5, [r3, #0]
 80076c6:	4854      	ldr	r0, [pc, #336]	; (8007818 <_printf_i+0x244>)
 80076c8:	2f6f      	cmp	r7, #111	; 0x6f
 80076ca:	bf0c      	ite	eq
 80076cc:	2308      	moveq	r3, #8
 80076ce:	230a      	movne	r3, #10
 80076d0:	2100      	movs	r1, #0
 80076d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076d6:	6866      	ldr	r6, [r4, #4]
 80076d8:	60a6      	str	r6, [r4, #8]
 80076da:	2e00      	cmp	r6, #0
 80076dc:	bfa2      	ittt	ge
 80076de:	6821      	ldrge	r1, [r4, #0]
 80076e0:	f021 0104 	bicge.w	r1, r1, #4
 80076e4:	6021      	strge	r1, [r4, #0]
 80076e6:	b90d      	cbnz	r5, 80076ec <_printf_i+0x118>
 80076e8:	2e00      	cmp	r6, #0
 80076ea:	d04d      	beq.n	8007788 <_printf_i+0x1b4>
 80076ec:	4616      	mov	r6, r2
 80076ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80076f2:	fb03 5711 	mls	r7, r3, r1, r5
 80076f6:	5dc7      	ldrb	r7, [r0, r7]
 80076f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076fc:	462f      	mov	r7, r5
 80076fe:	42bb      	cmp	r3, r7
 8007700:	460d      	mov	r5, r1
 8007702:	d9f4      	bls.n	80076ee <_printf_i+0x11a>
 8007704:	2b08      	cmp	r3, #8
 8007706:	d10b      	bne.n	8007720 <_printf_i+0x14c>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	07df      	lsls	r7, r3, #31
 800770c:	d508      	bpl.n	8007720 <_printf_i+0x14c>
 800770e:	6923      	ldr	r3, [r4, #16]
 8007710:	6861      	ldr	r1, [r4, #4]
 8007712:	4299      	cmp	r1, r3
 8007714:	bfde      	ittt	le
 8007716:	2330      	movle	r3, #48	; 0x30
 8007718:	f806 3c01 	strble.w	r3, [r6, #-1]
 800771c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007720:	1b92      	subs	r2, r2, r6
 8007722:	6122      	str	r2, [r4, #16]
 8007724:	f8cd a000 	str.w	sl, [sp]
 8007728:	464b      	mov	r3, r9
 800772a:	aa03      	add	r2, sp, #12
 800772c:	4621      	mov	r1, r4
 800772e:	4640      	mov	r0, r8
 8007730:	f7ff fee2 	bl	80074f8 <_printf_common>
 8007734:	3001      	adds	r0, #1
 8007736:	d14c      	bne.n	80077d2 <_printf_i+0x1fe>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	b004      	add	sp, #16
 800773e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007742:	4835      	ldr	r0, [pc, #212]	; (8007818 <_printf_i+0x244>)
 8007744:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	680e      	ldr	r6, [r1, #0]
 800774c:	061f      	lsls	r7, r3, #24
 800774e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007752:	600e      	str	r6, [r1, #0]
 8007754:	d514      	bpl.n	8007780 <_printf_i+0x1ac>
 8007756:	07d9      	lsls	r1, r3, #31
 8007758:	bf44      	itt	mi
 800775a:	f043 0320 	orrmi.w	r3, r3, #32
 800775e:	6023      	strmi	r3, [r4, #0]
 8007760:	b91d      	cbnz	r5, 800776a <_printf_i+0x196>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f023 0320 	bic.w	r3, r3, #32
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	2310      	movs	r3, #16
 800776c:	e7b0      	b.n	80076d0 <_printf_i+0xfc>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	f043 0320 	orr.w	r3, r3, #32
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	2378      	movs	r3, #120	; 0x78
 8007778:	4828      	ldr	r0, [pc, #160]	; (800781c <_printf_i+0x248>)
 800777a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800777e:	e7e3      	b.n	8007748 <_printf_i+0x174>
 8007780:	065e      	lsls	r6, r3, #25
 8007782:	bf48      	it	mi
 8007784:	b2ad      	uxthmi	r5, r5
 8007786:	e7e6      	b.n	8007756 <_printf_i+0x182>
 8007788:	4616      	mov	r6, r2
 800778a:	e7bb      	b.n	8007704 <_printf_i+0x130>
 800778c:	680b      	ldr	r3, [r1, #0]
 800778e:	6826      	ldr	r6, [r4, #0]
 8007790:	6960      	ldr	r0, [r4, #20]
 8007792:	1d1d      	adds	r5, r3, #4
 8007794:	600d      	str	r5, [r1, #0]
 8007796:	0635      	lsls	r5, r6, #24
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	d501      	bpl.n	80077a0 <_printf_i+0x1cc>
 800779c:	6018      	str	r0, [r3, #0]
 800779e:	e002      	b.n	80077a6 <_printf_i+0x1d2>
 80077a0:	0671      	lsls	r1, r6, #25
 80077a2:	d5fb      	bpl.n	800779c <_printf_i+0x1c8>
 80077a4:	8018      	strh	r0, [r3, #0]
 80077a6:	2300      	movs	r3, #0
 80077a8:	6123      	str	r3, [r4, #16]
 80077aa:	4616      	mov	r6, r2
 80077ac:	e7ba      	b.n	8007724 <_printf_i+0x150>
 80077ae:	680b      	ldr	r3, [r1, #0]
 80077b0:	1d1a      	adds	r2, r3, #4
 80077b2:	600a      	str	r2, [r1, #0]
 80077b4:	681e      	ldr	r6, [r3, #0]
 80077b6:	6862      	ldr	r2, [r4, #4]
 80077b8:	2100      	movs	r1, #0
 80077ba:	4630      	mov	r0, r6
 80077bc:	f7f8 fd40 	bl	8000240 <memchr>
 80077c0:	b108      	cbz	r0, 80077c6 <_printf_i+0x1f2>
 80077c2:	1b80      	subs	r0, r0, r6
 80077c4:	6060      	str	r0, [r4, #4]
 80077c6:	6863      	ldr	r3, [r4, #4]
 80077c8:	6123      	str	r3, [r4, #16]
 80077ca:	2300      	movs	r3, #0
 80077cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d0:	e7a8      	b.n	8007724 <_printf_i+0x150>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	4632      	mov	r2, r6
 80077d6:	4649      	mov	r1, r9
 80077d8:	4640      	mov	r0, r8
 80077da:	47d0      	blx	sl
 80077dc:	3001      	adds	r0, #1
 80077de:	d0ab      	beq.n	8007738 <_printf_i+0x164>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	079b      	lsls	r3, r3, #30
 80077e4:	d413      	bmi.n	800780e <_printf_i+0x23a>
 80077e6:	68e0      	ldr	r0, [r4, #12]
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	4298      	cmp	r0, r3
 80077ec:	bfb8      	it	lt
 80077ee:	4618      	movlt	r0, r3
 80077f0:	e7a4      	b.n	800773c <_printf_i+0x168>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4632      	mov	r2, r6
 80077f6:	4649      	mov	r1, r9
 80077f8:	4640      	mov	r0, r8
 80077fa:	47d0      	blx	sl
 80077fc:	3001      	adds	r0, #1
 80077fe:	d09b      	beq.n	8007738 <_printf_i+0x164>
 8007800:	3501      	adds	r5, #1
 8007802:	68e3      	ldr	r3, [r4, #12]
 8007804:	9903      	ldr	r1, [sp, #12]
 8007806:	1a5b      	subs	r3, r3, r1
 8007808:	42ab      	cmp	r3, r5
 800780a:	dcf2      	bgt.n	80077f2 <_printf_i+0x21e>
 800780c:	e7eb      	b.n	80077e6 <_printf_i+0x212>
 800780e:	2500      	movs	r5, #0
 8007810:	f104 0619 	add.w	r6, r4, #25
 8007814:	e7f5      	b.n	8007802 <_printf_i+0x22e>
 8007816:	bf00      	nop
 8007818:	0800864d 	.word	0x0800864d
 800781c:	0800865e 	.word	0x0800865e

08007820 <_free_r>:
 8007820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007822:	2900      	cmp	r1, #0
 8007824:	d048      	beq.n	80078b8 <_free_r+0x98>
 8007826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782a:	9001      	str	r0, [sp, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f1a1 0404 	sub.w	r4, r1, #4
 8007832:	bfb8      	it	lt
 8007834:	18e4      	addlt	r4, r4, r3
 8007836:	f000 f8d3 	bl	80079e0 <__malloc_lock>
 800783a:	4a20      	ldr	r2, [pc, #128]	; (80078bc <_free_r+0x9c>)
 800783c:	9801      	ldr	r0, [sp, #4]
 800783e:	6813      	ldr	r3, [r2, #0]
 8007840:	4615      	mov	r5, r2
 8007842:	b933      	cbnz	r3, 8007852 <_free_r+0x32>
 8007844:	6063      	str	r3, [r4, #4]
 8007846:	6014      	str	r4, [r2, #0]
 8007848:	b003      	add	sp, #12
 800784a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800784e:	f000 b8cd 	b.w	80079ec <__malloc_unlock>
 8007852:	42a3      	cmp	r3, r4
 8007854:	d90b      	bls.n	800786e <_free_r+0x4e>
 8007856:	6821      	ldr	r1, [r4, #0]
 8007858:	1862      	adds	r2, r4, r1
 800785a:	4293      	cmp	r3, r2
 800785c:	bf04      	itt	eq
 800785e:	681a      	ldreq	r2, [r3, #0]
 8007860:	685b      	ldreq	r3, [r3, #4]
 8007862:	6063      	str	r3, [r4, #4]
 8007864:	bf04      	itt	eq
 8007866:	1852      	addeq	r2, r2, r1
 8007868:	6022      	streq	r2, [r4, #0]
 800786a:	602c      	str	r4, [r5, #0]
 800786c:	e7ec      	b.n	8007848 <_free_r+0x28>
 800786e:	461a      	mov	r2, r3
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	b10b      	cbz	r3, 8007878 <_free_r+0x58>
 8007874:	42a3      	cmp	r3, r4
 8007876:	d9fa      	bls.n	800786e <_free_r+0x4e>
 8007878:	6811      	ldr	r1, [r2, #0]
 800787a:	1855      	adds	r5, r2, r1
 800787c:	42a5      	cmp	r5, r4
 800787e:	d10b      	bne.n	8007898 <_free_r+0x78>
 8007880:	6824      	ldr	r4, [r4, #0]
 8007882:	4421      	add	r1, r4
 8007884:	1854      	adds	r4, r2, r1
 8007886:	42a3      	cmp	r3, r4
 8007888:	6011      	str	r1, [r2, #0]
 800788a:	d1dd      	bne.n	8007848 <_free_r+0x28>
 800788c:	681c      	ldr	r4, [r3, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	6053      	str	r3, [r2, #4]
 8007892:	4421      	add	r1, r4
 8007894:	6011      	str	r1, [r2, #0]
 8007896:	e7d7      	b.n	8007848 <_free_r+0x28>
 8007898:	d902      	bls.n	80078a0 <_free_r+0x80>
 800789a:	230c      	movs	r3, #12
 800789c:	6003      	str	r3, [r0, #0]
 800789e:	e7d3      	b.n	8007848 <_free_r+0x28>
 80078a0:	6825      	ldr	r5, [r4, #0]
 80078a2:	1961      	adds	r1, r4, r5
 80078a4:	428b      	cmp	r3, r1
 80078a6:	bf04      	itt	eq
 80078a8:	6819      	ldreq	r1, [r3, #0]
 80078aa:	685b      	ldreq	r3, [r3, #4]
 80078ac:	6063      	str	r3, [r4, #4]
 80078ae:	bf04      	itt	eq
 80078b0:	1949      	addeq	r1, r1, r5
 80078b2:	6021      	streq	r1, [r4, #0]
 80078b4:	6054      	str	r4, [r2, #4]
 80078b6:	e7c7      	b.n	8007848 <_free_r+0x28>
 80078b8:	b003      	add	sp, #12
 80078ba:	bd30      	pop	{r4, r5, pc}
 80078bc:	200004b0 	.word	0x200004b0

080078c0 <_malloc_r>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	1ccd      	adds	r5, r1, #3
 80078c4:	f025 0503 	bic.w	r5, r5, #3
 80078c8:	3508      	adds	r5, #8
 80078ca:	2d0c      	cmp	r5, #12
 80078cc:	bf38      	it	cc
 80078ce:	250c      	movcc	r5, #12
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	4606      	mov	r6, r0
 80078d4:	db01      	blt.n	80078da <_malloc_r+0x1a>
 80078d6:	42a9      	cmp	r1, r5
 80078d8:	d903      	bls.n	80078e2 <_malloc_r+0x22>
 80078da:	230c      	movs	r3, #12
 80078dc:	6033      	str	r3, [r6, #0]
 80078de:	2000      	movs	r0, #0
 80078e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e2:	f000 f87d 	bl	80079e0 <__malloc_lock>
 80078e6:	4921      	ldr	r1, [pc, #132]	; (800796c <_malloc_r+0xac>)
 80078e8:	680a      	ldr	r2, [r1, #0]
 80078ea:	4614      	mov	r4, r2
 80078ec:	b99c      	cbnz	r4, 8007916 <_malloc_r+0x56>
 80078ee:	4f20      	ldr	r7, [pc, #128]	; (8007970 <_malloc_r+0xb0>)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	b923      	cbnz	r3, 80078fe <_malloc_r+0x3e>
 80078f4:	4621      	mov	r1, r4
 80078f6:	4630      	mov	r0, r6
 80078f8:	f000 f862 	bl	80079c0 <_sbrk_r>
 80078fc:	6038      	str	r0, [r7, #0]
 80078fe:	4629      	mov	r1, r5
 8007900:	4630      	mov	r0, r6
 8007902:	f000 f85d 	bl	80079c0 <_sbrk_r>
 8007906:	1c43      	adds	r3, r0, #1
 8007908:	d123      	bne.n	8007952 <_malloc_r+0x92>
 800790a:	230c      	movs	r3, #12
 800790c:	6033      	str	r3, [r6, #0]
 800790e:	4630      	mov	r0, r6
 8007910:	f000 f86c 	bl	80079ec <__malloc_unlock>
 8007914:	e7e3      	b.n	80078de <_malloc_r+0x1e>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	1b5b      	subs	r3, r3, r5
 800791a:	d417      	bmi.n	800794c <_malloc_r+0x8c>
 800791c:	2b0b      	cmp	r3, #11
 800791e:	d903      	bls.n	8007928 <_malloc_r+0x68>
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	441c      	add	r4, r3
 8007924:	6025      	str	r5, [r4, #0]
 8007926:	e004      	b.n	8007932 <_malloc_r+0x72>
 8007928:	6863      	ldr	r3, [r4, #4]
 800792a:	42a2      	cmp	r2, r4
 800792c:	bf0c      	ite	eq
 800792e:	600b      	streq	r3, [r1, #0]
 8007930:	6053      	strne	r3, [r2, #4]
 8007932:	4630      	mov	r0, r6
 8007934:	f000 f85a 	bl	80079ec <__malloc_unlock>
 8007938:	f104 000b 	add.w	r0, r4, #11
 800793c:	1d23      	adds	r3, r4, #4
 800793e:	f020 0007 	bic.w	r0, r0, #7
 8007942:	1ac2      	subs	r2, r0, r3
 8007944:	d0cc      	beq.n	80078e0 <_malloc_r+0x20>
 8007946:	1a1b      	subs	r3, r3, r0
 8007948:	50a3      	str	r3, [r4, r2]
 800794a:	e7c9      	b.n	80078e0 <_malloc_r+0x20>
 800794c:	4622      	mov	r2, r4
 800794e:	6864      	ldr	r4, [r4, #4]
 8007950:	e7cc      	b.n	80078ec <_malloc_r+0x2c>
 8007952:	1cc4      	adds	r4, r0, #3
 8007954:	f024 0403 	bic.w	r4, r4, #3
 8007958:	42a0      	cmp	r0, r4
 800795a:	d0e3      	beq.n	8007924 <_malloc_r+0x64>
 800795c:	1a21      	subs	r1, r4, r0
 800795e:	4630      	mov	r0, r6
 8007960:	f000 f82e 	bl	80079c0 <_sbrk_r>
 8007964:	3001      	adds	r0, #1
 8007966:	d1dd      	bne.n	8007924 <_malloc_r+0x64>
 8007968:	e7cf      	b.n	800790a <_malloc_r+0x4a>
 800796a:	bf00      	nop
 800796c:	200004b0 	.word	0x200004b0
 8007970:	200004b4 	.word	0x200004b4

08007974 <_realloc_r>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	4607      	mov	r7, r0
 8007978:	4614      	mov	r4, r2
 800797a:	460e      	mov	r6, r1
 800797c:	b921      	cbnz	r1, 8007988 <_realloc_r+0x14>
 800797e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007982:	4611      	mov	r1, r2
 8007984:	f7ff bf9c 	b.w	80078c0 <_malloc_r>
 8007988:	b922      	cbnz	r2, 8007994 <_realloc_r+0x20>
 800798a:	f7ff ff49 	bl	8007820 <_free_r>
 800798e:	4625      	mov	r5, r4
 8007990:	4628      	mov	r0, r5
 8007992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007994:	f000 f830 	bl	80079f8 <_malloc_usable_size_r>
 8007998:	42a0      	cmp	r0, r4
 800799a:	d20f      	bcs.n	80079bc <_realloc_r+0x48>
 800799c:	4621      	mov	r1, r4
 800799e:	4638      	mov	r0, r7
 80079a0:	f7ff ff8e 	bl	80078c0 <_malloc_r>
 80079a4:	4605      	mov	r5, r0
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d0f2      	beq.n	8007990 <_realloc_r+0x1c>
 80079aa:	4631      	mov	r1, r6
 80079ac:	4622      	mov	r2, r4
 80079ae:	f7ff fbf7 	bl	80071a0 <memcpy>
 80079b2:	4631      	mov	r1, r6
 80079b4:	4638      	mov	r0, r7
 80079b6:	f7ff ff33 	bl	8007820 <_free_r>
 80079ba:	e7e9      	b.n	8007990 <_realloc_r+0x1c>
 80079bc:	4635      	mov	r5, r6
 80079be:	e7e7      	b.n	8007990 <_realloc_r+0x1c>

080079c0 <_sbrk_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d06      	ldr	r5, [pc, #24]	; (80079dc <_sbrk_r+0x1c>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	602b      	str	r3, [r5, #0]
 80079cc:	f7f9 ff46 	bl	800185c <_sbrk>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_sbrk_r+0x1a>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_sbrk_r+0x1a>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	20000ac4 	.word	0x20000ac4

080079e0 <__malloc_lock>:
 80079e0:	4801      	ldr	r0, [pc, #4]	; (80079e8 <__malloc_lock+0x8>)
 80079e2:	f000 b811 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 80079e6:	bf00      	nop
 80079e8:	20000acc 	.word	0x20000acc

080079ec <__malloc_unlock>:
 80079ec:	4801      	ldr	r0, [pc, #4]	; (80079f4 <__malloc_unlock+0x8>)
 80079ee:	f000 b80c 	b.w	8007a0a <__retarget_lock_release_recursive>
 80079f2:	bf00      	nop
 80079f4:	20000acc 	.word	0x20000acc

080079f8 <_malloc_usable_size_r>:
 80079f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079fc:	1f18      	subs	r0, r3, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	bfbc      	itt	lt
 8007a02:	580b      	ldrlt	r3, [r1, r0]
 8007a04:	18c0      	addlt	r0, r0, r3
 8007a06:	4770      	bx	lr

08007a08 <__retarget_lock_acquire_recursive>:
 8007a08:	4770      	bx	lr

08007a0a <__retarget_lock_release_recursive>:
 8007a0a:	4770      	bx	lr

08007a0c <_init>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	bf00      	nop
 8007a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a12:	bc08      	pop	{r3}
 8007a14:	469e      	mov	lr, r3
 8007a16:	4770      	bx	lr

08007a18 <_fini>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	bf00      	nop
 8007a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1e:	bc08      	pop	{r3}
 8007a20:	469e      	mov	lr, r3
 8007a22:	4770      	bx	lr
