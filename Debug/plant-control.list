
plant-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a88  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c98  08004c98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca0  08004ca0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  2000000c  08004cb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08004cb4  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018aa9  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c7  00000000  00000000  00038ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003bdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003d088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297fa  00000000  00000000  0003e1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187d2  00000000  00000000  000679f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffb80  00000000  00000000  000801c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017fd44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e34  00000000  00000000  0017fd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004c68 	.word	0x08004c68

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004c68 	.word	0x08004c68

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <lerp>:
#include "WS9527.h"

uint16_t WS9527_Reading_ADC;
uint16_t WS9527_Reading;

float lerp(uint16_t v0, uint32_t v1, float t) {
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	ed87 0a01 	vstr	s0, [r7, #4]
 800053e:	81fb      	strh	r3, [r7, #14]
  return (1 - t) * v0 + t * v1;
 8000540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000544:	edd7 7a01 	vldr	s15, [r7, #4]
 8000548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800054c:	89fb      	ldrh	r3, [r7, #14]
 800054e:	ee07 3a90 	vmov	s15, r3
 8000552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	ee07 3a90 	vmov	s15, r3
 8000560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000564:	edd7 7a01 	vldr	s15, [r7, #4]
 8000568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800056c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000570:	eeb0 0a67 	vmov.f32	s0, s15
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <WS9527_Initialize>:

void WS9527_Initialize() {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <WS9527_Initialize+0x10>)
 8000586:	f000 fd71 	bl	800106c <HAL_ADC_Start_IT>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000002c 	.word	0x2000002c

08000594 <WS9527_StartReadings>:

void WS9527_StartReadings() {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <WS9527_StartReadings+0x10>)
 800059a:	f000 fd67 	bl	800106c <HAL_ADC_Start_IT>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000002c 	.word	0x2000002c

080005a8 <WS9527_GetReadings>:

void WS9527_GetReadings(ADC_HandleTypeDef* hadc) {
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	/* first we lerp everything out and then scale the result by 18  *
	 * that's because maximally moist soil gives the reading of 1800 *
	 * so 1% is the reading divided by 18                            */
	if (hadc->Instance == ADC1) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a12      	ldr	r2, [pc, #72]	; (8000600 <WS9527_GetReadings+0x58>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d11d      	bne.n	80005f6 <WS9527_GetReadings+0x4e>
		WS9527_Reading_ADC = (int)lerp(WS9527_Reading_ADC, HAL_ADC_GetValue(&hadc1), 0.001);
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <WS9527_GetReadings+0x5c>)
 80005bc:	881c      	ldrh	r4, [r3, #0]
 80005be:	4812      	ldr	r0, [pc, #72]	; (8000608 <WS9527_GetReadings+0x60>)
 80005c0:	f000 ff3c 	bl	800143c <HAL_ADC_GetValue>
 80005c4:	4603      	mov	r3, r0
 80005c6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800060c <WS9527_GetReadings+0x64>
 80005ca:	4619      	mov	r1, r3
 80005cc:	4620      	mov	r0, r4
 80005ce:	f7ff ffaf 	bl	8000530 <lerp>
 80005d2:	eef0 7a40 	vmov.f32	s15, s0
 80005d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005da:	ee17 3a90 	vmov	r3, s15
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <WS9527_GetReadings+0x5c>)
 80005e2:	801a      	strh	r2, [r3, #0]
//		WS9527_Reading_ADC = (int)((1 - 0.001) * WS9527_Reading_ADC + 0.001 * HAL_ADC_GetValue(&hadc1));
		WS9527_Reading = WS9527_Reading_ADC / 18;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <WS9527_GetReadings+0x5c>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	4a09      	ldr	r2, [pc, #36]	; (8000610 <WS9527_GetReadings+0x68>)
 80005ea:	fba2 2303 	umull	r2, r3, r2, r3
 80005ee:	089b      	lsrs	r3, r3, #2
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <WS9527_GetReadings+0x6c>)
 80005f4:	801a      	strh	r2, [r3, #0]
	}
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}
 80005fe:	bf00      	nop
 8000600:	40012000 	.word	0x40012000
 8000604:	20000028 	.word	0x20000028
 8000608:	2000002c 	.word	0x2000002c
 800060c:	3a83126f 	.word	0x3a83126f
 8000610:	38e38e39 	.word	0x38e38e39
 8000614:	2000002a 	.word	0x2000002a

08000618 <MX_ADC1_Init>:
/* USER CODE END 0 */

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_ADC1_Init+0x98>)
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <MX_ADC1_Init+0x9c>)
 800062e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000636:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000640:	2201      	movs	r2, #1
 8000642:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000646:	2201      	movs	r2, #1
 8000648:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_ADC1_Init+0x98>)
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_ADC1_Init+0xa0>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000666:	2201      	movs	r2, #1
 8000668:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000674:	2201      	movs	r2, #1
 8000676:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_ADC1_Init+0x98>)
 800067a:	f000 fcb3 	bl	8000fe4 <HAL_ADC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000684:	f000 fa18 	bl	8000ab8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800068c:	2301      	movs	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000694:	463b      	mov	r3, r7
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_ADC1_Init+0x98>)
 800069a:	f000 fef1 	bl	8001480 <HAL_ADC_ConfigChannel>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x90>
		Error_Handler();
 80006a4:	f000 fa08 	bl	8000ab8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000002c 	.word	0x2000002c
 80006b4:	40012000 	.word	0x40012000
 80006b8:	0f000001 	.word	0x0f000001

080006bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
	if (adcHandle->Instance == ADC1) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a19      	ldr	r2, [pc, #100]	; (8000740 <HAL_ADC_MspInit+0x84>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d12b      	bne.n	8000736 <HAL_ADC_MspInit+0x7a>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_ADC_MspInit+0x88>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <HAL_ADC_MspInit+0x88>)
 80006e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_ADC_MspInit+0x88>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <HAL_ADC_MspInit+0x88>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <HAL_ADC_MspInit+0x88>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_ADC_MspInit+0x88>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA0/WKUP     ------> ADC1_IN0
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <HAL_ADC_MspInit+0x8c>)
 8000722:	f001 fa19 	bl	8001b58 <HAL_GPIO_Init>

		/* ADC1 interrupt Init */
		HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2012      	movs	r0, #18
 800072c:	f001 f9dd 	bl	8001aea <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000730:	2012      	movs	r0, #18
 8000732:	f001 f9f6 	bl	8001b22 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40012000 	.word	0x40012000
 8000744:	40023800 	.word	0x40023800
 8000748:	40020000 	.word	0x40020000

0800074c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b68      	ldr	r3, [pc, #416]	; (8000904 <MX_GPIO_Init+0x1b8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a67      	ldr	r2, [pc, #412]	; (8000904 <MX_GPIO_Init+0x1b8>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b65      	ldr	r3, [pc, #404]	; (8000904 <MX_GPIO_Init+0x1b8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	4b62      	ldr	r3, [pc, #392]	; (8000904 <MX_GPIO_Init+0x1b8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a61      	ldr	r2, [pc, #388]	; (8000904 <MX_GPIO_Init+0x1b8>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b5f      	ldr	r3, [pc, #380]	; (8000904 <MX_GPIO_Init+0x1b8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b5c      	ldr	r3, [pc, #368]	; (8000904 <MX_GPIO_Init+0x1b8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a5b      	ldr	r2, [pc, #364]	; (8000904 <MX_GPIO_Init+0x1b8>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b59      	ldr	r3, [pc, #356]	; (8000904 <MX_GPIO_Init+0x1b8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b56      	ldr	r3, [pc, #344]	; (8000904 <MX_GPIO_Init+0x1b8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a55      	ldr	r2, [pc, #340]	; (8000904 <MX_GPIO_Init+0x1b8>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b53      	ldr	r3, [pc, #332]	; (8000904 <MX_GPIO_Init+0x1b8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	4b50      	ldr	r3, [pc, #320]	; (8000904 <MX_GPIO_Init+0x1b8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a4f      	ldr	r2, [pc, #316]	; (8000904 <MX_GPIO_Init+0x1b8>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b4d      	ldr	r3, [pc, #308]	; (8000904 <MX_GPIO_Init+0x1b8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007da:	4b4a      	ldr	r3, [pc, #296]	; (8000904 <MX_GPIO_Init+0x1b8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a49      	ldr	r2, [pc, #292]	; (8000904 <MX_GPIO_Init+0x1b8>)
 80007e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b47      	ldr	r3, [pc, #284]	; (8000904 <MX_GPIO_Init+0x1b8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f8:	4843      	ldr	r0, [pc, #268]	; (8000908 <MX_GPIO_Init+0x1bc>)
 80007fa:	f001 fb59 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	4842      	ldr	r0, [pc, #264]	; (800090c <MX_GPIO_Init+0x1c0>)
 8000804:	f001 fb54 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	483c      	ldr	r0, [pc, #240]	; (8000910 <MX_GPIO_Init+0x1c4>)
 8000820:	f001 f99a 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000824:	2332      	movs	r3, #50	; 0x32
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000834:	230b      	movs	r3, #11
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4834      	ldr	r0, [pc, #208]	; (8000910 <MX_GPIO_Init+0x1c4>)
 8000840:	f001 f98a 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000844:	2386      	movs	r3, #134	; 0x86
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000854:	230b      	movs	r3, #11
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	482d      	ldr	r0, [pc, #180]	; (8000914 <MX_GPIO_Init+0x1c8>)
 8000860:	f001 f97a 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000864:	f244 0381 	movw	r3, #16513	; 0x4081
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4822      	ldr	r0, [pc, #136]	; (8000908 <MX_GPIO_Init+0x1bc>)
 800087e:	f001 f96b 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000894:	230b      	movs	r3, #11
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481a      	ldr	r0, [pc, #104]	; (8000908 <MX_GPIO_Init+0x1bc>)
 80008a0:	f001 f95a 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4814      	ldr	r0, [pc, #80]	; (800090c <MX_GPIO_Init+0x1c0>)
 80008bc:	f001 f94c 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	480e      	ldr	r0, [pc, #56]	; (800090c <MX_GPIO_Init+0x1c0>)
 80008d4:	f001 f940 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ea:	230b      	movs	r3, #11
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_GPIO_Init+0x1c0>)
 80008f6:	f001 f92f 	bl	8001b58 <HAL_GPIO_Init>

}
 80008fa:	bf00      	nop
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40021800 	.word	0x40021800
 8000910:	40020800 	.word	0x40020800
 8000914:	40020000 	.word	0x40020000

08000918 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint16_t WS9527_Reading;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	WS9527_GetReadings(hadc);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fe41 	bl	80005a8 <WS9527_GetReadings>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
   	if (htim->Instance == TIM3) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d101      	bne.n	8000946 <HAL_TIM_PeriodElapsedCallback+0x16>
	/* TIM3 is set with the frequency of 1000 Hz (period of 1 ms) */
   	 WS9527_StartReadings();
 8000942:	f7ff fe27 	bl	8000594 <WS9527_StartReadings>
   	}
   }
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40000400 	.word	0x40000400

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fac3 	bl	8000ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f812 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 8000960:	f000 f924 	bl	8000bac <MX_TIM3_Init>
  MX_GPIO_Init();
 8000964:	f7ff fef2 	bl	800074c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000968:	f000 f994 	bl	8000c94 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800096c:	f7ff fe54 	bl	8000618 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000970:	f000 fa04 	bl	8000d7c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <main+0x2c>)
 8000976:	f002 fd8d 	bl	8003494 <HAL_TIM_Base_Start_IT>
  WS9527_Initialize();
 800097a:	f7ff fe01 	bl	8000580 <WS9527_Initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800097e:	e7fe      	b.n	800097e <main+0x2a>
 8000980:	20000074 	.word	0x20000074

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0b8      	sub	sp, #224	; 0xe0
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800098e:	2234      	movs	r2, #52	; 0x34
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f004 f960 	bl	8004c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	2290      	movs	r2, #144	; 0x90
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f004 f951 	bl	8004c58 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009b6:	f001 fbdd 	bl	8002174 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b3c      	ldr	r3, [pc, #240]	; (8000aac <SystemClock_Config+0x128>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a3b      	ldr	r2, [pc, #236]	; (8000aac <SystemClock_Config+0x128>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b39      	ldr	r3, [pc, #228]	; (8000aac <SystemClock_Config+0x128>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009d2:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <SystemClock_Config+0x12c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009da:	4a35      	ldr	r2, [pc, #212]	; (8000ab0 <SystemClock_Config+0x12c>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <SystemClock_Config+0x12c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ee:	2301      	movs	r3, #1
 80009f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fc:	2302      	movs	r3, #2
 80009fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a10:	2360      	movs	r3, #96	; 0x60
 8000a12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fc01 	bl	8002234 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a38:	f000 f83e 	bl	8000ab8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a3c:	f001 fbaa 	bl	8002194 <HAL_PWREx_EnableOverDrive>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a46:	f000 f837 	bl	8000ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a50:	2302      	movs	r3, #2
 8000a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a6e:	2103      	movs	r1, #3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fe8d 	bl	8002790 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000a7c:	f000 f81c 	bl	8000ab8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <SystemClock_Config+0x130>)
 8000a82:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 f87e 	bl	8002b94 <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000a9e:	f000 f80b 	bl	8000ab8 <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	37e0      	adds	r7, #224	; 0xe0
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000
 8000ab4:	00200100 	.word	0x00200100

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x44>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x44>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000b58:	f000 fa00 	bl	8000f5c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <ADC_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
 */
void ADC_IRQHandler(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <ADC_IRQHandler+0x10>)
 8000b66:	f000 fb59 	bl	800121c <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC_IRQn 1 */

	/* USER CODE END ADC_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000002c 	.word	0x2000002c

08000b74 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <TIM3_IRQHandler+0x10>)
 8000b7a:	f002 fd03 	bl	8003584 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000074 	.word	0x20000074

08000b88 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_TIM3_Init+0x94>)
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <MX_TIM3_Init+0x98>)
 8000bce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_TIM3_Init+0x94>)
 8000bd2:	225f      	movs	r2, #95	; 0x5f
 8000bd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_TIM3_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_TIM3_Init+0x94>)
 8000bde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_TIM3_Init+0x94>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_TIM3_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bf0:	4813      	ldr	r0, [pc, #76]	; (8000c40 <MX_TIM3_Init+0x94>)
 8000bf2:	f002 fbf7 	bl	80033e4 <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000bfc:	f7ff ff5c 	bl	8000ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_TIM3_Init+0x94>)
 8000c0e:	f002 fdd9 	bl	80037c4 <HAL_TIM_ConfigClockSource>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c18:	f7ff ff4e 	bl	8000ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_TIM3_Init+0x94>)
 8000c2a:	f002 fff7 	bl	8003c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c34:	f7ff ff40 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000074 	.word	0x20000074
 8000c44:	40000400 	.word	0x40000400

08000c48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d113      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_TIM_Base_MspInit+0x48>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <HAL_TIM_Base_MspInit+0x48>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_TIM_Base_MspInit+0x48>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	201d      	movs	r0, #29
 8000c78:	f000 ff37 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c7c:	201d      	movs	r0, #29
 8000c7e:	f000 ff50 	bl	8001b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40000400 	.word	0x40000400
 8000c90:	40023800 	.word	0x40023800

08000c94 <MX_USART3_UART_Init>:

UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_USART3_UART_Init+0x58>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <MX_USART3_UART_Init+0x5c>)
 8000c9c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_USART3_UART_Init+0x58>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_USART3_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_USART3_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_USART3_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_USART3_UART_Init+0x58>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_USART3_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_USART3_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_USART3_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_USART3_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_USART3_UART_Init+0x58>)
 8000cd8:	f003 f84c 	bl	8003d74 <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000ce2:	f7ff fee9 	bl	8000ab8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000c0 	.word	0x200000c0
 8000cf0:	40004800 	.word	0x40004800

08000cf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
	if (uartHandle->Instance == USART3) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_UART_MspInit+0x7c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d128      	bne.n	8000d68 <HAL_UART_MspInit+0x74>
		/* USER CODE BEGIN USART3_MspInit 0 */

		/* USER CODE END USART3_MspInit 0 */
		/* USART3 clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_UART_MspInit+0x80>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a16      	ldr	r2, [pc, #88]	; (8000d74 <HAL_UART_MspInit+0x80>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_UART_MspInit+0x80>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_UART_MspInit+0x80>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <HAL_UART_MspInit+0x80>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_UART_MspInit+0x80>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8000d46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_UART_MspInit+0x84>)
 8000d64:	f000 fef8 	bl	8001b58 <HAL_GPIO_Init>

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40004800 	.word	0x40004800
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020c00 	.word	0x40020c00

08000d7c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8a:	2206      	movs	r2, #6
 8000d8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d90:	2202      	movs	r2, #2
 8000d92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc0:	f001 f88f 	bl	8001ee2 <HAL_PCD_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dca:	f7ff fe75 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000144 	.word	0x20000144

08000dd8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df8:	d141      	bne.n	8000e7e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <HAL_PCD_MspInit+0xb0>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <HAL_PCD_MspInit+0xb0>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_PCD_MspInit+0xb0>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e12:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e24:	230a      	movs	r3, #10
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4817      	ldr	r0, [pc, #92]	; (8000e8c <HAL_PCD_MspInit+0xb4>)
 8000e30:	f000 fe92 	bl	8001b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4810      	ldr	r0, [pc, #64]	; (8000e8c <HAL_PCD_MspInit+0xb4>)
 8000e4a:	f000 fe85 	bl	8001b58 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_PCD_MspInit+0xb0>)
 8000e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e52:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <HAL_PCD_MspInit+0xb0>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e58:	6353      	str	r3, [r2, #52]	; 0x34
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_PCD_MspInit+0xb0>)
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_PCD_MspInit+0xb0>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_PCD_MspInit+0xb0>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_PCD_MspInit+0xb0>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eba:	f7ff fe65 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f003 fea7 	bl	8004c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fd47 	bl	8000954 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ed4:	08004ca8 	.word	0x08004ca8
  ldr r2, =_sbss
 8000ed8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000edc:	2000054c 	.word	0x2000054c

08000ee0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <CAN1_RX0_IRQHandler>

08000ee2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 fdf4 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 f805 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef2:	f7ff fde7 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fe0f 	bl	8001b3e <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 fdd7 	bl	8001aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000548 	.word	0x20000548

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000548 	.word	0x20000548

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e031      	b.n	800105e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d109      	bne.n	8001016 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fb5a 	bl	80006bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	2b00      	cmp	r3, #0
 8001020:	d116      	bne.n	8001050 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_ADC_Init+0x84>)
 8001028:	4013      	ands	r3, r2
 800102a:	f043 0202 	orr.w	r2, r3, #2
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 fb7a 	bl	800172c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f023 0303 	bic.w	r3, r3, #3
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
 800104e:	e001      	b.n	8001054 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	ffffeefd 	.word	0xffffeefd

0800106c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Start_IT+0x1a>
 8001082:	2302      	movs	r3, #2
 8001084:	e0b5      	b.n	80011f2 <HAL_ADC_Start_IT+0x186>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b01      	cmp	r3, #1
 800109a:	d018      	beq.n	80010ce <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010ac:	4b54      	ldr	r3, [pc, #336]	; (8001200 <HAL_ADC_Start_IT+0x194>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a54      	ldr	r2, [pc, #336]	; (8001204 <HAL_ADC_Start_IT+0x198>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	0c9a      	lsrs	r2, r3, #18
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80010c0:	e002      	b.n	80010c8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f9      	bne.n	80010c2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d17d      	bne.n	80011d8 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e0:	4b49      	ldr	r3, [pc, #292]	; (8001208 <HAL_ADC_Start_IT+0x19c>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d007      	beq.n	800110a <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001102:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001116:	d106      	bne.n	8001126 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	f023 0206 	bic.w	r2, r3, #6
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	645a      	str	r2, [r3, #68]	; 0x44
 8001124:	e002      	b.n	800112c <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800113c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6859      	ldr	r1, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_ADC_Start_IT+0x1a0>)
 800114a:	430b      	orrs	r3, r1
 800114c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800114e:	4b30      	ldr	r3, [pc, #192]	; (8001210 <HAL_ADC_Start_IT+0x1a4>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d143      	bne.n	80011f0 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	e03a      	b.n	80011f0 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a25      	ldr	r2, [pc, #148]	; (8001214 <HAL_ADC_Start_IT+0x1a8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d10e      	bne.n	80011a2 <HAL_ADC_Start_IT+0x136>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d107      	bne.n	80011a2 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011a0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_ADC_Start_IT+0x1a4>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d120      	bne.n	80011f0 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a19      	ldr	r2, [pc, #100]	; (8001218 <HAL_ADC_Start_IT+0x1ac>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d11b      	bne.n	80011f0 <HAL_ADC_Start_IT+0x184>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d114      	bne.n	80011f0 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	e00b      	b.n	80011f0 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f043 0210 	orr.w	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000000 	.word	0x20000000
 8001204:	431bde83 	.word	0x431bde83
 8001208:	fffff8fe 	.word	0xfffff8fe
 800120c:	04000020 	.word	0x04000020
 8001210:	40012300 	.word	0x40012300
 8001214:	40012000 	.word	0x40012000
 8001218:	40012200 	.word	0x40012200

0800121c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d049      	beq.n	80012e6 <HAL_ADC_IRQHandler+0xca>
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d046      	beq.n	80012e6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b00      	cmp	r3, #0
 8001262:	d105      	bne.n	8001270 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d12b      	bne.n	80012d6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001282:	2b00      	cmp	r3, #0
 8001284:	d127      	bne.n	80012d6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d119      	bne.n	80012d6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0220 	bic.w	r2, r2, #32
 80012b0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d105      	bne.n	80012d6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fb1e 	bl	8000918 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f06f 0212 	mvn.w	r2, #18
 80012e4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d057      	beq.n	80013ac <HAL_ADC_IRQHandler+0x190>
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d054      	beq.n	80013ac <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d139      	bne.n	800139c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001340:	2b00      	cmp	r3, #0
 8001342:	d12b      	bne.n	800139c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800134e:	2b00      	cmp	r3, #0
 8001350:	d124      	bne.n	800139c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800135c:	2b00      	cmp	r3, #0
 800135e:	d11d      	bne.n	800139c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001364:	2b00      	cmp	r3, #0
 8001366:	d119      	bne.n	800139c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001376:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d105      	bne.n	800139c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f043 0201 	orr.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fabf 	bl	8001920 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f06f 020c 	mvn.w	r2, #12
 80013aa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ba:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d017      	beq.n	80013f2 <HAL_ADC_IRQHandler+0x1d6>
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d014      	beq.n	80013f2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d10d      	bne.n	80013f2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f837 	bl	8001456 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f06f 0201 	mvn.w	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f003 0320 	and.w	r3, r3, #32
 80013f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001400:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d015      	beq.n	8001434 <HAL_ADC_IRQHandler+0x218>
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d012      	beq.n	8001434 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f043 0202 	orr.w	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f06f 0220 	mvn.w	r2, #32
 8001422:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f820 	bl	800146a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f06f 0220 	mvn.w	r2, #32
 8001432:	601a      	str	r2, [r3, #0]
  }
}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_ADC_ConfigChannel+0x1c>
 8001498:	2302      	movs	r3, #2
 800149a:	e136      	b.n	800170a <HAL_ADC_ConfigChannel+0x28a>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b09      	cmp	r3, #9
 80014aa:	d93a      	bls.n	8001522 <HAL_ADC_ConfigChannel+0xa2>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014b4:	d035      	beq.n	8001522 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68d9      	ldr	r1, [r3, #12]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	3b1e      	subs	r3, #30
 80014cc:	2207      	movs	r2, #7
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a8d      	ldr	r2, [pc, #564]	; (8001718 <HAL_ADC_ConfigChannel+0x298>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d10a      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68d9      	ldr	r1, [r3, #12]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	061a      	lsls	r2, r3, #24
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014fa:	e035      	b.n	8001568 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68d9      	ldr	r1, [r3, #12]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	4603      	mov	r3, r0
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4403      	add	r3, r0
 8001514:	3b1e      	subs	r3, #30
 8001516:	409a      	lsls	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001520:	e022      	b.n	8001568 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6919      	ldr	r1, [r3, #16]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	2207      	movs	r2, #7
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43da      	mvns	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	400a      	ands	r2, r1
 8001544:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6919      	ldr	r1, [r3, #16]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	4603      	mov	r3, r0
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4403      	add	r3, r0
 800155e:	409a      	lsls	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b06      	cmp	r3, #6
 800156e:	d824      	bhi.n	80015ba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	3b05      	subs	r3, #5
 8001582:	221f      	movs	r2, #31
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43da      	mvns	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	400a      	ands	r2, r1
 8001590:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3b05      	subs	r3, #5
 80015ac:	fa00 f203 	lsl.w	r2, r0, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	635a      	str	r2, [r3, #52]	; 0x34
 80015b8:	e04c      	b.n	8001654 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d824      	bhi.n	800160c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	3b23      	subs	r3, #35	; 0x23
 80015d4:	221f      	movs	r2, #31
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	400a      	ands	r2, r1
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3b23      	subs	r3, #35	; 0x23
 80015fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
 800160a:	e023      	b.n	8001654 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	3b41      	subs	r3, #65	; 0x41
 800161e:	221f      	movs	r2, #31
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43da      	mvns	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	400a      	ands	r2, r1
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	3b41      	subs	r3, #65	; 0x41
 8001648:	fa00 f203 	lsl.w	r2, r0, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a30      	ldr	r2, [pc, #192]	; (800171c <HAL_ADC_ConfigChannel+0x29c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d10a      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x1f4>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001666:	d105      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_ADC_ConfigChannel+0x2a0>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4a2c      	ldr	r2, [pc, #176]	; (8001720 <HAL_ADC_ConfigChannel+0x2a0>)
 800166e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001672:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a28      	ldr	r2, [pc, #160]	; (800171c <HAL_ADC_ConfigChannel+0x29c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10f      	bne.n	800169e <HAL_ADC_ConfigChannel+0x21e>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b12      	cmp	r3, #18
 8001684:	d10b      	bne.n	800169e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_ADC_ConfigChannel+0x2a0>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4a25      	ldr	r2, [pc, #148]	; (8001720 <HAL_ADC_ConfigChannel+0x2a0>)
 800168c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001690:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_ADC_ConfigChannel+0x2a0>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_ADC_ConfigChannel+0x2a0>)
 8001698:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800169c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_ADC_ConfigChannel+0x29c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d12b      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x280>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <HAL_ADC_ConfigChannel+0x298>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d003      	beq.n	80016ba <HAL_ADC_ConfigChannel+0x23a>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b11      	cmp	r3, #17
 80016b8:	d122      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_ADC_ConfigChannel+0x2a0>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a18      	ldr	r2, [pc, #96]	; (8001720 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016c4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4a15      	ldr	r2, [pc, #84]	; (8001720 <HAL_ADC_ConfigChannel+0x2a0>)
 80016cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016d0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_ADC_ConfigChannel+0x298>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d111      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_ADC_ConfigChannel+0x2a4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <HAL_ADC_ConfigChannel+0x2a8>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0c9a      	lsrs	r2, r3, #18
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016f2:	e002      	b.n	80016fa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f9      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	10000012 	.word	0x10000012
 800171c:	40012000 	.word	0x40012000
 8001720:	40012300 	.word	0x40012300
 8001724:	20000000 	.word	0x20000000
 8001728:	431bde83 	.word	0x431bde83

0800172c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001734:	4b78      	ldr	r3, [pc, #480]	; (8001918 <ADC_Init+0x1ec>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a77      	ldr	r2, [pc, #476]	; (8001918 <ADC_Init+0x1ec>)
 800173a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800173e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001740:	4b75      	ldr	r3, [pc, #468]	; (8001918 <ADC_Init+0x1ec>)
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4973      	ldr	r1, [pc, #460]	; (8001918 <ADC_Init+0x1ec>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800175c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	021a      	lsls	r2, r3, #8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001780:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6859      	ldr	r1, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6899      	ldr	r1, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	4a58      	ldr	r2, [pc, #352]	; (800191c <ADC_Init+0x1f0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d022      	beq.n	8001806 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6899      	ldr	r1, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6899      	ldr	r1, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	e00f      	b.n	8001826 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001814:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001824:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0202 	bic.w	r2, r2, #2
 8001834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6899      	ldr	r1, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	005a      	lsls	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01b      	beq.n	800188c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001862:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001872:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	3b01      	subs	r3, #1
 8001880:	035a      	lsls	r2, r3, #13
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	e007      	b.n	800189c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800189a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	051a      	lsls	r2, r3, #20
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018de:	025a      	lsls	r2, r3, #9
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6899      	ldr	r1, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	029a      	lsls	r2, r3, #10
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	609a      	str	r2, [r3, #8]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40012300 	.word	0x40012300
 800191c:	0f000001 	.word	0x0f000001

08001920 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <__NVIC_SetPriorityGrouping+0x40>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	4313      	orrs	r3, r2
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	; (8001974 <__NVIC_SetPriorityGrouping+0x40>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00
 8001978:	05fa0000 	.word	0x05fa0000

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db0b      	blt.n	80019c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	4907      	ldr	r1, [pc, #28]	; (80019d0 <__NVIC_EnableIRQ+0x38>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2001      	movs	r0, #1
 80019ba:	fa00 f202 	lsl.w	r2, r0, r2
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	; (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff8e 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff29 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff3e 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff8e 	bl	8001a28 <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5d 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff31 	bl	8001998 <__NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffa2 	bl	8001a90 <SysTick_Config>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e175      	b.n	8001e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 8164 	bne.w	8001e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d005      	beq.n	8001bae <HAL_GPIO_Init+0x56>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d130      	bne.n	8001c10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 0201 	and.w	r2, r3, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d017      	beq.n	8001c4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d123      	bne.n	8001ca0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0203 	and.w	r2, r3, #3
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80be 	beq.w	8001e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <HAL_GPIO_Init+0x324>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <HAL_GPIO_Init+0x324>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cec:	6453      	str	r3, [r2, #68]	; 0x44
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <HAL_GPIO_Init+0x324>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cfa:	4a61      	ldr	r2, [pc, #388]	; (8001e80 <HAL_GPIO_Init+0x328>)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_GPIO_Init+0x32c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d037      	beq.n	8001d96 <HAL_GPIO_Init+0x23e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a57      	ldr	r2, [pc, #348]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d031      	beq.n	8001d92 <HAL_GPIO_Init+0x23a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a56      	ldr	r2, [pc, #344]	; (8001e8c <HAL_GPIO_Init+0x334>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d02b      	beq.n	8001d8e <HAL_GPIO_Init+0x236>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a55      	ldr	r2, [pc, #340]	; (8001e90 <HAL_GPIO_Init+0x338>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d025      	beq.n	8001d8a <HAL_GPIO_Init+0x232>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a54      	ldr	r2, [pc, #336]	; (8001e94 <HAL_GPIO_Init+0x33c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01f      	beq.n	8001d86 <HAL_GPIO_Init+0x22e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a53      	ldr	r2, [pc, #332]	; (8001e98 <HAL_GPIO_Init+0x340>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d019      	beq.n	8001d82 <HAL_GPIO_Init+0x22a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_GPIO_Init+0x344>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x226>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a51      	ldr	r2, [pc, #324]	; (8001ea0 <HAL_GPIO_Init+0x348>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x222>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a50      	ldr	r2, [pc, #320]	; (8001ea4 <HAL_GPIO_Init+0x34c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x21e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4f      	ldr	r2, [pc, #316]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x21a>
 8001d6e:	2309      	movs	r3, #9
 8001d70:	e012      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d72:	230a      	movs	r3, #10
 8001d74:	e010      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d76:	2308      	movs	r3, #8
 8001d78:	e00e      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	e00c      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d7e:	2306      	movs	r3, #6
 8001d80:	e00a      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d82:	2305      	movs	r3, #5
 8001d84:	e008      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d86:	2304      	movs	r3, #4
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e004      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d96:	2300      	movs	r3, #0
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	f002 0203 	and.w	r2, r2, #3
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	4093      	lsls	r3, r2
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001da8:	4935      	ldr	r1, [pc, #212]	; (8001e80 <HAL_GPIO_Init+0x328>)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dda:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de0:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e04:	4a29      	ldr	r2, [pc, #164]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e58:	4a14      	ldr	r2, [pc, #80]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b0f      	cmp	r3, #15
 8001e68:	f67f ae86 	bls.w	8001b78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40013800 	.word	0x40013800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40021400 	.word	0x40021400
 8001e9c:	40021800 	.word	0x40021800
 8001ea0:	40021c00 	.word	0x40021c00
 8001ea4:	40022000 	.word	0x40022000
 8001ea8:	40022400 	.word	0x40022400
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee4:	b08f      	sub	sp, #60	; 0x3c
 8001ee6:	af0a      	add	r7, sp, #40	; 0x28
 8001ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e116      	b.n	8002122 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe ff62 	bl	8000dd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fbd6 	bl	80046e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	687e      	ldr	r6, [r7, #4]
 8001f40:	466d      	mov	r5, sp
 8001f42:	f106 0410 	add.w	r4, r6, #16
 8001f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f52:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f56:	1d33      	adds	r3, r6, #4
 8001f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5a:	6838      	ldr	r0, [r7, #0]
 8001f5c:	f002 fb6a 	bl	8004634 <USB_CoreInit>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0d7      	b.n	8002122 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 fbc4 	bl	8004706 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	e04a      	b.n	800201a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	333d      	adds	r3, #61	; 0x3d
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	333c      	adds	r3, #60	; 0x3c
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	b298      	uxth	r0, r3
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3342      	adds	r3, #66	; 0x42
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	333f      	adds	r3, #63	; 0x3f
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3344      	adds	r3, #68	; 0x44
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3348      	adds	r3, #72	; 0x48
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	3350      	adds	r3, #80	; 0x50
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	3301      	adds	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3af      	bcc.n	8001f84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	e044      	b.n	80020b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	3301      	adds	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3b5      	bcc.n	800202a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	687e      	ldr	r6, [r7, #4]
 80020c6:	466d      	mov	r5, sp
 80020c8:	f106 0410 	add.w	r4, r6, #16
 80020cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020dc:	1d33      	adds	r3, r6, #4
 80020de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e0:	6838      	ldr	r0, [r7, #0]
 80020e2:	f002 fb5d 	bl	80047a0 <USB_DevInit>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e014      	b.n	8002122 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	2b01      	cmp	r3, #1
 800210e:	d102      	bne.n	8002116 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f80b 	bl	800212c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fd17 	bl	8004b4e <USB_DevDisconnect>

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800212c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_PCDEx_ActivateLPM+0x44>)
 800215c:	4313      	orrs	r3, r2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	10000003 	.word	0x10000003

08002174 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40007000 	.word	0x40007000

08002194 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	4b23      	ldr	r3, [pc, #140]	; (800222c <HAL_PWREx_EnableOverDrive+0x98>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a22      	ldr	r2, [pc, #136]	; (800222c <HAL_PWREx_EnableOverDrive+0x98>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_PWREx_EnableOverDrive+0x98>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1d      	ldr	r2, [pc, #116]	; (8002230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c2:	f7fe fedf 	bl	8000f84 <HAL_GetTick>
 80021c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021c8:	e009      	b.n	80021de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021ca:	f7fe fedb 	bl	8000f84 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021d8:	d901      	bls.n	80021de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e022      	b.n	8002224 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ea:	d1ee      	bne.n	80021ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021ec:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021f8:	f7fe fec4 	bl	8000f84 <HAL_GetTick>
 80021fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021fe:	e009      	b.n	8002214 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002200:	f7fe fec0 	bl	8000f84 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800220e:	d901      	bls.n	8002214 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e007      	b.n	8002224 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002220:	d1ee      	bne.n	8002200 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	40007000 	.word	0x40007000

08002234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e29b      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8087 	beq.w	8002366 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002258:	4b96      	ldr	r3, [pc, #600]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b04      	cmp	r3, #4
 8002262:	d00c      	beq.n	800227e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002264:	4b93      	ldr	r3, [pc, #588]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b08      	cmp	r3, #8
 800226e:	d112      	bne.n	8002296 <HAL_RCC_OscConfig+0x62>
 8002270:	4b90      	ldr	r3, [pc, #576]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800227c:	d10b      	bne.n	8002296 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227e:	4b8d      	ldr	r3, [pc, #564]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d06c      	beq.n	8002364 <HAL_RCC_OscConfig+0x130>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d168      	bne.n	8002364 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e275      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x7a>
 80022a0:	4b84      	ldr	r3, [pc, #528]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a83      	ldr	r2, [pc, #524]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	e02e      	b.n	800230c <HAL_RCC_OscConfig+0xd8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x9c>
 80022b6:	4b7f      	ldr	r3, [pc, #508]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7e      	ldr	r2, [pc, #504]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b7c      	ldr	r3, [pc, #496]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7b      	ldr	r2, [pc, #492]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e01d      	b.n	800230c <HAL_RCC_OscConfig+0xd8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0xc0>
 80022da:	4b76      	ldr	r3, [pc, #472]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a75      	ldr	r2, [pc, #468]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b73      	ldr	r3, [pc, #460]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a72      	ldr	r2, [pc, #456]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0xd8>
 80022f4:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a6e      	ldr	r2, [pc, #440]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80022fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a6b      	ldr	r2, [pc, #428]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe fe36 	bl	8000f84 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7fe fe32 	bl	8000f84 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e229      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0xe8>
 800233a:	e014      	b.n	8002366 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe fe22 	bl	8000f84 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002344:	f7fe fe1e 	bl	8000f84 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	; 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e215      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x110>
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d069      	beq.n	8002446 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002372:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237e:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b08      	cmp	r3, #8
 8002388:	d11c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x190>
 800238a:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d116      	bne.n	80023c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_RCC_OscConfig+0x17a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e1e9      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ae:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	493d      	ldr	r1, [pc, #244]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	e040      	b.n	8002446 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d023      	beq.n	8002414 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023cc:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a38      	ldr	r2, [pc, #224]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe fdd4 	bl	8000f84 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e0:	f7fe fdd0 	bl	8000f84 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1c7      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4929      	ldr	r1, [pc, #164]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
 8002412:	e018      	b.n	8002446 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe fdb0 	bl	8000f84 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002428:	f7fe fdac 	bl	8000f84 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e1a3      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d038      	beq.n	80024c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d019      	beq.n	800248e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	4a15      	ldr	r2, [pc, #84]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe fd8d 	bl	8000f84 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246e:	f7fe fd89 	bl	8000f84 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e180      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x23a>
 800248c:	e01a      	b.n	80024c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002492:	4a08      	ldr	r2, [pc, #32]	; (80024b4 <HAL_RCC_OscConfig+0x280>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249a:	f7fe fd73 	bl	8000f84 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a2:	f7fe fd6f 	bl	8000f84 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d903      	bls.n	80024b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e166      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
 80024b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b8:	4b92      	ldr	r3, [pc, #584]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80024ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ee      	bne.n	80024a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80a4 	beq.w	800261a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d2:	4b8c      	ldr	r3, [pc, #560]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	4b89      	ldr	r3, [pc, #548]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a88      	ldr	r2, [pc, #544]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b86      	ldr	r3, [pc, #536]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f6:	2301      	movs	r3, #1
 80024f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fa:	4b83      	ldr	r3, [pc, #524]	; (8002708 <HAL_RCC_OscConfig+0x4d4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d118      	bne.n	8002538 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002506:	4b80      	ldr	r3, [pc, #512]	; (8002708 <HAL_RCC_OscConfig+0x4d4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a7f      	ldr	r2, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0x4d4>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002512:	f7fe fd37 	bl	8000f84 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251a:	f7fe fd33 	bl	8000f84 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b64      	cmp	r3, #100	; 0x64
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e12a      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252c:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x4d4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x31a>
 8002540:	4b70      	ldr	r3, [pc, #448]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	4a6f      	ldr	r2, [pc, #444]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6713      	str	r3, [r2, #112]	; 0x70
 800254c:	e02d      	b.n	80025aa <HAL_RCC_OscConfig+0x376>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x33c>
 8002556:	4b6b      	ldr	r3, [pc, #428]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	4a6a      	ldr	r2, [pc, #424]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6713      	str	r3, [r2, #112]	; 0x70
 8002562:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002566:	4a67      	ldr	r2, [pc, #412]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	6713      	str	r3, [r2, #112]	; 0x70
 800256e:	e01c      	b.n	80025aa <HAL_RCC_OscConfig+0x376>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b05      	cmp	r3, #5
 8002576:	d10c      	bne.n	8002592 <HAL_RCC_OscConfig+0x35e>
 8002578:	4b62      	ldr	r3, [pc, #392]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	4a61      	ldr	r2, [pc, #388]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	6713      	str	r3, [r2, #112]	; 0x70
 8002584:	4b5f      	ldr	r3, [pc, #380]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4a5e      	ldr	r2, [pc, #376]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6713      	str	r3, [r2, #112]	; 0x70
 8002590:	e00b      	b.n	80025aa <HAL_RCC_OscConfig+0x376>
 8002592:	4b5c      	ldr	r3, [pc, #368]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	4a5b      	ldr	r2, [pc, #364]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	6713      	str	r3, [r2, #112]	; 0x70
 800259e:	4b59      	ldr	r3, [pc, #356]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	4a58      	ldr	r2, [pc, #352]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d015      	beq.n	80025de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b2:	f7fe fce7 	bl	8000f84 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fce3 	bl	8000f84 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0d8      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d0:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ee      	beq.n	80025ba <HAL_RCC_OscConfig+0x386>
 80025dc:	e014      	b.n	8002608 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7fe fcd1 	bl	8000f84 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7fe fccd 	bl	8000f84 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0c2      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fc:	4b41      	ldr	r3, [pc, #260]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ee      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002608:	7dfb      	ldrb	r3, [r7, #23]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d105      	bne.n	800261a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a3c      	ldr	r2, [pc, #240]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 80ae 	beq.w	8002780 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002624:	4b37      	ldr	r3, [pc, #220]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b08      	cmp	r3, #8
 800262e:	d06d      	beq.n	800270c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d14b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002638:	4b32      	ldr	r3, [pc, #200]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a31      	ldr	r2, [pc, #196]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 800263e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe fc9e 	bl	8000f84 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe fc9a 	bl	8000f84 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e091      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	019b      	lsls	r3, r3, #6
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	085b      	lsrs	r3, r3, #1
 8002682:	3b01      	subs	r3, #1
 8002684:	041b      	lsls	r3, r3, #16
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	071b      	lsls	r3, r3, #28
 8002696:	491b      	ldr	r1, [pc, #108]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80026a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fc6c 	bl	8000f84 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe fc68 	bl	8000f84 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e05f      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x47c>
 80026ce:	e057      	b.n	8002780 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80026d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fc52 	bl	8000f84 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e4:	f7fe fc4e 	bl	8000f84 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e045      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f6:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_RCC_OscConfig+0x4d0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4b0>
 8002702:	e03d      	b.n	8002780 <HAL_RCC_OscConfig+0x54c>
 8002704:	40023800 	.word	0x40023800
 8002708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800270c:	4b1f      	ldr	r3, [pc, #124]	; (800278c <HAL_RCC_OscConfig+0x558>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d030      	beq.n	800277c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d129      	bne.n	800277c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d122      	bne.n	800277c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002742:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002744:	4293      	cmp	r3, r2
 8002746:	d119      	bne.n	800277c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	3b01      	subs	r3, #1
 8002756:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d10f      	bne.n	800277c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d107      	bne.n	800277c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0d0      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d910      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b67      	ldr	r3, [pc, #412]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 020f 	bic.w	r2, r3, #15
 80027be:	4965      	ldr	r1, [pc, #404]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b63      	ldr	r3, [pc, #396]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0b8      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f0:	4b59      	ldr	r3, [pc, #356]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a58      	ldr	r2, [pc, #352]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002808:	4b53      	ldr	r3, [pc, #332]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a52      	ldr	r2, [pc, #328]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002814:	4b50      	ldr	r3, [pc, #320]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	494d      	ldr	r1, [pc, #308]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d040      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d115      	bne.n	8002872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e07f      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e073      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e06b      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b39      	ldr	r3, [pc, #228]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4936      	ldr	r1, [pc, #216]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002884:	f7fe fb7e 	bl	8000f84 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe fb7a 	bl	8000f84 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e053      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b27      	ldr	r3, [pc, #156]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d210      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 020f 	bic.w	r2, r3, #15
 80028ca:	4922      	ldr	r1, [pc, #136]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e032      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4916      	ldr	r1, [pc, #88]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	490e      	ldr	r1, [pc, #56]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002922:	f000 f821 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002926:	4602      	mov	r2, r0
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	490a      	ldr	r1, [pc, #40]	; (800295c <HAL_RCC_ClockConfig+0x1cc>)
 8002934:	5ccb      	ldrb	r3, [r1, r3]
 8002936:	fa22 f303 	lsr.w	r3, r2, r3
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <HAL_RCC_ClockConfig+0x1d0>)
 800293c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_RCC_ClockConfig+0x1d4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fada 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023c00 	.word	0x40023c00
 8002958:	40023800 	.word	0x40023800
 800295c:	08004c80 	.word	0x08004c80
 8002960:	20000000 	.word	0x20000000
 8002964:	20000004 	.word	0x20000004

08002968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	2300      	movs	r3, #0
 800297a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002980:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b08      	cmp	r3, #8
 800298a:	d00d      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x40>
 800298c:	2b08      	cmp	r3, #8
 800298e:	f200 80bd 	bhi.w	8002b0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x34>
 8002996:	2b04      	cmp	r3, #4
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800299a:	e0b7      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800299c:	4b61      	ldr	r3, [pc, #388]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800299e:	60bb      	str	r3, [r7, #8]
      break;
 80029a0:	e0b7      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029a2:	4b61      	ldr	r3, [pc, #388]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029a4:	60bb      	str	r3, [r7, #8]
      break;
 80029a6:	e0b4      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a8:	4b5d      	ldr	r3, [pc, #372]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029b0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029b2:	4b5b      	ldr	r3, [pc, #364]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d04d      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029be:	4b58      	ldr	r3, [pc, #352]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	099b      	lsrs	r3, r3, #6
 80029c4:	461a      	mov	r2, r3
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029ce:	f04f 0100 	mov.w	r1, #0
 80029d2:	ea02 0800 	and.w	r8, r2, r0
 80029d6:	ea03 0901 	and.w	r9, r3, r1
 80029da:	4640      	mov	r0, r8
 80029dc:	4649      	mov	r1, r9
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	014b      	lsls	r3, r1, #5
 80029e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029ec:	0142      	lsls	r2, r0, #5
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	ebb0 0008 	subs.w	r0, r0, r8
 80029f6:	eb61 0109 	sbc.w	r1, r1, r9
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	018b      	lsls	r3, r1, #6
 8002a04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a08:	0182      	lsls	r2, r0, #6
 8002a0a:	1a12      	subs	r2, r2, r0
 8002a0c:	eb63 0301 	sbc.w	r3, r3, r1
 8002a10:	f04f 0000 	mov.w	r0, #0
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	00d9      	lsls	r1, r3, #3
 8002a1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a1e:	00d0      	lsls	r0, r2, #3
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	eb12 0208 	adds.w	r2, r2, r8
 8002a28:	eb43 0309 	adc.w	r3, r3, r9
 8002a2c:	f04f 0000 	mov.w	r0, #0
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	0259      	lsls	r1, r3, #9
 8002a36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a3a:	0250      	lsls	r0, r2, #9
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	f7fd fbf4 	bl	8000238 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4613      	mov	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e04a      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	461a      	mov	r2, r3
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a6a:	f04f 0100 	mov.w	r1, #0
 8002a6e:	ea02 0400 	and.w	r4, r2, r0
 8002a72:	ea03 0501 	and.w	r5, r3, r1
 8002a76:	4620      	mov	r0, r4
 8002a78:	4629      	mov	r1, r5
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	014b      	lsls	r3, r1, #5
 8002a84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a88:	0142      	lsls	r2, r0, #5
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	1b00      	subs	r0, r0, r4
 8002a90:	eb61 0105 	sbc.w	r1, r1, r5
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	018b      	lsls	r3, r1, #6
 8002a9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002aa2:	0182      	lsls	r2, r0, #6
 8002aa4:	1a12      	subs	r2, r2, r0
 8002aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aaa:	f04f 0000 	mov.w	r0, #0
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	00d9      	lsls	r1, r3, #3
 8002ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ab8:	00d0      	lsls	r0, r2, #3
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	1912      	adds	r2, r2, r4
 8002ac0:	eb45 0303 	adc.w	r3, r5, r3
 8002ac4:	f04f 0000 	mov.w	r0, #0
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	0299      	lsls	r1, r3, #10
 8002ace:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ad2:	0290      	lsls	r0, r2, #10
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	f7fd fba8 	bl	8000238 <__aeabi_uldivmod>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4613      	mov	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	3301      	adds	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	60bb      	str	r3, [r7, #8]
      break;
 8002b0a:	e002      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b0e:	60bb      	str	r3, [r7, #8]
      break;
 8002b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b12:	68bb      	ldr	r3, [r7, #8]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	00f42400 	.word	0x00f42400
 8002b28:	007a1200 	.word	0x007a1200

08002b2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000000 	.word	0x20000000

08002b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b48:	f7ff fff0 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	0a9b      	lsrs	r3, r3, #10
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	4903      	ldr	r1, [pc, #12]	; (8002b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40023800 	.word	0x40023800
 8002b68:	08004c90 	.word	0x08004c90

08002b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b70:	f7ff ffdc 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	0b5b      	lsrs	r3, r3, #13
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	4903      	ldr	r1, [pc, #12]	; (8002b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	08004c90 	.word	0x08004c90

08002b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d012      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bbc:	4b69      	ldr	r3, [pc, #420]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a68      	ldr	r2, [pc, #416]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bc6:	6093      	str	r3, [r2, #8]
 8002bc8:	4b66      	ldr	r3, [pc, #408]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	4964      	ldr	r1, [pc, #400]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d017      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bee:	4b5d      	ldr	r3, [pc, #372]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	4959      	ldr	r1, [pc, #356]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d017      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c2a:	4b4e      	ldr	r3, [pc, #312]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	494a      	ldr	r1, [pc, #296]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c48:	d101      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c66:	2301      	movs	r3, #1
 8002c68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 808b 	beq.w	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c78:	4b3a      	ldr	r3, [pc, #232]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	4a39      	ldr	r2, [pc, #228]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c82:	6413      	str	r3, [r2, #64]	; 0x40
 8002c84:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a34      	ldr	r2, [pc, #208]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9c:	f7fe f972 	bl	8000f84 <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca4:	f7fe f96e 	bl	8000f84 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e38f      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cc2:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d035      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d02e      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cea:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a1a      	ldr	r2, [pc, #104]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d02:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d08:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d114      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe f936 	bl	8000f84 <HAL_GetTick>
 8002d18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7fe f932 	bl	8000f84 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e351      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0ee      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d4a:	d111      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d5a:	400b      	ands	r3, r1
 8002d5c:	4901      	ldr	r1, [pc, #4]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
 8002d62:	e00b      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	0ffffcff 	.word	0x0ffffcff
 8002d70:	4bb3      	ldr	r3, [pc, #716]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4ab2      	ldr	r2, [pc, #712]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d7a:	6093      	str	r3, [r2, #8]
 8002d7c:	4bb0      	ldr	r3, [pc, #704]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d88:	49ad      	ldr	r1, [pc, #692]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d010      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d9a:	4ba9      	ldr	r3, [pc, #676]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da0:	4aa7      	ldr	r2, [pc, #668]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002daa:	4ba5      	ldr	r3, [pc, #660]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	49a2      	ldr	r1, [pc, #648]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dc8:	4b9d      	ldr	r3, [pc, #628]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd6:	499a      	ldr	r1, [pc, #616]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dea:	4b95      	ldr	r3, [pc, #596]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df8:	4991      	ldr	r1, [pc, #580]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e0c:	4b8c      	ldr	r3, [pc, #560]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1a:	4989      	ldr	r1, [pc, #548]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e2e:	4b84      	ldr	r3, [pc, #528]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4980      	ldr	r1, [pc, #512]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e50:	4b7b      	ldr	r3, [pc, #492]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	f023 0203 	bic.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	4978      	ldr	r1, [pc, #480]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e72:	4b73      	ldr	r3, [pc, #460]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	f023 020c 	bic.w	r2, r3, #12
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	496f      	ldr	r1, [pc, #444]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	4967      	ldr	r1, [pc, #412]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eb6:	4b62      	ldr	r3, [pc, #392]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec4:	495e      	ldr	r1, [pc, #376]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ed8:	4b59      	ldr	r3, [pc, #356]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	4956      	ldr	r1, [pc, #344]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002efa:	4b51      	ldr	r3, [pc, #324]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	494d      	ldr	r1, [pc, #308]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f1c:	4b48      	ldr	r3, [pc, #288]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2a:	4945      	ldr	r1, [pc, #276]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f3e:	4b40      	ldr	r3, [pc, #256]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4c:	493c      	ldr	r1, [pc, #240]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f60:	4b37      	ldr	r3, [pc, #220]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f6e:	4934      	ldr	r1, [pc, #208]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d011      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f82:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f90:	492b      	ldr	r1, [pc, #172]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd0:	491b      	ldr	r1, [pc, #108]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00b      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fe4:	4b16      	ldr	r3, [pc, #88]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff4:	4912      	ldr	r1, [pc, #72]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003018:	4909      	ldr	r1, [pc, #36]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00f      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800302e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003032:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	e002      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	4986      	ldr	r1, [pc, #536]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003058:	4b81      	ldr	r3, [pc, #516]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800305e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003068:	497d      	ldr	r1, [pc, #500]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d006      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80d6 	beq.w	8003230 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003084:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a75      	ldr	r2, [pc, #468]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800308e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003090:	f7fd ff78 	bl	8000f84 <HAL_GetTick>
 8003094:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003098:	f7fd ff74 	bl	8000f84 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	; 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e195      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030aa:	4b6d      	ldr	r3, [pc, #436]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d021      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11d      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030ca:	4b65      	ldr	r3, [pc, #404]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030d8:	4b61      	ldr	r3, [pc, #388]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030de:	0e1b      	lsrs	r3, r3, #24
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	019a      	lsls	r2, r3, #6
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	431a      	orrs	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	071b      	lsls	r3, r3, #28
 80030fe:	4958      	ldr	r1, [pc, #352]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311a:	d00a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003124:	2b00      	cmp	r3, #0
 8003126:	d02e      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003130:	d129      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003132:	4b4b      	ldr	r3, [pc, #300]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003140:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003146:	0f1b      	lsrs	r3, r3, #28
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	019a      	lsls	r2, r3, #6
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	061b      	lsls	r3, r3, #24
 8003160:	431a      	orrs	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	493e      	ldr	r1, [pc, #248]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800316e:	4b3c      	ldr	r3, [pc, #240]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003174:	f023 021f 	bic.w	r2, r3, #31
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	3b01      	subs	r3, #1
 800317e:	4938      	ldr	r1, [pc, #224]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01d      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003192:	4b33      	ldr	r3, [pc, #204]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003198:	0e1b      	lsrs	r3, r3, #24
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031a0:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a6:	0f1b      	lsrs	r3, r3, #28
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	019a      	lsls	r2, r3, #6
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	041b      	lsls	r3, r3, #16
 80031ba:	431a      	orrs	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	061b      	lsls	r3, r3, #24
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	4926      	ldr	r1, [pc, #152]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d011      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	019a      	lsls	r2, r3, #6
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	071b      	lsls	r3, r3, #28
 80031f6:	491a      	ldr	r1, [pc, #104]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a17      	ldr	r2, [pc, #92]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003204:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800320a:	f7fd febb 	bl	8000f84 <HAL_GetTick>
 800320e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003212:	f7fd feb7 	bl	8000f84 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b64      	cmp	r3, #100	; 0x64
 800321e:	d901      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0d8      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b01      	cmp	r3, #1
 8003234:	f040 80ce 	bne.w	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a08      	ldr	r2, [pc, #32]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003244:	f7fd fe9e 	bl	8000f84 <HAL_GetTick>
 8003248:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800324a:	e00b      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800324c:	f7fd fe9a 	bl	8000f84 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d904      	bls.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0bb      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003264:	4b5e      	ldr	r3, [pc, #376]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800326c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003270:	d0ec      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800328e:	2b00      	cmp	r3, #0
 8003290:	d02e      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d12a      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800329a:	4b51      	ldr	r3, [pc, #324]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032a8:	4b4d      	ldr	r3, [pc, #308]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	0f1b      	lsrs	r3, r3, #28
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	019a      	lsls	r2, r3, #6
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	061b      	lsls	r3, r3, #24
 80032c8:	431a      	orrs	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	071b      	lsls	r3, r3, #28
 80032ce:	4944      	ldr	r1, [pc, #272]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032d6:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	3b01      	subs	r3, #1
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	493d      	ldr	r1, [pc, #244]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d022      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003304:	d11d      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003306:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	0e1b      	lsrs	r3, r3, #24
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003314:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	0f1b      	lsrs	r3, r3, #28
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	019a      	lsls	r2, r3, #6
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	431a      	orrs	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	061b      	lsls	r3, r3, #24
 8003334:	431a      	orrs	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	071b      	lsls	r3, r3, #28
 800333a:	4929      	ldr	r1, [pc, #164]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d028      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800334e:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	0e1b      	lsrs	r3, r3, #24
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800335c:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	0c1b      	lsrs	r3, r3, #16
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	019a      	lsls	r2, r3, #6
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	431a      	orrs	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	071b      	lsls	r3, r3, #28
 8003382:	4917      	ldr	r1, [pc, #92]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800338c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	4911      	ldr	r1, [pc, #68]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033a0:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ac:	f7fd fdea 	bl	8000f84 <HAL_GetTick>
 80033b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033b4:	f7fd fde6 	bl	8000f84 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e007      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d2:	d1ef      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800

080033e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e049      	b.n	800348a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fc1c 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3304      	adds	r3, #4
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f000 fac0 	bl	80039a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d001      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e054      	b.n	8003556 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a26      	ldr	r2, [pc, #152]	; (8003564 <HAL_TIM_Base_Start_IT+0xd0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d022      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d6:	d01d      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a22      	ldr	r2, [pc, #136]	; (8003568 <HAL_TIM_Base_Start_IT+0xd4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d018      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a21      	ldr	r2, [pc, #132]	; (800356c <HAL_TIM_Base_Start_IT+0xd8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1f      	ldr	r2, [pc, #124]	; (8003570 <HAL_TIM_Base_Start_IT+0xdc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00e      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <HAL_TIM_Base_Start_IT+0xe0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <HAL_TIM_Base_Start_IT+0xe4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1b      	ldr	r2, [pc, #108]	; (800357c <HAL_TIM_Base_Start_IT+0xe8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d115      	bne.n	8003540 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_TIM_Base_Start_IT+0xec>)
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b06      	cmp	r3, #6
 8003524:	d015      	beq.n	8003552 <HAL_TIM_Base_Start_IT+0xbe>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d011      	beq.n	8003552 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353e:	e008      	b.n	8003552 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	e000      	b.n	8003554 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40010000 	.word	0x40010000
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	40000c00 	.word	0x40000c00
 8003574:	40010400 	.word	0x40010400
 8003578:	40014000 	.word	0x40014000
 800357c:	40001800 	.word	0x40001800
 8003580:	00010007 	.word	0x00010007

08003584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d122      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d11b      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0202 	mvn.w	r2, #2
 80035b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f9d0 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f9c2 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f9d3 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d122      	bne.n	8003634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d11b      	bne.n	8003634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0204 	mvn.w	r2, #4
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f9a6 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f998 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f9a9 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b08      	cmp	r3, #8
 8003640:	d122      	bne.n	8003688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b08      	cmp	r3, #8
 800364e:	d11b      	bne.n	8003688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0208 	mvn.w	r2, #8
 8003658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2204      	movs	r2, #4
 800365e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f97c 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 8003674:	e005      	b.n	8003682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f96e 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f97f 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b10      	cmp	r3, #16
 8003694:	d122      	bne.n	80036dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d11b      	bne.n	80036dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0210 	mvn.w	r2, #16
 80036ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2208      	movs	r2, #8
 80036b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f952 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 80036c8:	e005      	b.n	80036d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f944 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f955 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d107      	bne.n	8003708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0201 	mvn.w	r2, #1
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd f914 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b80      	cmp	r3, #128	; 0x80
 8003714:	d10e      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d107      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800372c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fb0c 	bl	8003d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003742:	d10e      	bne.n	8003762 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374e:	2b80      	cmp	r3, #128	; 0x80
 8003750:	d107      	bne.n	8003762 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800375a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 faff 	bl	8003d60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d10e      	bne.n	800378e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b40      	cmp	r3, #64	; 0x40
 800377c:	d107      	bne.n	800378e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f903 	bl	8003994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b20      	cmp	r3, #32
 800379a:	d10e      	bne.n	80037ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d107      	bne.n	80037ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f06f 0220 	mvn.w	r2, #32
 80037b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fabf 	bl	8003d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_TIM_ConfigClockSource+0x1c>
 80037dc:	2302      	movs	r3, #2
 80037de:	e0b4      	b.n	800394a <HAL_TIM_ConfigClockSource+0x186>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	4b56      	ldr	r3, [pc, #344]	; (8003954 <HAL_TIM_ConfigClockSource+0x190>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003818:	d03e      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0xd4>
 800381a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381e:	f200 8087 	bhi.w	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003826:	f000 8086 	beq.w	8003936 <HAL_TIM_ConfigClockSource+0x172>
 800382a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382e:	d87f      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b70      	cmp	r3, #112	; 0x70
 8003832:	d01a      	beq.n	800386a <HAL_TIM_ConfigClockSource+0xa6>
 8003834:	2b70      	cmp	r3, #112	; 0x70
 8003836:	d87b      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b60      	cmp	r3, #96	; 0x60
 800383a:	d050      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x11a>
 800383c:	2b60      	cmp	r3, #96	; 0x60
 800383e:	d877      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b50      	cmp	r3, #80	; 0x50
 8003842:	d03c      	beq.n	80038be <HAL_TIM_ConfigClockSource+0xfa>
 8003844:	2b50      	cmp	r3, #80	; 0x50
 8003846:	d873      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d058      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x13a>
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d86f      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003850:	2b30      	cmp	r3, #48	; 0x30
 8003852:	d064      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15a>
 8003854:	2b30      	cmp	r3, #48	; 0x30
 8003856:	d86b      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003858:	2b20      	cmp	r3, #32
 800385a:	d060      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15a>
 800385c:	2b20      	cmp	r3, #32
 800385e:	d867      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d05c      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15a>
 8003864:	2b10      	cmp	r3, #16
 8003866:	d05a      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15a>
 8003868:	e062      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6899      	ldr	r1, [r3, #8]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f000 f9af 	bl	8003bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800388c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	609a      	str	r2, [r3, #8]
      break;
 8003896:	e04f      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6899      	ldr	r1, [r3, #8]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f000 f998 	bl	8003bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ba:	609a      	str	r2, [r3, #8]
      break;
 80038bc:	e03c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 f90c 	bl	8003ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2150      	movs	r1, #80	; 0x50
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f965 	bl	8003ba6 <TIM_ITRx_SetConfig>
      break;
 80038dc:	e02c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f000 f92b 	bl	8003b46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2160      	movs	r1, #96	; 0x60
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f955 	bl	8003ba6 <TIM_ITRx_SetConfig>
      break;
 80038fc:	e01c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	461a      	mov	r2, r3
 800390c:	f000 f8ec 	bl	8003ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2140      	movs	r1, #64	; 0x40
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f945 	bl	8003ba6 <TIM_ITRx_SetConfig>
      break;
 800391c:	e00c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4619      	mov	r1, r3
 8003928:	4610      	mov	r0, r2
 800392a:	f000 f93c 	bl	8003ba6 <TIM_ITRx_SetConfig>
      break;
 800392e:	e003      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      break;
 8003934:	e000      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	fffeff88 	.word	0xfffeff88

08003958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a40      	ldr	r2, [pc, #256]	; (8003abc <TIM_Base_SetConfig+0x114>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d013      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c6:	d00f      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3d      	ldr	r2, [pc, #244]	; (8003ac0 <TIM_Base_SetConfig+0x118>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00b      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a3c      	ldr	r2, [pc, #240]	; (8003ac4 <TIM_Base_SetConfig+0x11c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d007      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a3b      	ldr	r2, [pc, #236]	; (8003ac8 <TIM_Base_SetConfig+0x120>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a3a      	ldr	r2, [pc, #232]	; (8003acc <TIM_Base_SetConfig+0x124>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d108      	bne.n	80039fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2f      	ldr	r2, [pc, #188]	; (8003abc <TIM_Base_SetConfig+0x114>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d02b      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a08:	d027      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a2c      	ldr	r2, [pc, #176]	; (8003ac0 <TIM_Base_SetConfig+0x118>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d023      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a2b      	ldr	r2, [pc, #172]	; (8003ac4 <TIM_Base_SetConfig+0x11c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d01f      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a2a      	ldr	r2, [pc, #168]	; (8003ac8 <TIM_Base_SetConfig+0x120>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01b      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a29      	ldr	r2, [pc, #164]	; (8003acc <TIM_Base_SetConfig+0x124>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d017      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a28      	ldr	r2, [pc, #160]	; (8003ad0 <TIM_Base_SetConfig+0x128>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a27      	ldr	r2, [pc, #156]	; (8003ad4 <TIM_Base_SetConfig+0x12c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00f      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <TIM_Base_SetConfig+0x130>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a25      	ldr	r2, [pc, #148]	; (8003adc <TIM_Base_SetConfig+0x134>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <TIM_Base_SetConfig+0x138>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a23      	ldr	r2, [pc, #140]	; (8003ae4 <TIM_Base_SetConfig+0x13c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <TIM_Base_SetConfig+0x114>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_Base_SetConfig+0xf8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <TIM_Base_SetConfig+0x124>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d103      	bne.n	8003aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	615a      	str	r2, [r3, #20]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40000c00 	.word	0x40000c00
 8003acc:	40010400 	.word	0x40010400
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800
 8003adc:	40001800 	.word	0x40001800
 8003ae0:	40001c00 	.word	0x40001c00
 8003ae4:	40002000 	.word	0x40002000

08003ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0201 	bic.w	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f023 030a 	bic.w	r3, r3, #10
 8003b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b087      	sub	sp, #28
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0210 	bic.w	r2, r3, #16
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	031b      	lsls	r3, r3, #12
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f043 0307 	orr.w	r3, r3, #7
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	609a      	str	r2, [r3, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e06d      	b.n	8003d10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a30      	ldr	r2, [pc, #192]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2f      	ldr	r2, [pc, #188]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d108      	bne.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d022      	beq.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d01d      	beq.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d018      	beq.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1c      	ldr	r2, [pc, #112]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00e      	beq.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a15      	ldr	r2, [pc, #84]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d10c      	bne.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40010400 	.word	0x40010400
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40000800 	.word	0x40000800
 8003d2c:	40000c00 	.word	0x40000c00
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40001800 	.word	0x40001800

08003d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e040      	b.n	8003e08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fc ffac 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	; 0x24
 8003da0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f82c 	bl	8003e10 <UART_SetConfig>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e022      	b.n	8003e08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa82 	bl	80042d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fb09 	bl	8004418 <UART_CheckIdleState>
 8003e06:	4603      	mov	r3, r0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4ba7      	ldr	r3, [pc, #668]	; (80040d8 <UART_SetConfig+0x2c8>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	6979      	ldr	r1, [r7, #20]
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a95      	ldr	r2, [pc, #596]	; (80040dc <UART_SetConfig+0x2cc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d120      	bne.n	8003ece <UART_SetConfig+0xbe>
 8003e8c:	4b94      	ldr	r3, [pc, #592]	; (80040e0 <UART_SetConfig+0x2d0>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d816      	bhi.n	8003ec8 <UART_SetConfig+0xb8>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <UART_SetConfig+0x90>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003ebd 	.word	0x08003ebd
 8003ea8:	08003eb7 	.word	0x08003eb7
 8003eac:	08003ec3 	.word	0x08003ec3
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e14f      	b.n	8004156 <UART_SetConfig+0x346>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e14c      	b.n	8004156 <UART_SetConfig+0x346>
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e149      	b.n	8004156 <UART_SetConfig+0x346>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e146      	b.n	8004156 <UART_SetConfig+0x346>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e143      	b.n	8004156 <UART_SetConfig+0x346>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a84      	ldr	r2, [pc, #528]	; (80040e4 <UART_SetConfig+0x2d4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d132      	bne.n	8003f3e <UART_SetConfig+0x12e>
 8003ed8:	4b81      	ldr	r3, [pc, #516]	; (80040e0 <UART_SetConfig+0x2d0>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d828      	bhi.n	8003f38 <UART_SetConfig+0x128>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <UART_SetConfig+0xdc>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f21 	.word	0x08003f21
 8003ef0:	08003f39 	.word	0x08003f39
 8003ef4:	08003f39 	.word	0x08003f39
 8003ef8:	08003f39 	.word	0x08003f39
 8003efc:	08003f2d 	.word	0x08003f2d
 8003f00:	08003f39 	.word	0x08003f39
 8003f04:	08003f39 	.word	0x08003f39
 8003f08:	08003f39 	.word	0x08003f39
 8003f0c:	08003f27 	.word	0x08003f27
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f39 	.word	0x08003f39
 8003f1c:	08003f33 	.word	0x08003f33
 8003f20:	2300      	movs	r3, #0
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e117      	b.n	8004156 <UART_SetConfig+0x346>
 8003f26:	2302      	movs	r3, #2
 8003f28:	77fb      	strb	r3, [r7, #31]
 8003f2a:	e114      	b.n	8004156 <UART_SetConfig+0x346>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e111      	b.n	8004156 <UART_SetConfig+0x346>
 8003f32:	2308      	movs	r3, #8
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e10e      	b.n	8004156 <UART_SetConfig+0x346>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e10b      	b.n	8004156 <UART_SetConfig+0x346>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a69      	ldr	r2, [pc, #420]	; (80040e8 <UART_SetConfig+0x2d8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d120      	bne.n	8003f8a <UART_SetConfig+0x17a>
 8003f48:	4b65      	ldr	r3, [pc, #404]	; (80040e0 <UART_SetConfig+0x2d0>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f52:	2b30      	cmp	r3, #48	; 0x30
 8003f54:	d013      	beq.n	8003f7e <UART_SetConfig+0x16e>
 8003f56:	2b30      	cmp	r3, #48	; 0x30
 8003f58:	d814      	bhi.n	8003f84 <UART_SetConfig+0x174>
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d009      	beq.n	8003f72 <UART_SetConfig+0x162>
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d810      	bhi.n	8003f84 <UART_SetConfig+0x174>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <UART_SetConfig+0x15c>
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d006      	beq.n	8003f78 <UART_SetConfig+0x168>
 8003f6a:	e00b      	b.n	8003f84 <UART_SetConfig+0x174>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e0f1      	b.n	8004156 <UART_SetConfig+0x346>
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e0ee      	b.n	8004156 <UART_SetConfig+0x346>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e0eb      	b.n	8004156 <UART_SetConfig+0x346>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e0e8      	b.n	8004156 <UART_SetConfig+0x346>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e0e5      	b.n	8004156 <UART_SetConfig+0x346>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a57      	ldr	r2, [pc, #348]	; (80040ec <UART_SetConfig+0x2dc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d120      	bne.n	8003fd6 <UART_SetConfig+0x1c6>
 8003f94:	4b52      	ldr	r3, [pc, #328]	; (80040e0 <UART_SetConfig+0x2d0>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003fa0:	d013      	beq.n	8003fca <UART_SetConfig+0x1ba>
 8003fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fa4:	d814      	bhi.n	8003fd0 <UART_SetConfig+0x1c0>
 8003fa6:	2b80      	cmp	r3, #128	; 0x80
 8003fa8:	d009      	beq.n	8003fbe <UART_SetConfig+0x1ae>
 8003faa:	2b80      	cmp	r3, #128	; 0x80
 8003fac:	d810      	bhi.n	8003fd0 <UART_SetConfig+0x1c0>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <UART_SetConfig+0x1a8>
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	d006      	beq.n	8003fc4 <UART_SetConfig+0x1b4>
 8003fb6:	e00b      	b.n	8003fd0 <UART_SetConfig+0x1c0>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e0cb      	b.n	8004156 <UART_SetConfig+0x346>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e0c8      	b.n	8004156 <UART_SetConfig+0x346>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e0c5      	b.n	8004156 <UART_SetConfig+0x346>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e0c2      	b.n	8004156 <UART_SetConfig+0x346>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e0bf      	b.n	8004156 <UART_SetConfig+0x346>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a45      	ldr	r2, [pc, #276]	; (80040f0 <UART_SetConfig+0x2e0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d125      	bne.n	800402c <UART_SetConfig+0x21c>
 8003fe0:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <UART_SetConfig+0x2d0>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fee:	d017      	beq.n	8004020 <UART_SetConfig+0x210>
 8003ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff4:	d817      	bhi.n	8004026 <UART_SetConfig+0x216>
 8003ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffa:	d00b      	beq.n	8004014 <UART_SetConfig+0x204>
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004000:	d811      	bhi.n	8004026 <UART_SetConfig+0x216>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <UART_SetConfig+0x1fe>
 8004006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400a:	d006      	beq.n	800401a <UART_SetConfig+0x20a>
 800400c:	e00b      	b.n	8004026 <UART_SetConfig+0x216>
 800400e:	2300      	movs	r3, #0
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e0a0      	b.n	8004156 <UART_SetConfig+0x346>
 8004014:	2302      	movs	r3, #2
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e09d      	b.n	8004156 <UART_SetConfig+0x346>
 800401a:	2304      	movs	r3, #4
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e09a      	b.n	8004156 <UART_SetConfig+0x346>
 8004020:	2308      	movs	r3, #8
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e097      	b.n	8004156 <UART_SetConfig+0x346>
 8004026:	2310      	movs	r3, #16
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	e094      	b.n	8004156 <UART_SetConfig+0x346>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a30      	ldr	r2, [pc, #192]	; (80040f4 <UART_SetConfig+0x2e4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d125      	bne.n	8004082 <UART_SetConfig+0x272>
 8004036:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <UART_SetConfig+0x2d0>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004044:	d017      	beq.n	8004076 <UART_SetConfig+0x266>
 8004046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800404a:	d817      	bhi.n	800407c <UART_SetConfig+0x26c>
 800404c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004050:	d00b      	beq.n	800406a <UART_SetConfig+0x25a>
 8004052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004056:	d811      	bhi.n	800407c <UART_SetConfig+0x26c>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <UART_SetConfig+0x254>
 800405c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004060:	d006      	beq.n	8004070 <UART_SetConfig+0x260>
 8004062:	e00b      	b.n	800407c <UART_SetConfig+0x26c>
 8004064:	2301      	movs	r3, #1
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e075      	b.n	8004156 <UART_SetConfig+0x346>
 800406a:	2302      	movs	r3, #2
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e072      	b.n	8004156 <UART_SetConfig+0x346>
 8004070:	2304      	movs	r3, #4
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e06f      	b.n	8004156 <UART_SetConfig+0x346>
 8004076:	2308      	movs	r3, #8
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e06c      	b.n	8004156 <UART_SetConfig+0x346>
 800407c:	2310      	movs	r3, #16
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e069      	b.n	8004156 <UART_SetConfig+0x346>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <UART_SetConfig+0x2e8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d137      	bne.n	80040fc <UART_SetConfig+0x2ec>
 800408c:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <UART_SetConfig+0x2d0>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004096:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800409a:	d017      	beq.n	80040cc <UART_SetConfig+0x2bc>
 800409c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040a0:	d817      	bhi.n	80040d2 <UART_SetConfig+0x2c2>
 80040a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a6:	d00b      	beq.n	80040c0 <UART_SetConfig+0x2b0>
 80040a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ac:	d811      	bhi.n	80040d2 <UART_SetConfig+0x2c2>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <UART_SetConfig+0x2aa>
 80040b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b6:	d006      	beq.n	80040c6 <UART_SetConfig+0x2b6>
 80040b8:	e00b      	b.n	80040d2 <UART_SetConfig+0x2c2>
 80040ba:	2300      	movs	r3, #0
 80040bc:	77fb      	strb	r3, [r7, #31]
 80040be:	e04a      	b.n	8004156 <UART_SetConfig+0x346>
 80040c0:	2302      	movs	r3, #2
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e047      	b.n	8004156 <UART_SetConfig+0x346>
 80040c6:	2304      	movs	r3, #4
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e044      	b.n	8004156 <UART_SetConfig+0x346>
 80040cc:	2308      	movs	r3, #8
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e041      	b.n	8004156 <UART_SetConfig+0x346>
 80040d2:	2310      	movs	r3, #16
 80040d4:	77fb      	strb	r3, [r7, #31]
 80040d6:	e03e      	b.n	8004156 <UART_SetConfig+0x346>
 80040d8:	efff69f3 	.word	0xefff69f3
 80040dc:	40011000 	.word	0x40011000
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40004400 	.word	0x40004400
 80040e8:	40004800 	.word	0x40004800
 80040ec:	40004c00 	.word	0x40004c00
 80040f0:	40005000 	.word	0x40005000
 80040f4:	40011400 	.word	0x40011400
 80040f8:	40007800 	.word	0x40007800
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a71      	ldr	r2, [pc, #452]	; (80042c8 <UART_SetConfig+0x4b8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d125      	bne.n	8004152 <UART_SetConfig+0x342>
 8004106:	4b71      	ldr	r3, [pc, #452]	; (80042cc <UART_SetConfig+0x4bc>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004110:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004114:	d017      	beq.n	8004146 <UART_SetConfig+0x336>
 8004116:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800411a:	d817      	bhi.n	800414c <UART_SetConfig+0x33c>
 800411c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004120:	d00b      	beq.n	800413a <UART_SetConfig+0x32a>
 8004122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004126:	d811      	bhi.n	800414c <UART_SetConfig+0x33c>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <UART_SetConfig+0x324>
 800412c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004130:	d006      	beq.n	8004140 <UART_SetConfig+0x330>
 8004132:	e00b      	b.n	800414c <UART_SetConfig+0x33c>
 8004134:	2300      	movs	r3, #0
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e00d      	b.n	8004156 <UART_SetConfig+0x346>
 800413a:	2302      	movs	r3, #2
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e00a      	b.n	8004156 <UART_SetConfig+0x346>
 8004140:	2304      	movs	r3, #4
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e007      	b.n	8004156 <UART_SetConfig+0x346>
 8004146:	2308      	movs	r3, #8
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e004      	b.n	8004156 <UART_SetConfig+0x346>
 800414c:	2310      	movs	r3, #16
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e001      	b.n	8004156 <UART_SetConfig+0x346>
 8004152:	2310      	movs	r3, #16
 8004154:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415e:	d15a      	bne.n	8004216 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004160:	7ffb      	ldrb	r3, [r7, #31]
 8004162:	2b08      	cmp	r3, #8
 8004164:	d827      	bhi.n	80041b6 <UART_SetConfig+0x3a6>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <UART_SetConfig+0x35c>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	08004191 	.word	0x08004191
 8004170:	08004199 	.word	0x08004199
 8004174:	080041a1 	.word	0x080041a1
 8004178:	080041b7 	.word	0x080041b7
 800417c:	080041a7 	.word	0x080041a7
 8004180:	080041b7 	.word	0x080041b7
 8004184:	080041b7 	.word	0x080041b7
 8004188:	080041b7 	.word	0x080041b7
 800418c:	080041af 	.word	0x080041af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004190:	f7fe fcd8 	bl	8002b44 <HAL_RCC_GetPCLK1Freq>
 8004194:	61b8      	str	r0, [r7, #24]
        break;
 8004196:	e013      	b.n	80041c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004198:	f7fe fce8 	bl	8002b6c <HAL_RCC_GetPCLK2Freq>
 800419c:	61b8      	str	r0, [r7, #24]
        break;
 800419e:	e00f      	b.n	80041c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a0:	4b4b      	ldr	r3, [pc, #300]	; (80042d0 <UART_SetConfig+0x4c0>)
 80041a2:	61bb      	str	r3, [r7, #24]
        break;
 80041a4:	e00c      	b.n	80041c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041a6:	f7fe fbdf 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 80041aa:	61b8      	str	r0, [r7, #24]
        break;
 80041ac:	e008      	b.n	80041c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b2:	61bb      	str	r3, [r7, #24]
        break;
 80041b4:	e004      	b.n	80041c0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	77bb      	strb	r3, [r7, #30]
        break;
 80041be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d074      	beq.n	80042b0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	005a      	lsls	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	441a      	add	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b0f      	cmp	r3, #15
 80041e0:	d916      	bls.n	8004210 <UART_SetConfig+0x400>
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d212      	bcs.n	8004210 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f023 030f 	bic.w	r3, r3, #15
 80041f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	b29a      	uxth	r2, r3
 8004200:	89fb      	ldrh	r3, [r7, #14]
 8004202:	4313      	orrs	r3, r2
 8004204:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	89fa      	ldrh	r2, [r7, #14]
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	e04f      	b.n	80042b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	77bb      	strb	r3, [r7, #30]
 8004214:	e04c      	b.n	80042b0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004216:	7ffb      	ldrb	r3, [r7, #31]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d828      	bhi.n	800426e <UART_SetConfig+0x45e>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0x414>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004249 	.word	0x08004249
 8004228:	08004251 	.word	0x08004251
 800422c:	08004259 	.word	0x08004259
 8004230:	0800426f 	.word	0x0800426f
 8004234:	0800425f 	.word	0x0800425f
 8004238:	0800426f 	.word	0x0800426f
 800423c:	0800426f 	.word	0x0800426f
 8004240:	0800426f 	.word	0x0800426f
 8004244:	08004267 	.word	0x08004267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004248:	f7fe fc7c 	bl	8002b44 <HAL_RCC_GetPCLK1Freq>
 800424c:	61b8      	str	r0, [r7, #24]
        break;
 800424e:	e013      	b.n	8004278 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004250:	f7fe fc8c 	bl	8002b6c <HAL_RCC_GetPCLK2Freq>
 8004254:	61b8      	str	r0, [r7, #24]
        break;
 8004256:	e00f      	b.n	8004278 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004258:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <UART_SetConfig+0x4c0>)
 800425a:	61bb      	str	r3, [r7, #24]
        break;
 800425c:	e00c      	b.n	8004278 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425e:	f7fe fb83 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8004262:	61b8      	str	r0, [r7, #24]
        break;
 8004264:	e008      	b.n	8004278 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426a:	61bb      	str	r3, [r7, #24]
        break;
 800426c:	e004      	b.n	8004278 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	77bb      	strb	r3, [r7, #30]
        break;
 8004276:	bf00      	nop
    }

    if (pclk != 0U)
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d018      	beq.n	80042b0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	085a      	lsrs	r2, r3, #1
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	441a      	add	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b0f      	cmp	r3, #15
 8004296:	d909      	bls.n	80042ac <UART_SetConfig+0x49c>
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d205      	bcs.n	80042ac <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	e001      	b.n	80042b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40007c00 	.word	0x40007c00
 80042cc:	40023800 	.word	0x40023800
 80042d0:	00f42400 	.word	0x00f42400

080042d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01a      	beq.n	80043ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d2:	d10a      	bne.n	80043ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
  }
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af02      	add	r7, sp, #8
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004428:	f7fc fdac 	bl	8000f84 <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d10e      	bne.n	800445a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800443c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f82d 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e023      	b.n	80044a2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b04      	cmp	r3, #4
 8004466:	d10e      	bne.n	8004486 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f817 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e00d      	b.n	80044a2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b09c      	sub	sp, #112	; 0x70
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	4613      	mov	r3, r2
 80044b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ba:	e0a5      	b.n	8004608 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	f000 80a1 	beq.w	8004608 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fc fd5d 	bl	8000f84 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <UART_WaitOnFlagUntilTimeout+0x32>
 80044d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d13e      	bne.n	800455a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044f0:	667b      	str	r3, [r7, #100]	; 0x64
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004500:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e6      	bne.n	80044dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3308      	adds	r3, #8
 8004514:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	663b      	str	r3, [r7, #96]	; 0x60
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3308      	adds	r3, #8
 800452c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800452e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004530:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800453c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e5      	bne.n	800450e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e067      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d04f      	beq.n	8004608 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004576:	d147      	bne.n	8004608 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004580:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004596:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a0:	637b      	str	r3, [r7, #52]	; 0x34
 80045a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e6      	bne.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3308      	adds	r3, #8
 80045ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	613b      	str	r3, [r7, #16]
   return(result);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3308      	adds	r3, #8
 80045d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045d4:	623a      	str	r2, [r7, #32]
 80045d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	69f9      	ldr	r1, [r7, #28]
 80045da:	6a3a      	ldr	r2, [r7, #32]
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e5      	bne.n	80045b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e010      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4013      	ands	r3, r2
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	429a      	cmp	r2, r3
 8004624:	f43f af4a 	beq.w	80044bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3770      	adds	r7, #112	; 0x70
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004634:	b084      	sub	sp, #16
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	f107 001c 	add.w	r0, r7, #28
 8004642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	2b01      	cmp	r3, #1
 800464a:	d120      	bne.n	800468e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <USB_CoreInit+0xac>)
 800465e:	4013      	ands	r3, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d105      	bne.n	8004682 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa92 	bl	8004bac <USB_CoreReset>
 8004688:	4603      	mov	r3, r0
 800468a:	73fb      	strb	r3, [r7, #15]
 800468c:	e010      	b.n	80046b0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa86 	bl	8004bac <USB_CoreReset>
 80046a0:	4603      	mov	r3, r0
 80046a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d10b      	bne.n	80046ce <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f043 0206 	orr.w	r2, r3, #6
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046da:	b004      	add	sp, #16
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	ffbdffbf 	.word	0xffbdffbf

080046e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 0201 	bic.w	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	460b      	mov	r3, r1
 8004710:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d115      	bne.n	8004754 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004734:	2001      	movs	r0, #1
 8004736:	f7fc fc31 	bl	8000f9c <HAL_Delay>
      ms++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3301      	adds	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fa25 	bl	8004b90 <USB_GetMode>
 8004746:	4603      	mov	r3, r0
 8004748:	2b01      	cmp	r3, #1
 800474a:	d01e      	beq.n	800478a <USB_SetCurrentMode+0x84>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b31      	cmp	r3, #49	; 0x31
 8004750:	d9f0      	bls.n	8004734 <USB_SetCurrentMode+0x2e>
 8004752:	e01a      	b.n	800478a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d115      	bne.n	8004786 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004766:	2001      	movs	r0, #1
 8004768:	f7fc fc18 	bl	8000f9c <HAL_Delay>
      ms++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fa0c 	bl	8004b90 <USB_GetMode>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <USB_SetCurrentMode+0x84>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b31      	cmp	r3, #49	; 0x31
 8004782:	d9f0      	bls.n	8004766 <USB_SetCurrentMode+0x60>
 8004784:	e001      	b.n	800478a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e005      	b.n	8004796 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b32      	cmp	r3, #50	; 0x32
 800478e:	d101      	bne.n	8004794 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047a0:	b084      	sub	sp, #16
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b086      	sub	sp, #24
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	e009      	b.n	80047d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	3340      	adds	r3, #64	; 0x40
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	2200      	movs	r2, #0
 80047cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	3301      	adds	r3, #1
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	2b0e      	cmp	r3, #14
 80047d8:	d9f2      	bls.n	80047c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d11c      	bne.n	800481a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ee:	f043 0302 	orr.w	r3, r3, #2
 80047f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e005      	b.n	8004826 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800482c:	461a      	mov	r2, r3
 800482e:	2300      	movs	r3, #0
 8004830:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004838:	4619      	mov	r1, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004840:	461a      	mov	r2, r3
 8004842:	680b      	ldr	r3, [r1, #0]
 8004844:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	2b01      	cmp	r3, #1
 800484a:	d10c      	bne.n	8004866 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004852:	2100      	movs	r1, #0
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f961 	bl	8004b1c <USB_SetDevSpeed>
 800485a:	e008      	b.n	800486e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800485c:	2101      	movs	r1, #1
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f95c 	bl	8004b1c <USB_SetDevSpeed>
 8004864:	e003      	b.n	800486e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004866:	2103      	movs	r1, #3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f957 	bl	8004b1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800486e:	2110      	movs	r1, #16
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f8f3 	bl	8004a5c <USB_FlushTxFifo>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f91d 	bl	8004ac0 <USB_FlushRxFifo>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004896:	461a      	mov	r2, r3
 8004898:	2300      	movs	r3, #0
 800489a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	461a      	mov	r2, r3
 80048a4:	2300      	movs	r3, #0
 80048a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ae:	461a      	mov	r2, r3
 80048b0:	2300      	movs	r3, #0
 80048b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	e043      	b.n	8004942 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d0:	d118      	bne.n	8004904 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	461a      	mov	r2, r3
 80048e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	e013      	b.n	8004916 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fa:	461a      	mov	r2, r3
 80048fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e008      	b.n	8004916 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	461a      	mov	r2, r3
 8004912:	2300      	movs	r3, #0
 8004914:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004922:	461a      	mov	r2, r3
 8004924:	2300      	movs	r3, #0
 8004926:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	461a      	mov	r2, r3
 8004936:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800493a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	3301      	adds	r3, #1
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	429a      	cmp	r2, r3
 8004948:	d3b7      	bcc.n	80048ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	e043      	b.n	80049d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004966:	d118      	bne.n	800499a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497a:	461a      	mov	r2, r3
 800497c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e013      	b.n	80049ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004990:	461a      	mov	r2, r3
 8004992:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	e008      	b.n	80049ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	461a      	mov	r2, r3
 80049a8:	2300      	movs	r3, #0
 80049aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b8:	461a      	mov	r2, r3
 80049ba:	2300      	movs	r3, #0
 80049bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	3301      	adds	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d3b7      	bcc.n	8004950 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d105      	bne.n	8004a14 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f043 0210 	orr.w	r2, r3, #16
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <USB_DevInit+0x2b4>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f043 0208 	orr.w	r2, r3, #8
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d105      	bne.n	8004a44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <USB_DevInit+0x2b8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a50:	b004      	add	sp, #16
 8004a52:	4770      	bx	lr
 8004a54:	803c3800 	.word	0x803c3800
 8004a58:	40000004 	.word	0x40000004

08004a5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	4a12      	ldr	r2, [pc, #72]	; (8004abc <USB_FlushTxFifo+0x60>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e01a      	b.n	8004ab0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	daf3      	bge.n	8004a6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	019b      	lsls	r3, r3, #6
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3301      	adds	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	4a08      	ldr	r2, [pc, #32]	; (8004abc <USB_FlushTxFifo+0x60>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e006      	b.n	8004ab0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d0f1      	beq.n	8004a92 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	00030d40 	.word	0x00030d40

08004ac0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	4a11      	ldr	r2, [pc, #68]	; (8004b18 <USB_FlushRxFifo+0x58>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e017      	b.n	8004b0c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	daf3      	bge.n	8004acc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2210      	movs	r2, #16
 8004aec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3301      	adds	r3, #1
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <USB_FlushRxFifo+0x58>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e006      	b.n	8004b0c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d0f1      	beq.n	8004aee <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	00030d40 	.word	0x00030d40

08004b1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	68f9      	ldr	r1, [r7, #12]
 8004b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b68:	f023 0303 	bic.w	r3, r3, #3
 8004b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b7c:	f043 0302 	orr.w	r3, r3, #2
 8004b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <USB_CoreReset+0x60>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e01a      	b.n	8004bfe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	daf3      	bge.n	8004bb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f043 0201 	orr.w	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3301      	adds	r3, #1
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <USB_CoreReset+0x60>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e006      	b.n	8004bfe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d0f1      	beq.n	8004be0 <USB_CoreReset+0x34>

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	00030d40 	.word	0x00030d40

08004c10 <__libc_init_array>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4d0d      	ldr	r5, [pc, #52]	; (8004c48 <__libc_init_array+0x38>)
 8004c14:	4c0d      	ldr	r4, [pc, #52]	; (8004c4c <__libc_init_array+0x3c>)
 8004c16:	1b64      	subs	r4, r4, r5
 8004c18:	10a4      	asrs	r4, r4, #2
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	42a6      	cmp	r6, r4
 8004c1e:	d109      	bne.n	8004c34 <__libc_init_array+0x24>
 8004c20:	4d0b      	ldr	r5, [pc, #44]	; (8004c50 <__libc_init_array+0x40>)
 8004c22:	4c0c      	ldr	r4, [pc, #48]	; (8004c54 <__libc_init_array+0x44>)
 8004c24:	f000 f820 	bl	8004c68 <_init>
 8004c28:	1b64      	subs	r4, r4, r5
 8004c2a:	10a4      	asrs	r4, r4, #2
 8004c2c:	2600      	movs	r6, #0
 8004c2e:	42a6      	cmp	r6, r4
 8004c30:	d105      	bne.n	8004c3e <__libc_init_array+0x2e>
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c38:	4798      	blx	r3
 8004c3a:	3601      	adds	r6, #1
 8004c3c:	e7ee      	b.n	8004c1c <__libc_init_array+0xc>
 8004c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c42:	4798      	blx	r3
 8004c44:	3601      	adds	r6, #1
 8004c46:	e7f2      	b.n	8004c2e <__libc_init_array+0x1e>
 8004c48:	08004ca0 	.word	0x08004ca0
 8004c4c:	08004ca0 	.word	0x08004ca0
 8004c50:	08004ca0 	.word	0x08004ca0
 8004c54:	08004ca4 	.word	0x08004ca4

08004c58 <memset>:
 8004c58:	4402      	add	r2, r0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d100      	bne.n	8004c62 <memset+0xa>
 8004c60:	4770      	bx	lr
 8004c62:	f803 1b01 	strb.w	r1, [r3], #1
 8004c66:	e7f9      	b.n	8004c5c <memset+0x4>

08004c68 <_init>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	bf00      	nop
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr

08004c74 <_fini>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	bf00      	nop
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr
