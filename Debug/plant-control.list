
plant-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d54  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007748  08007748  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007750  08007750  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007754  08007754  00017754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009fc  20000078  080077d0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a74  080077d0  00020a74  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022b7a  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000458f  00000000  00000000  00042c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  000471b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  00048978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c678  00000000  00000000  00049f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000209df  00000000  00000000  000765b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106423  00000000  00000000  00096f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019d3ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065fc  00000000  00000000  0019d410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08006f3c 	.word	0x08006f3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08006f3c 	.word	0x08006f3c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <lerp>:
#include "WS9527.h"

uint16_t WS9527_Reading_ADC;
uint16_t WS9527_Reading;

float lerp(uint16_t v0, uint32_t v1, float t) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005e6:	81fb      	strh	r3, [r7, #14]
	return (1 - t) * v0 + t * v1;
 80005e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80005f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f4:	89fb      	ldrh	r3, [r7, #14]
 80005f6:	ee07 3a90 	vmov	s15, r3
 80005fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800060c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000614:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000618:	eeb0 0a67 	vmov.f32	s0, s15
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <WS9527_Initialize>:

void WS9527_Initialize() {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <WS9527_Initialize+0x10>)
 800062e:	f001 f8d9 	bl	80017e4 <HAL_ADC_Start_IT>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200004ac 	.word	0x200004ac

0800063c <WS9527_StartReadings>:

void WS9527_StartReadings() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <WS9527_StartReadings+0x10>)
 8000642:	f001 f8cf 	bl	80017e4 <HAL_ADC_Start_IT>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200004ac 	.word	0x200004ac

08000650 <WS9527_GetReadings>:

void WS9527_GetReadings(ADC_HandleTypeDef *hadc) {
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	/* first we lerp everything out and then scale the result by 18  *
	 * that's because maximally moist soil gives the reading of 1800 *
	 * so 1% is the reading divided by 18                            */
	if (hadc->Instance == ADC1) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <WS9527_GetReadings+0x58>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d11d      	bne.n	800069e <WS9527_GetReadings+0x4e>
		WS9527_Reading_ADC = (int) lerp(WS9527_Reading_ADC,
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <WS9527_GetReadings+0x5c>)
 8000664:	881c      	ldrh	r4, [r3, #0]
 8000666:	4812      	ldr	r0, [pc, #72]	; (80006b0 <WS9527_GetReadings+0x60>)
 8000668:	f001 faa4 	bl	8001bb4 <HAL_ADC_GetValue>
 800066c:	4603      	mov	r3, r0
 800066e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80006b4 <WS9527_GetReadings+0x64>
 8000672:	4619      	mov	r1, r3
 8000674:	4620      	mov	r0, r4
 8000676:	f7ff ffaf 	bl	80005d8 <lerp>
 800067a:	eef0 7a40 	vmov.f32	s15, s0
 800067e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000682:	ee17 3a90 	vmov	r3, s15
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <WS9527_GetReadings+0x5c>)
 800068a:	801a      	strh	r2, [r3, #0]
				HAL_ADC_GetValue(&hadc1), 0.001);
		WS9527_Reading = WS9527_Reading_ADC / 18;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <WS9527_GetReadings+0x5c>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <WS9527_GetReadings+0x68>)
 8000692:	fba2 2303 	umull	r2, r3, r2, r3
 8000696:	089b      	lsrs	r3, r3, #2
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <WS9527_GetReadings+0x6c>)
 800069c:	801a      	strh	r2, [r3, #0]
	}
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40012000 	.word	0x40012000
 80006ac:	200004a8 	.word	0x200004a8
 80006b0:	200004ac 	.word	0x200004ac
 80006b4:	3a83126f 	.word	0x3a83126f
 80006b8:	38e38e39 	.word	0x38e38e39
 80006bc:	200004aa 	.word	0x200004aa

080006c0 <MX_ADC1_Init>:
/* USER CODE END 0 */

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006de:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_ADC1_Init+0x98>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_ADC1_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_ADC1_Init+0x98>)
 8000722:	f001 f81b 	bl	800175c <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x70>
		Error_Handler();
 800072c:	f000 fb04 	bl	8000d38 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000734:	2301      	movs	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_ADC1_Init+0x98>)
 8000742:	f001 fa59 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x90>
		Error_Handler();
 800074c:	f000 faf4 	bl	8000d38 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200004ac 	.word	0x200004ac
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
	if (adcHandle->Instance == ADC1) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <HAL_ADC_MspInit+0x84>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d12b      	bne.n	80007de <HAL_ADC_MspInit+0x7a>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_ADC_MspInit+0x88>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <HAL_ADC_MspInit+0x88>)
 800078c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <HAL_ADC_MspInit+0x88>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA0/WKUP     ------> ADC1_IN0
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b6:	2301      	movs	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_ADC_MspInit+0x8c>)
 80007ca:	f001 fe13 	bl	80023f4 <HAL_GPIO_Init>

		/* ADC1 interrupt Init */
		HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2012      	movs	r0, #18
 80007d4:	f001 fd45 	bl	8002262 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007d8:	2012      	movs	r0, #18
 80007da:	f001 fd5e 	bl	800229a <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40012000 	.word	0x40012000
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000

080007f4 <splash>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

void splash() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	ssd1306_Fill(White);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f000 faf1 	bl	8000de0 <ssd1306_Fill>
//	    ssd1306_DrawBitmap(0, 0, garfield1_128x64, 128, 64, White);
	ssd1306_SetCursor(30, 30);
 80007fe:	211e      	movs	r1, #30
 8000800:	201e      	movs	r0, #30
 8000802:	f000 fc3b 	bl	800107c <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000806:	2000      	movs	r0, #0
 8000808:	f000 faea 	bl	8000de0 <ssd1306_Fill>
	ssd1306_WriteString("plant control", Font_7x10, White);
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <splash+0x2c>)
 800080e:	2301      	movs	r3, #1
 8000810:	ca06      	ldmia	r2, {r1, r2}
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <splash+0x30>)
 8000814:	f000 fc0c 	bl	8001030 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000818:	f000 fb06 	bl	8000e28 <ssd1306_UpdateScreen>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	08006f54 	.word	0x08006f54

08000828 <display_measurements>:

void display_measurements(uint16_t moisture) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
	char moisture_data[15];
	sprintf(moisture_data, "moisture: %03d", moisture);
 8000832:	88fa      	ldrh	r2, [r7, #6]
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	490b      	ldr	r1, [pc, #44]	; (8000868 <display_measurements+0x40>)
 800083a:	4618      	mov	r0, r3
 800083c:	f005 ff78 	bl	8006730 <siprintf>
	ssd1306_SetCursor(30, 30);
 8000840:	211e      	movs	r1, #30
 8000842:	201e      	movs	r0, #30
 8000844:	f000 fc1a 	bl	800107c <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000848:	2000      	movs	r0, #0
 800084a:	f000 fac9 	bl	8000de0 <ssd1306_Fill>
	ssd1306_WriteString(moisture_data, Font_7x10, White);
 800084e:	4a07      	ldr	r2, [pc, #28]	; (800086c <display_measurements+0x44>)
 8000850:	f107 0008 	add.w	r0, r7, #8
 8000854:	2301      	movs	r3, #1
 8000856:	ca06      	ldmia	r2, {r1, r2}
 8000858:	f000 fbea 	bl	8001030 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800085c:	f000 fae4 	bl	8000e28 <ssd1306_UpdateScreen>
}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	08006f64 	.word	0x08006f64
 800086c:	20000000 	.word	0x20000000

08000870 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a67      	ldr	r2, [pc, #412]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b65      	ldr	r3, [pc, #404]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	4b62      	ldr	r3, [pc, #392]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a61      	ldr	r2, [pc, #388]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b5f      	ldr	r3, [pc, #380]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b5c      	ldr	r3, [pc, #368]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a5b      	ldr	r2, [pc, #364]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b59      	ldr	r3, [pc, #356]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b56      	ldr	r3, [pc, #344]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a55      	ldr	r2, [pc, #340]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b53      	ldr	r3, [pc, #332]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	4b50      	ldr	r3, [pc, #320]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a4f      	ldr	r2, [pc, #316]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008ec:	f043 0308 	orr.w	r3, r3, #8
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b4d      	ldr	r3, [pc, #308]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0308 	and.w	r3, r3, #8
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fe:	4b4a      	ldr	r3, [pc, #296]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a49      	ldr	r2, [pc, #292]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <MX_GPIO_Init+0x1b8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f244 0181 	movw	r1, #16513	; 0x4081
 800091c:	4843      	ldr	r0, [pc, #268]	; (8000a2c <MX_GPIO_Init+0x1bc>)
 800091e:	f001 ff15 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2140      	movs	r1, #64	; 0x40
 8000926:	4842      	ldr	r0, [pc, #264]	; (8000a30 <MX_GPIO_Init+0x1c0>)
 8000928:	f001 ff10 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800092c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000932:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	483c      	ldr	r0, [pc, #240]	; (8000a34 <MX_GPIO_Init+0x1c4>)
 8000944:	f001 fd56 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000948:	2332      	movs	r3, #50	; 0x32
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000958:	230b      	movs	r3, #11
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4834      	ldr	r0, [pc, #208]	; (8000a34 <MX_GPIO_Init+0x1c4>)
 8000964:	f001 fd46 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000968:	2386      	movs	r3, #134	; 0x86
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000978:	230b      	movs	r3, #11
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	482d      	ldr	r0, [pc, #180]	; (8000a38 <MX_GPIO_Init+0x1c8>)
 8000984:	f001 fd36 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000988:	f244 0381 	movw	r3, #16513	; 0x4081
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4822      	ldr	r0, [pc, #136]	; (8000a2c <MX_GPIO_Init+0x1bc>)
 80009a2:	f001 fd27 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b8:	230b      	movs	r3, #11
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	481a      	ldr	r0, [pc, #104]	; (8000a2c <MX_GPIO_Init+0x1bc>)
 80009c4:	f001 fd16 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4814      	ldr	r0, [pc, #80]	; (8000a30 <MX_GPIO_Init+0x1c0>)
 80009e0:	f001 fd08 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	480e      	ldr	r0, [pc, #56]	; (8000a30 <MX_GPIO_Init+0x1c0>)
 80009f8:	f001 fcfc 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a0e:	230b      	movs	r3, #11
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_GPIO_Init+0x1c0>)
 8000a1a:	f001 fceb 	bl	80023f4 <HAL_GPIO_Init>

}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	40021800 	.word	0x40021800
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020000 	.word	0x40020000

08000a3c <MX_I2C1_Init>:
/* USER CODE END 0 */

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MX_I2C1_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <MX_I2C1_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000a76:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a78:	f001 fe82 	bl	8002780 <HAL_I2C_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000a82:	f000 f959 	bl	8000d38 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a8a:	f002 fa89 	bl	8002fa0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000a94:	f000 f950 	bl	8000d38 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a9c:	f002 facb 	bl	8003036 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000aa6:	f000 f947 	bl	8000d38 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200004f4 	.word	0x200004f4
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	20303e5d 	.word	0x20303e5d

08000abc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
	if (i2cHandle->Instance == I2C1) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <HAL_I2C_MspInit+0x8c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d130      	bne.n	8000b40 <HAL_I2C_MspInit+0x84>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <HAL_I2C_MspInit+0x90>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <HAL_I2C_MspInit+0x90>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_I2C_MspInit+0x90>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 8000af6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000afa:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480f      	ldr	r0, [pc, #60]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000b14:	f001 fc6e 	bl	80023f4 <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_I2C_MspInit+0x90>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <HAL_I2C_MspInit+0x90>)
 8000b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_I2C_MspInit+0x90>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]

		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	201f      	movs	r0, #31
 8000b36:	f001 fb94 	bl	8002262 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b3a:	201f      	movs	r0, #31
 8000b3c:	f001 fbad 	bl	800229a <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020400 	.word	0x40020400

08000b54 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint16_t WS9527_Reading;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	WS9527_GetReadings(hadc);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fd77 	bl	8000650 <WS9527_GetReadings>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d102      	bne.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x18>
		/* TIM3 is set with the frequency of 1000 Hz (period of 1 ms) */
		WS9527_StartReadings();
 8000b7e:	f7ff fd5d 	bl	800063c <WS9527_StartReadings>
	else if (htim->Instance == TIM4) {
			/* TIM4 is set with the frequency of 1 Hz (period of 1 s) */
			UART_TransmitData(WS9527_Reading);
			display_measurements(WS9527_Reading);
	}
}
 8000b82:	e00e      	b.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim->Instance == TIM4) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d109      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x36>
			UART_TransmitData(WS9527_Reading);
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f8d6 	bl	8000d44 <UART_TransmitData>
			display_measurements(WS9527_Reading);
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fe43 	bl	8000828 <display_measurements>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40000400 	.word	0x40000400
 8000bb0:	40000800 	.word	0x40000800
 8000bb4:	200004aa 	.word	0x200004aa

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbc:	f000 fd4d 	bl	800165a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc0:	f000 f81e 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 8000bc4:	f000 fb3a 	bl	800123c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bc8:	f000 fb86 	bl	80012d8 <MX_TIM4_Init>
  MX_GPIO_Init();
 8000bcc:	f7ff fe50 	bl	8000870 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000bd0:	f000 fc14 	bl	80013fc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000bd4:	f7ff fd74 	bl	80006c0 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bd8:	f000 fc8c 	bl	80014f4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000bdc:	f7ff ff2e 	bl	8000a3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	splash();
 8000be0:	f7ff fe08 	bl	80007f4 <splash>
	HAL_TIM_Base_Start_IT(&htim3);
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <main+0x40>)
 8000be6:	f003 fd4b 	bl	8004680 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <main+0x44>)
 8000bec:	f003 fd48 	bl	8004680 <HAL_TIM_Base_Start_IT>
	WS9527_Initialize();
 8000bf0:	f7ff fd1a 	bl	8000628 <WS9527_Initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000bf4:	e7fe      	b.n	8000bf4 <main+0x3c>
 8000bf6:	bf00      	nop
 8000bf8:	2000058c 	.word	0x2000058c
 8000bfc:	20000540 	.word	0x20000540

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0b8      	sub	sp, #224	; 0xe0
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c0a:	2234      	movs	r2, #52	; 0x34
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 fd86 	bl	8006720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2290      	movs	r2, #144	; 0x90
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fd77 	bl	8006720 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c32:	f002 fb95 	bl	8003360 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b3d      	ldr	r3, [pc, #244]	; (8000d2c <SystemClock_Config+0x12c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a3c      	ldr	r2, [pc, #240]	; (8000d2c <SystemClock_Config+0x12c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <SystemClock_Config+0x12c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c4e:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <SystemClock_Config+0x130>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c56:	4a36      	ldr	r2, [pc, #216]	; (8000d30 <SystemClock_Config+0x130>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <SystemClock_Config+0x130>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c86:	2304      	movs	r3, #4
 8000c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c8c:	2360      	movs	r3, #96	; 0x60
 8000c8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fbb9 	bl	8003420 <HAL_RCC_OscConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000cb4:	f000 f840 	bl	8000d38 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cb8:	f002 fb62 	bl	8003380 <HAL_PWREx_EnableOverDrive>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cc2:	f000 f839 	bl	8000d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ce6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cea:	2103      	movs	r1, #3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fe45 	bl	800397c <HAL_RCC_ClockConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000cf8:	f000 f81e 	bl	8000d38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <SystemClock_Config+0x134>)
 8000cfe:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4618      	mov	r0, r3
 8000d14:	f003 f834 	bl	8003d80 <HAL_RCCEx_PeriphCLKConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000d1e:	f000 f80b 	bl	8000d38 <Error_Handler>
  }
}
 8000d22:	bf00      	nop
 8000d24:	37e0      	adds	r7, #224	; 0xe0
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40007000 	.word	0x40007000
 8000d34:	00204100 	.word	0x00204100

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <UART_TransmitData>:
/* the UART port is hardcoded as UART3 for simplicity */

#include "messages.h"

void UART_TransmitData(uint16_t reading) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
	char json_data[25];
	sprintf(json_data, "{ \"moisture\" : \"%03d\" }\r\n", reading);
 8000d4e:	88fa      	ldrh	r2, [r7, #6]
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <UART_TransmitData+0x30>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f005 fcea 	bl	8006730 <siprintf>

	HAL_UART_Transmit(&huart3, (uint8_t*) json_data, sizeof(json_data) - 1,
 8000d5c:	f107 010c 	add.w	r1, r7, #12
 8000d60:	2364      	movs	r3, #100	; 0x64
 8000d62:	2218      	movs	r2, #24
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <UART_TransmitData+0x34>)
 8000d66:	f004 f949 	bl	8004ffc <HAL_UART_Transmit>
			100);
}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	08006f74 	.word	0x08006f74
 8000d78:	200005d8 	.word	0x200005d8

08000d7c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af04      	add	r7, sp, #16
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2301      	movs	r3, #1
 8000d96:	2200      	movs	r2, #0
 8000d98:	2178      	movs	r1, #120	; 0x78
 8000d9a:	4803      	ldr	r0, [pc, #12]	; (8000da8 <ssd1306_WriteCommand+0x2c>)
 8000d9c:	f001 fd80 	bl	80028a0 <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200004f4 	.word	0x200004f4

08000dac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af04      	add	r7, sp, #16
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbe:	9202      	str	r2, [sp, #8]
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	2240      	movs	r2, #64	; 0x40
 8000dca:	2178      	movs	r1, #120	; 0x78
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <ssd1306_WriteData+0x30>)
 8000dce:	f001 fd67 	bl	80028a0 <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200004f4 	.word	0x200004f4

08000de0 <ssd1306_Fill>:

	SSD1306.Initialized = 1;
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	e00d      	b.n	8000e0c <ssd1306_Fill+0x2c>
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <ssd1306_Fill+0x1a>
 8000df6:	2100      	movs	r1, #0
 8000df8:	e000      	b.n	8000dfc <ssd1306_Fill+0x1c>
 8000dfa:	21ff      	movs	r1, #255	; 0xff
 8000dfc:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <ssd1306_Fill+0x44>)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4413      	add	r3, r2
 8000e02:	460a      	mov	r2, r1
 8000e04:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e12:	d3ed      	bcc.n	8000df0 <ssd1306_Fill+0x10>
	}
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000094 	.word	0x20000094

08000e28 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000e2e:	2300      	movs	r3, #0
 8000e30:	71fb      	strb	r3, [r7, #7]
 8000e32:	e016      	b.n	8000e62 <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	3b50      	subs	r3, #80	; 0x50
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff9e 	bl	8000d7c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f7ff ff9b 	bl	8000d7c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000e46:	2010      	movs	r0, #16
 8000e48:	f7ff ff98 	bl	8000d7c <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	01db      	lsls	r3, r3, #7
 8000e50:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <ssd1306_UpdateScreen+0x4c>)
 8000e52:	4413      	add	r3, r2
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ffa8 	bl	8000dac <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b07      	cmp	r3, #7
 8000e66:	d9e5      	bls.n	8000e34 <ssd1306_UpdateScreen+0xc>
	}
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000094 	.word	0x20000094

08000e78 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	460b      	mov	r3, r1
 8000e84:	71bb      	strb	r3, [r7, #6]
 8000e86:	4613      	mov	r3, r2
 8000e88:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db3d      	blt.n	8000f0e <ssd1306_DrawPixel+0x96>
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	2b3f      	cmp	r3, #63	; 0x3f
 8000e96:	d83a      	bhi.n	8000f0e <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 8000e98:	797b      	ldrb	r3, [r7, #5]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d11a      	bne.n	8000ed4 <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e9e:	79fa      	ldrb	r2, [r7, #7]
 8000ea0:	79bb      	ldrb	r3, [r7, #6]
 8000ea2:	08db      	lsrs	r3, r3, #3
 8000ea4:	b2d8      	uxtb	r0, r3
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	01db      	lsls	r3, r3, #7
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <ssd1306_DrawPixel+0xa4>)
 8000eae:	5cd3      	ldrb	r3, [r2, r3]
 8000eb0:	b25a      	sxtb	r2, r3
 8000eb2:	79bb      	ldrb	r3, [r7, #6]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b259      	sxtb	r1, r3
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	01db      	lsls	r3, r3, #7
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2c9      	uxtb	r1, r1
 8000ece:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <ssd1306_DrawPixel+0xa4>)
 8000ed0:	54d1      	strb	r1, [r2, r3]
 8000ed2:	e01d      	b.n	8000f10 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ed4:	79fa      	ldrb	r2, [r7, #7]
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	b2d8      	uxtb	r0, r3
 8000edc:	4603      	mov	r3, r0
 8000ede:	01db      	lsls	r3, r3, #7
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <ssd1306_DrawPixel+0xa4>)
 8000ee4:	5cd3      	ldrb	r3, [r2, r3]
 8000ee6:	b25a      	sxtb	r2, r3
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	4013      	ands	r3, r2
 8000efc:	b259      	sxtb	r1, r3
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	4603      	mov	r3, r0
 8000f02:	01db      	lsls	r3, r3, #7
 8000f04:	4413      	add	r3, r2
 8000f06:	b2c9      	uxtb	r1, r1
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <ssd1306_DrawPixel+0xa4>)
 8000f0a:	54d1      	strb	r1, [r2, r3]
 8000f0c:	e000      	b.n	8000f10 <ssd1306_DrawPixel+0x98>
		return;
 8000f0e:	bf00      	nop
	}
}
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000094 	.word	0x20000094

08000f20 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4604      	mov	r4, r0
 8000f28:	1d38      	adds	r0, r7, #4
 8000f2a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4623      	mov	r3, r4
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	4613      	mov	r3, r2
 8000f36:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b1f      	cmp	r3, #31
 8000f3c:	d902      	bls.n	8000f44 <ssd1306_WriteChar+0x24>
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	2b7e      	cmp	r3, #126	; 0x7e
 8000f42:	d901      	bls.n	8000f48 <ssd1306_WriteChar+0x28>
		return 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e06d      	b.n	8001024 <ssd1306_WriteChar+0x104>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f48:	4b38      	ldr	r3, [pc, #224]	; (800102c <ssd1306_WriteChar+0x10c>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	2b80      	cmp	r3, #128	; 0x80
 8000f54:	dc06      	bgt.n	8000f64 <ssd1306_WriteChar+0x44>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight)) {
 8000f56:	4b35      	ldr	r3, [pc, #212]	; (800102c <ssd1306_WriteChar+0x10c>)
 8000f58:	885b      	ldrh	r3, [r3, #2]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	797b      	ldrb	r3, [r7, #5]
 8000f5e:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f60:	2b40      	cmp	r3, #64	; 0x40
 8000f62:	dd01      	ble.n	8000f68 <ssd1306_WriteChar+0x48>
		// Not enough space on current line
		return 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e05d      	b.n	8001024 <ssd1306_WriteChar+0x104>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	e04c      	b.n	8001008 <ssd1306_WriteChar+0xe8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	3b20      	subs	r3, #32
 8000f74:	7979      	ldrb	r1, [r7, #5]
 8000f76:	fb01 f303 	mul.w	r3, r1, r3
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	440b      	add	r3, r1
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	e034      	b.n	8000ff8 <ssd1306_WriteChar+0xd8>
			if ((b << j) & 0x8000) {
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d012      	beq.n	8000fc4 <ssd1306_WriteChar+0xa4>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <ssd1306_WriteChar+0x10c>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	b2d8      	uxtb	r0, r3
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <ssd1306_WriteChar+0x10c>)
 8000fae:	885b      	ldrh	r3, [r3, #2]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	7bba      	ldrb	r2, [r7, #14]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff ff5b 	bl	8000e78 <ssd1306_DrawPixel>
 8000fc2:	e016      	b.n	8000ff2 <ssd1306_WriteChar+0xd2>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <ssd1306_WriteChar+0x10c>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4413      	add	r3, r2
 8000fd0:	b2d8      	uxtb	r0, r3
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <ssd1306_WriteChar+0x10c>)
 8000fd4:	885b      	ldrh	r3, [r3, #2]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4413      	add	r3, r2
 8000fde:	b2d9      	uxtb	r1, r3
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2301      	moveq	r3, #1
 8000fe8:	2300      	movne	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	f7ff ff43 	bl	8000e78 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	793b      	ldrb	r3, [r7, #4]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d3c5      	bcc.n	8000f8e <ssd1306_WriteChar+0x6e>
	for (i = 0; i < Font.FontHeight; i++) {
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3301      	adds	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	797b      	ldrb	r3, [r7, #5]
 800100a:	461a      	mov	r2, r3
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	4293      	cmp	r3, r2
 8001010:	d3ad      	bcc.n	8000f6e <ssd1306_WriteChar+0x4e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <ssd1306_WriteChar+0x10c>)
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	793b      	ldrb	r3, [r7, #4]
 8001018:	b29b      	uxth	r3, r3
 800101a:	4413      	add	r3, r2
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b03      	ldr	r3, [pc, #12]	; (800102c <ssd1306_WriteChar+0x10c>)
 8001020:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3724      	adds	r7, #36	; 0x24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	20000494 	.word	0x20000494

08001030 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	1d38      	adds	r0, r7, #4
 800103a:	e880 0006 	stmia.w	r0, {r1, r2}
 800103e:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) {
 8001040:	e012      	b.n	8001068 <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	7818      	ldrb	r0, [r3, #0]
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	1d3a      	adds	r2, r7, #4
 800104a:	ca06      	ldmia	r2, {r1, r2}
 800104c:	f7ff ff68 	bl	8000f20 <ssd1306_WriteChar>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d002      	beq.n	8001062 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	e008      	b.n	8001074 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1e8      	bne.n	8001042 <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	781b      	ldrb	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	460a      	mov	r2, r1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <ssd1306_SetCursor+0x2c>)
 8001092:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <ssd1306_SetCursor+0x2c>)
 800109a:	805a      	strh	r2, [r3, #2]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000494 	.word	0x20000494

080010ac <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_MspInit+0x44>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_MspInit+0x44>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_MspInit+0x44>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_MspInit+0x44>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <HAL_MspInit+0x44>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_MspInit+0x44>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800

080010f4 <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80010f8:	e7fe      	b.n	80010f8 <NMI_Handler+0x4>

080010fa <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001140:	f000 fac8 	bl	80016d4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <ADC_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
 */
void ADC_IRQHandler(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <ADC_IRQHandler+0x10>)
 800114e:	f000 fc21 	bl	8001994 <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC_IRQn 1 */

	/* USER CODE END ADC_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200004ac 	.word	0x200004ac

0800115c <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM3_IRQHandler+0x10>)
 8001162:	f003 fb05 	bl	8004770 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000058c 	.word	0x2000058c

08001170 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <TIM4_IRQHandler+0x10>)
 8001176:	f003 fafb 	bl	8004770 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000540 	.word	0x20000540

08001184 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <I2C1_EV_IRQHandler+0x10>)
 800118a:	f001 fc9d 	bl	8002ac8 <HAL_I2C_EV_IRQHandler>
	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200004f4 	.word	0x200004f4

08001198 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <USART3_IRQHandler+0x10>)
 800119e:	f003 ffc1 	bl	8005124 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200005d8 	.word	0x200005d8

080011ac <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x64>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <_sbrk+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d207      	bcs.n	80011ec <_sbrk+0x40>
		errno = ENOMEM;
 80011dc:	f005 fa4e 	bl	800667c <__errno>
 80011e0:	4603      	mov	r3, r0
 80011e2:	220c      	movs	r2, #12
 80011e4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	e009      	b.n	8001200 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <_sbrk+0x64>)
 80011fc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20080000 	.word	0x20080000
 800120c:	00000400 	.word	0x00000400
 8001210:	2000049c 	.word	0x2000049c
 8001214:	20000a78 	.word	0x20000a78

08001218 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_TIM3_Init+0x94>)
 800125c:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <MX_TIM3_Init+0x98>)
 800125e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 95;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_TIM3_Init+0x94>)
 8001262:	225f      	movs	r2, #95	; 0x5f
 8001264:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_TIM3_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <MX_TIM3_Init+0x94>)
 800126e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001272:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_TIM3_Init+0x94>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_TIM3_Init+0x94>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001280:	4813      	ldr	r0, [pc, #76]	; (80012d0 <MX_TIM3_Init+0x94>)
 8001282:	f003 f9a5 	bl	80045d0 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM3_Init+0x54>
		Error_Handler();
 800128c:	f7ff fd54 	bl	8000d38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001294:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <MX_TIM3_Init+0x94>)
 800129e:	f003 fb87 	bl	80049b0 <HAL_TIM_ConfigClockSource>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x70>
		Error_Handler();
 80012a8:	f7ff fd46 	bl	8000d38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_TIM3_Init+0x94>)
 80012ba:	f003 fda5 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80012c4:	f7ff fd38 	bl	8000d38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000058c 	.word	0x2000058c
 80012d4:	40000400 	.word	0x40000400

080012d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_TIM4_Init+0x98>)
 80012f8:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <MX_TIM4_Init+0x9c>)
 80012fa:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 9599;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM4_Init+0x98>)
 80012fe:	f242 527f 	movw	r2, #9599	; 0x257f
 8001302:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM4_Init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_TIM4_Init+0x98>)
 800130c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001310:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_TIM4_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM4_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_TIM4_Init+0x98>)
 8001320:	f003 f956 	bl	80045d0 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM4_Init+0x56>
		Error_Handler();
 800132a:	f7ff fd05 	bl	8000d38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM4_Init+0x98>)
 800133c:	f003 fb38 	bl	80049b0 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM4_Init+0x72>
		Error_Handler();
 8001346:	f7ff fcf7 	bl	8000d38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_TIM4_Init+0x98>)
 8001358:	f003 fd56 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM4_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001362:	f7ff fce9 	bl	8000d38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000540 	.word	0x20000540
 8001374:	40000800 	.word	0x40000800

08001378 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM3) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <HAL_TIM_Base_MspInit+0x78>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d114      	bne.n	80013b4 <HAL_TIM_Base_MspInit+0x3c>
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* TIM3 clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_TIM_Base_MspInit+0x7c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_TIM_Base_MspInit+0x7c>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_TIM_Base_MspInit+0x7c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	201d      	movs	r0, #29
 80013a8:	f000 ff5b 	bl	8002262 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013ac:	201d      	movs	r0, #29
 80013ae:	f000 ff74 	bl	800229a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	}
}
 80013b2:	e018      	b.n	80013e6 <HAL_TIM_Base_MspInit+0x6e>
	} else if (tim_baseHandle->Instance == TIM4) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <HAL_TIM_Base_MspInit+0x80>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d113      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0x6e>
		__HAL_RCC_TIM4_CLK_ENABLE();
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_TIM_Base_MspInit+0x7c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <HAL_TIM_Base_MspInit+0x7c>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_TIM_Base_MspInit+0x7c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	201e      	movs	r0, #30
 80013dc:	f000 ff41 	bl	8002262 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013e0:	201e      	movs	r0, #30
 80013e2:	f000 ff5a 	bl	800229a <HAL_NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40000400 	.word	0x40000400
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40000800 	.word	0x40000800

080013fc <MX_USART3_UART_Init>:

UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_USART3_UART_Init+0x58>)
 8001402:	4a15      	ldr	r2, [pc, #84]	; (8001458 <MX_USART3_UART_Init+0x5c>)
 8001404:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_USART3_UART_Init+0x58>)
 8001408:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800140c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART3_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_USART3_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART3_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART3_UART_Init+0x58>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART3_UART_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART3_UART_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART3_UART_Init+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART3_UART_Init+0x58>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART3_UART_Init+0x58>)
 8001440:	f003 fd8e 	bl	8004f60 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART3_UART_Init+0x52>
		Error_Handler();
 800144a:	f7ff fc75 	bl	8000d38 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200005d8 	.word	0x200005d8
 8001458:	40004800 	.word	0x40004800

0800145c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
	if (uartHandle->Instance == USART3) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d130      	bne.n	80014e0 <HAL_UART_MspInit+0x84>
		/* USER CODE BEGIN USART3_MspInit 0 */

		/* USER CODE END USART3_MspInit 0 */
		/* USART3 clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_UART_MspInit+0x90>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a1a      	ldr	r2, [pc, #104]	; (80014ec <HAL_UART_MspInit+0x90>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_UART_MspInit+0x90>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_UART_MspInit+0x90>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_UART_MspInit+0x90>)
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_UART_MspInit+0x90>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 80014ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014b2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c0:	2307      	movs	r3, #7
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4809      	ldr	r0, [pc, #36]	; (80014f0 <HAL_UART_MspInit+0x94>)
 80014cc:	f000 ff92 	bl	80023f4 <HAL_GPIO_Init>

		/* USART3 interrupt Init */
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2027      	movs	r0, #39	; 0x27
 80014d6:	f000 fec4 	bl	8002262 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014da:	2027      	movs	r0, #39	; 0x27
 80014dc:	f000 fedd 	bl	800229a <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40004800 	.word	0x40004800
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020c00 	.word	0x40020c00

080014f4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001502:	2206      	movs	r2, #6
 8001504:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001508:	2202      	movs	r2, #2
 800150a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001514:	2202      	movs	r2, #2
 8001516:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800151a:	2201      	movs	r2, #1
 800151c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800152c:	2201      	movs	r2, #1
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001532:	2200      	movs	r2, #0
 8001534:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001538:	f001 fdc9 	bl	80030ce <HAL_PCD_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001542:	f7ff fbf9 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000065c 	.word	0x2000065c

08001550 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001570:	d141      	bne.n	80015f6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <HAL_PCD_MspInit+0xb0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a22      	ldr	r2, [pc, #136]	; (8001600 <HAL_PCD_MspInit+0xb0>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_PCD_MspInit+0xb0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800158a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800159c:	230a      	movs	r3, #10
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4817      	ldr	r0, [pc, #92]	; (8001604 <HAL_PCD_MspInit+0xb4>)
 80015a8:	f000 ff24 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4810      	ldr	r0, [pc, #64]	; (8001604 <HAL_PCD_MspInit+0xb4>)
 80015c2:	f000 ff17 	bl	80023f4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_PCD_MspInit+0xb0>)
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ca:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_PCD_MspInit+0xb0>)
 80015cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d0:	6353      	str	r3, [r2, #52]	; 0x34
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_PCD_MspInit+0xb0>)
 80015d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_PCD_MspInit+0xb0>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_PCD_MspInit+0xb0>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_PCD_MspInit+0xb0>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001624:	4c0b      	ldr	r4, [pc, #44]	; (8001654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001632:	f7ff fdf1 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001636:	f005 f827 	bl	8006688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff fabd 	bl	8000bb8 <main>
  bx  lr    
 800163e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800164c:	08007758 	.word	0x08007758
  ldr r2, =_sbss
 8001650:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001654:	20000a74 	.word	0x20000a74

08001658 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <CAN1_RX0_IRQHandler>

0800165a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165e:	2003      	movs	r0, #3
 8001660:	f000 fdf4 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001664:	2000      	movs	r0, #0
 8001666:	f000 f805 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166a:	f7ff fd1f 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fe0f 	bl	80022b6 <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f000 fdd7 	bl	8002262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000010 	.word	0x20000010
 80016d0:	2000000c 	.word	0x2000000c

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000010 	.word	0x20000010
 80016f8:	20000a60 	.word	0x20000a60

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000a60 	.word	0x20000a60

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff ffee 	bl	80016fc <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_Delay+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffde 	bl	80016fc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000010 	.word	0x20000010

0800175c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e031      	b.n	80017d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7fe fff2 	bl	8000764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d116      	bne.n	80017c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_ADC_Init+0x84>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	f043 0202 	orr.w	r2, r3, #2
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fb7a 	bl	8001ea4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f023 0303 	bic.w	r3, r3, #3
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
 80017c6:	e001      	b.n	80017cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	ffffeefd 	.word	0xffffeefd

080017e4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_ADC_Start_IT+0x1a>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e0b5      	b.n	800196a <HAL_ADC_Start_IT+0x186>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b01      	cmp	r3, #1
 8001812:	d018      	beq.n	8001846 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001824:	4b54      	ldr	r3, [pc, #336]	; (8001978 <HAL_ADC_Start_IT+0x194>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a54      	ldr	r2, [pc, #336]	; (800197c <HAL_ADC_Start_IT+0x198>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0c9a      	lsrs	r2, r3, #18
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001838:	e002      	b.n	8001840 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3b01      	subs	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f9      	bne.n	800183a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b01      	cmp	r3, #1
 8001852:	d17d      	bne.n	8001950 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001858:	4b49      	ldr	r3, [pc, #292]	; (8001980 <HAL_ADC_Start_IT+0x19c>)
 800185a:	4013      	ands	r3, r2
 800185c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800187a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800188a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800188e:	d106      	bne.n	800189e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f023 0206 	bic.w	r2, r3, #6
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
 800189c:	e002      	b.n	80018a4 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018b4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_ADC_Start_IT+0x1a0>)
 80018c2:	430b      	orrs	r3, r1
 80018c4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80018c6:	4b30      	ldr	r3, [pc, #192]	; (8001988 <HAL_ADC_Start_IT+0x1a4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10f      	bne.n	80018f2 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d143      	bne.n	8001968 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	e03a      	b.n	8001968 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a25      	ldr	r2, [pc, #148]	; (800198c <HAL_ADC_Start_IT+0x1a8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d10e      	bne.n	800191a <HAL_ADC_Start_IT+0x136>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d107      	bne.n	800191a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001918:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_ADC_Start_IT+0x1a4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	d120      	bne.n	8001968 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a19      	ldr	r2, [pc, #100]	; (8001990 <HAL_ADC_Start_IT+0x1ac>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d11b      	bne.n	8001968 <HAL_ADC_Start_IT+0x184>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d114      	bne.n	8001968 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	e00b      	b.n	8001968 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f043 0210 	orr.w	r2, r3, #16
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008
 800197c:	431bde83 	.word	0x431bde83
 8001980:	fffff8fe 	.word	0xfffff8fe
 8001984:	04000020 	.word	0x04000020
 8001988:	40012300 	.word	0x40012300
 800198c:	40012000 	.word	0x40012000
 8001990:	40012200 	.word	0x40012200

08001994 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d049      	beq.n	8001a5e <HAL_ADC_IRQHandler+0xca>
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d046      	beq.n	8001a5e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d12b      	bne.n	8001a4e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d127      	bne.n	8001a4e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d119      	bne.n	8001a4e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0220 	bic.w	r2, r2, #32
 8001a28:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d105      	bne.n	8001a4e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f043 0201 	orr.w	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff f880 	bl	8000b54 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0212 	mvn.w	r2, #18
 8001a5c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d057      	beq.n	8001b24 <HAL_ADC_IRQHandler+0x190>
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d054      	beq.n	8001b24 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d139      	bne.n	8001b14 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d12b      	bne.n	8001b14 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d124      	bne.n	8001b14 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d11d      	bne.n	8001b14 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d119      	bne.n	8001b14 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f043 0201 	orr.w	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fabf 	bl	8002098 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f06f 020c 	mvn.w	r2, #12
 8001b22:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b32:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d017      	beq.n	8001b6a <HAL_ADC_IRQHandler+0x1d6>
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d014      	beq.n	8001b6a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d10d      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f837 	bl	8001bce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f06f 0201 	mvn.w	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b78:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d015      	beq.n	8001bac <HAL_ADC_IRQHandler+0x218>
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d012      	beq.n	8001bac <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f043 0202 	orr.w	r2, r3, #2
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f06f 0220 	mvn.w	r2, #32
 8001b9a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f820 	bl	8001be2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f06f 0220 	mvn.w	r2, #32
 8001baa:	601a      	str	r2, [r3, #0]
  }
}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x1c>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e136      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x28a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b09      	cmp	r3, #9
 8001c22:	d93a      	bls.n	8001c9a <HAL_ADC_ConfigChannel+0xa2>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c2c:	d035      	beq.n	8001c9a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68d9      	ldr	r1, [r3, #12]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	3b1e      	subs	r3, #30
 8001c44:	2207      	movs	r2, #7
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	400a      	ands	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a8d      	ldr	r2, [pc, #564]	; (8001e90 <HAL_ADC_ConfigChannel+0x298>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10a      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68d9      	ldr	r1, [r3, #12]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	061a      	lsls	r2, r3, #24
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c72:	e035      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68d9      	ldr	r1, [r3, #12]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4403      	add	r3, r0
 8001c8c:	3b1e      	subs	r3, #30
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c98:	e022      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6919      	ldr	r1, [r3, #16]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	2207      	movs	r2, #7
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	400a      	ands	r2, r1
 8001cbc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6919      	ldr	r1, [r3, #16]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4403      	add	r3, r0
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b06      	cmp	r3, #6
 8001ce6:	d824      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b05      	subs	r3, #5
 8001cfa:	221f      	movs	r2, #31
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43da      	mvns	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	400a      	ands	r2, r1
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	3b05      	subs	r3, #5
 8001d24:	fa00 f203 	lsl.w	r2, r0, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d30:	e04c      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d824      	bhi.n	8001d84 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b23      	subs	r3, #35	; 0x23
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3b23      	subs	r3, #35	; 0x23
 8001d76:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	631a      	str	r2, [r3, #48]	; 0x30
 8001d82:	e023      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	3b41      	subs	r3, #65	; 0x41
 8001d96:	221f      	movs	r2, #31
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	400a      	ands	r2, r1
 8001da4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b41      	subs	r3, #65	; 0x41
 8001dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a30      	ldr	r2, [pc, #192]	; (8001e94 <HAL_ADC_ConfigChannel+0x29c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10a      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1f4>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a2c      	ldr	r2, [pc, #176]	; (8001e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001de6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001dea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a28      	ldr	r2, [pc, #160]	; (8001e94 <HAL_ADC_ConfigChannel+0x29c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10f      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x21e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b12      	cmp	r3, #18
 8001dfc:	d10b      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e08:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e0a:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e14:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <HAL_ADC_ConfigChannel+0x29c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d12b      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x280>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <HAL_ADC_ConfigChannel+0x298>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d003      	beq.n	8001e32 <HAL_ADC_ConfigChannel+0x23a>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b11      	cmp	r3, #17
 8001e30:	d122      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e38:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e3c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e48:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <HAL_ADC_ConfigChannel+0x298>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d111      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_ADC_ConfigChannel+0x2a4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a11      	ldr	r2, [pc, #68]	; (8001ea0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	0c9a      	lsrs	r2, r3, #18
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e6a:	e002      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f9      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	10000012 	.word	0x10000012
 8001e94:	40012000 	.word	0x40012000
 8001e98:	40012300 	.word	0x40012300
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	431bde83 	.word	0x431bde83

08001ea4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001eac:	4b78      	ldr	r3, [pc, #480]	; (8002090 <ADC_Init+0x1ec>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a77      	ldr	r2, [pc, #476]	; (8002090 <ADC_Init+0x1ec>)
 8001eb2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001eb6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001eb8:	4b75      	ldr	r3, [pc, #468]	; (8002090 <ADC_Init+0x1ec>)
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4973      	ldr	r1, [pc, #460]	; (8002090 <ADC_Init+0x1ec>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	021a      	lsls	r2, r3, #8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ef8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6899      	ldr	r1, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	4a58      	ldr	r2, [pc, #352]	; (8002094 <ADC_Init+0x1f0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d022      	beq.n	8001f7e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6899      	ldr	r1, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6899      	ldr	r1, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	e00f      	b.n	8001f9e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0202 	bic.w	r2, r2, #2
 8001fac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6899      	ldr	r1, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	005a      	lsls	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01b      	beq.n	8002004 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6859      	ldr	r1, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	035a      	lsls	r2, r3, #13
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	e007      	b.n	8002014 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002012:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	3b01      	subs	r3, #1
 8002030:	051a      	lsls	r2, r3, #20
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002048:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6899      	ldr	r1, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002056:	025a      	lsls	r2, r3, #9
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800206e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	029a      	lsls	r2, r3, #10
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	609a      	str	r2, [r3, #8]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40012300 	.word	0x40012300
 8002094:	0f000001 	.word	0x0f000001

08002098 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <__NVIC_SetPriorityGrouping+0x40>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <__NVIC_SetPriorityGrouping+0x40>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00
 80020f0:	05fa0000 	.word	0x05fa0000

080020f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db0b      	blt.n	800213a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <__NVIC_EnableIRQ+0x38>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
         );
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f7ff ff8e 	bl	800214c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff29 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff3e 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff8e 	bl	80021a0 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5d 	bl	800214c <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff31 	bl	8002110 <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffa2 	bl	8002208 <SysTick_Config>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff fa0e 	bl	80016fc <HAL_GetTick>
 80022e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d008      	beq.n	8002300 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e052      	b.n	80023a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0216 	bic.w	r2, r2, #22
 800230e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800231e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <HAL_DMA_Abort+0x62>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0208 	bic.w	r2, r2, #8
 800233e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002350:	e013      	b.n	800237a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002352:	f7ff f9d3 	bl	80016fc <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b05      	cmp	r3, #5
 800235e:	d90c      	bls.n	800237a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e015      	b.n	80023a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e4      	bne.n	8002352 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	223f      	movs	r2, #63	; 0x3f
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d004      	beq.n	80023cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e00c      	b.n	80023e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2205      	movs	r2, #5
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	e175      	b.n	8002700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002414:	2201      	movs	r2, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	f040 8164 	bne.w	80026fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d005      	beq.n	800244a <HAL_GPIO_Init+0x56>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d130      	bne.n	80024ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 0201 	and.w	r2, r3, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d017      	beq.n	80024e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d123      	bne.n	800253c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3208      	adds	r2, #8
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80be 	beq.w	80026fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	4b66      	ldr	r3, [pc, #408]	; (8002718 <HAL_GPIO_Init+0x324>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a65      	ldr	r2, [pc, #404]	; (8002718 <HAL_GPIO_Init+0x324>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b63      	ldr	r3, [pc, #396]	; (8002718 <HAL_GPIO_Init+0x324>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002596:	4a61      	ldr	r2, [pc, #388]	; (800271c <HAL_GPIO_Init+0x328>)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a58      	ldr	r2, [pc, #352]	; (8002720 <HAL_GPIO_Init+0x32c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d037      	beq.n	8002632 <HAL_GPIO_Init+0x23e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a57      	ldr	r2, [pc, #348]	; (8002724 <HAL_GPIO_Init+0x330>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d031      	beq.n	800262e <HAL_GPIO_Init+0x23a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_GPIO_Init+0x334>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d02b      	beq.n	800262a <HAL_GPIO_Init+0x236>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a55      	ldr	r2, [pc, #340]	; (800272c <HAL_GPIO_Init+0x338>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d025      	beq.n	8002626 <HAL_GPIO_Init+0x232>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a54      	ldr	r2, [pc, #336]	; (8002730 <HAL_GPIO_Init+0x33c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01f      	beq.n	8002622 <HAL_GPIO_Init+0x22e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a53      	ldr	r2, [pc, #332]	; (8002734 <HAL_GPIO_Init+0x340>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d019      	beq.n	800261e <HAL_GPIO_Init+0x22a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_GPIO_Init+0x344>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0x226>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a51      	ldr	r2, [pc, #324]	; (800273c <HAL_GPIO_Init+0x348>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_GPIO_Init+0x222>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a50      	ldr	r2, [pc, #320]	; (8002740 <HAL_GPIO_Init+0x34c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x21e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4f      	ldr	r2, [pc, #316]	; (8002744 <HAL_GPIO_Init+0x350>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_GPIO_Init+0x21a>
 800260a:	2309      	movs	r3, #9
 800260c:	e012      	b.n	8002634 <HAL_GPIO_Init+0x240>
 800260e:	230a      	movs	r3, #10
 8002610:	e010      	b.n	8002634 <HAL_GPIO_Init+0x240>
 8002612:	2308      	movs	r3, #8
 8002614:	e00e      	b.n	8002634 <HAL_GPIO_Init+0x240>
 8002616:	2307      	movs	r3, #7
 8002618:	e00c      	b.n	8002634 <HAL_GPIO_Init+0x240>
 800261a:	2306      	movs	r3, #6
 800261c:	e00a      	b.n	8002634 <HAL_GPIO_Init+0x240>
 800261e:	2305      	movs	r3, #5
 8002620:	e008      	b.n	8002634 <HAL_GPIO_Init+0x240>
 8002622:	2304      	movs	r3, #4
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x240>
 8002626:	2303      	movs	r3, #3
 8002628:	e004      	b.n	8002634 <HAL_GPIO_Init+0x240>
 800262a:	2302      	movs	r3, #2
 800262c:	e002      	b.n	8002634 <HAL_GPIO_Init+0x240>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_GPIO_Init+0x240>
 8002632:	2300      	movs	r3, #0
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f002 0203 	and.w	r2, r2, #3
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	4093      	lsls	r3, r2
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002644:	4935      	ldr	r1, [pc, #212]	; (800271c <HAL_GPIO_Init+0x328>)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_GPIO_Init+0x354>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002676:	4a34      	ldr	r2, [pc, #208]	; (8002748 <HAL_GPIO_Init+0x354>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <HAL_GPIO_Init+0x354>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a0:	4a29      	ldr	r2, [pc, #164]	; (8002748 <HAL_GPIO_Init+0x354>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026a6:	4b28      	ldr	r3, [pc, #160]	; (8002748 <HAL_GPIO_Init+0x354>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ca:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <HAL_GPIO_Init+0x354>)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_GPIO_Init+0x354>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <HAL_GPIO_Init+0x354>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3301      	adds	r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b0f      	cmp	r3, #15
 8002704:	f67f ae86 	bls.w	8002414 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40013800 	.word	0x40013800
 8002720:	40020000 	.word	0x40020000
 8002724:	40020400 	.word	0x40020400
 8002728:	40020800 	.word	0x40020800
 800272c:	40020c00 	.word	0x40020c00
 8002730:	40021000 	.word	0x40021000
 8002734:	40021400 	.word	0x40021400
 8002738:	40021800 	.word	0x40021800
 800273c:	40021c00 	.word	0x40021c00
 8002740:	40022000 	.word	0x40022000
 8002744:	40022400 	.word	0x40022400
 8002748:	40013c00 	.word	0x40013c00

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002768:	e003      	b.n	8002772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	041a      	lsls	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	619a      	str	r2, [r3, #24]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe f988 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2224      	movs	r2, #36	; 0x24
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	e006      	b.n	8002808 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002806:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d104      	bne.n	800281a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002818:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_I2C_Init+0x11c>)
 8002826:	430b      	orrs	r3, r1
 8002828:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002838:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69d9      	ldr	r1, [r3, #28]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	02008000 	.word	0x02008000

080028a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	461a      	mov	r2, r3
 80028ae:	4603      	mov	r3, r0
 80028b0:	817b      	strh	r3, [r7, #10]
 80028b2:	460b      	mov	r3, r1
 80028b4:	813b      	strh	r3, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	f040 80f9 	bne.w	8002aba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_I2C_Mem_Write+0x34>
 80028ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0ed      	b.n	8002abc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_I2C_Mem_Write+0x4e>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e0e6      	b.n	8002abc <HAL_I2C_Mem_Write+0x21c>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028f6:	f7fe ff01 	bl	80016fc <HAL_GetTick>
 80028fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2319      	movs	r3, #25
 8002902:	2201      	movs	r2, #1
 8002904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f96f 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0d1      	b.n	8002abc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2221      	movs	r2, #33	; 0x21
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002938:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002940:	88f8      	ldrh	r0, [r7, #6]
 8002942:	893a      	ldrh	r2, [r7, #8]
 8002944:	8979      	ldrh	r1, [r7, #10]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	4603      	mov	r3, r0
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f8d3 	bl	8002afc <I2C_RequestMemoryWrite>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0a9      	b.n	8002abc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2bff      	cmp	r3, #255	; 0xff
 8002970:	d90e      	bls.n	8002990 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	22ff      	movs	r2, #255	; 0xff
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	b2da      	uxtb	r2, r3
 800297e:	8979      	ldrh	r1, [r7, #10]
 8002980:	2300      	movs	r3, #0
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fad7 	bl	8002f3c <I2C_TransferConfig>
 800298e:	e00f      	b.n	80029b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	8979      	ldrh	r1, [r7, #10]
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fac6 	bl	8002f3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f959 	bl	8002c6c <I2C_WaitOnTXISFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e07b      	b.n	8002abc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d034      	beq.n	8002a68 <HAL_I2C_Mem_Write+0x1c8>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d130      	bne.n	8002a68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f8eb 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e04d      	b.n	8002abc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2bff      	cmp	r3, #255	; 0xff
 8002a28:	d90e      	bls.n	8002a48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	22ff      	movs	r2, #255	; 0xff
 8002a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	8979      	ldrh	r1, [r7, #10]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fa7b 	bl	8002f3c <I2C_TransferConfig>
 8002a46:	e00f      	b.n	8002a68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	8979      	ldrh	r1, [r7, #10]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fa6a 	bl	8002f3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d19e      	bne.n	80029b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f938 	bl	8002cec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e01a      	b.n	8002abc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_I2C_Mem_Write+0x224>)
 8002a9a:	400b      	ands	r3, r1
 8002a9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e000      	b.n	8002abc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
  }
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	fe00e800 	.word	0xfe00e800

08002ac8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	68f9      	ldr	r1, [r7, #12]
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
  }
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	813b      	strh	r3, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	8979      	ldrh	r1, [r7, #10]
 8002b1c:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <I2C_RequestMemoryWrite+0xa4>)
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fa09 	bl	8002f3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	69b9      	ldr	r1, [r7, #24]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f89c 	bl	8002c6c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e02c      	b.n	8002b98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b44:	893b      	ldrh	r3, [r7, #8]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b4e:	e015      	b.n	8002b7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	69b9      	ldr	r1, [r7, #24]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f882 	bl	8002c6c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e012      	b.n	8002b98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b72:	893b      	ldrh	r3, [r7, #8]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2200      	movs	r2, #0
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f830 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	80002000 	.word	0x80002000

08002ba4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d103      	bne.n	8002bc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d007      	beq.n	8002be0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	619a      	str	r2, [r3, #24]
  }
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bfc:	e022      	b.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d01e      	beq.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7fe fd79 	bl	80016fc <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d113      	bne.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e00f      	b.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d0cd      	beq.n	8002bfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c78:	e02c      	b.n	8002cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f870 	bl	8002d64 <I2C_IsErrorOccurred>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e02a      	b.n	8002ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d01e      	beq.n	8002cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c96:	f7fe fd31 	bl	80016fc <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d113      	bne.n	8002cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	f043 0220 	orr.w	r2, r3, #32
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e007      	b.n	8002ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d1cb      	bne.n	8002c7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf8:	e028      	b.n	8002d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f830 	bl	8002d64 <I2C_IsErrorOccurred>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e026      	b.n	8002d5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0e:	f7fe fcf5 	bl	80016fc <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d302      	bcc.n	8002d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d113      	bne.n	8002d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e007      	b.n	8002d5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	d1cf      	bne.n	8002cfa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d075      	beq.n	8002e7c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2210      	movs	r2, #16
 8002d96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d98:	e056      	b.n	8002e48 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d052      	beq.n	8002e48 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002da2:	f7fe fcab 	bl	80016fc <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d302      	bcc.n	8002db8 <I2C_IsErrorOccurred+0x54>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d147      	bne.n	8002e48 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dda:	d12e      	bne.n	8002e3a <I2C_IsErrorOccurred+0xd6>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de2:	d02a      	beq.n	8002e3a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d027      	beq.n	8002e3a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002dfa:	f7fe fc7f 	bl	80016fc <HAL_GetTick>
 8002dfe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e00:	e01b      	b.n	8002e3a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e02:	f7fe fc7b 	bl	80016fc <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b19      	cmp	r3, #25
 8002e0e:	d914      	bls.n	8002e3a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d1dc      	bne.n	8002e02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d003      	beq.n	8002e5e <I2C_IsErrorOccurred+0xfa>
 8002e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d09d      	beq.n	8002d9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f043 0304 	orr.w	r3, r3, #4
 8002e74:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	f043 0308 	orr.w	r3, r3, #8
 8002eb6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01c      	beq.n	8002f2c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff fe56 	bl	8002ba4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <I2C_IsErrorOccurred+0x1d4>)
 8002f04:	400b      	ands	r3, r1
 8002f06:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3728      	adds	r7, #40	; 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	fe00e800 	.word	0xfe00e800

08002f3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	817b      	strh	r3, [r7, #10]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f4e:	897b      	ldrh	r3, [r7, #10]
 8002f50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f54:	7a7b      	ldrb	r3, [r7, #9]
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f5c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f6a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	0d5b      	lsrs	r3, r3, #21
 8002f76:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <I2C_TransferConfig+0x60>)
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	ea02 0103 	and.w	r1, r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	03ff63ff 	.word	0x03ff63ff

08002fa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d138      	bne.n	8003028 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e032      	b.n	800302a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	; 0x24
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ff2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003036:	b480      	push	{r7}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	d139      	bne.n	80030c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003056:	2302      	movs	r3, #2
 8003058:	e033      	b.n	80030c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2224      	movs	r2, #36	; 0x24
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003088:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d0:	b08f      	sub	sp, #60	; 0x3c
 80030d2:	af0a      	add	r7, sp, #40	; 0x28
 80030d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e116      	b.n	800330e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe fa28 	bl	8001550 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2203      	movs	r2, #3
 8003104:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f003 f816 	bl	8006150 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	687e      	ldr	r6, [r7, #4]
 800312c:	466d      	mov	r5, sp
 800312e:	f106 0410 	add.w	r4, r6, #16
 8003132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800313e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003142:	1d33      	adds	r3, r6, #4
 8003144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003146:	6838      	ldr	r0, [r7, #0]
 8003148:	f002 ffaa 	bl	80060a0 <USB_CoreInit>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0d7      	b.n	800330e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f003 f804 	bl	8006172 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
 800316e:	e04a      	b.n	8003206 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	333d      	adds	r3, #61	; 0x3d
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	333c      	adds	r3, #60	; 0x3c
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	b298      	uxth	r0, r3
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3342      	adds	r3, #66	; 0x42
 80031ac:	4602      	mov	r2, r0
 80031ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	333f      	adds	r3, #63	; 0x3f
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3344      	adds	r3, #68	; 0x44
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3348      	adds	r3, #72	; 0x48
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3350      	adds	r3, #80	; 0x50
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	3301      	adds	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d3af      	bcc.n	8003170 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003210:	2300      	movs	r3, #0
 8003212:	73fb      	strb	r3, [r7, #15]
 8003214:	e044      	b.n	80032a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	3301      	adds	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d3b5      	bcc.n	8003216 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	687e      	ldr	r6, [r7, #4]
 80032b2:	466d      	mov	r5, sp
 80032b4:	f106 0410 	add.w	r4, r6, #16
 80032b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80032c8:	1d33      	adds	r3, r6, #4
 80032ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032cc:	6838      	ldr	r0, [r7, #0]
 80032ce:	f002 ff9d 	bl	800620c <USB_DevInit>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e014      	b.n	800330e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d102      	bne.n	8003302 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f80b 	bl	8003318 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f003 f957 	bl	80065ba <USB_DevDisconnect>

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003318 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_PCDEx_ActivateLPM+0x44>)
 8003348:	4313      	orrs	r3, r2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	10000003 	.word	0x10000003

08003360 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800336a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336e:	6013      	str	r3, [r2, #0]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40007000 	.word	0x40007000

08003380 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	4b23      	ldr	r3, [pc, #140]	; (8003418 <HAL_PWREx_EnableOverDrive+0x98>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a22      	ldr	r2, [pc, #136]	; (8003418 <HAL_PWREx_EnableOverDrive+0x98>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_PWREx_EnableOverDrive+0x98>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033ae:	f7fe f9a5 	bl	80016fc <HAL_GetTick>
 80033b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033b4:	e009      	b.n	80033ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033b6:	f7fe f9a1 	bl	80016fc <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c4:	d901      	bls.n	80033ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e022      	b.n	8003410 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d6:	d1ee      	bne.n	80033b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0f      	ldr	r2, [pc, #60]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e4:	f7fe f98a 	bl	80016fc <HAL_GetTick>
 80033e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033ea:	e009      	b.n	8003400 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033ec:	f7fe f986 	bl	80016fc <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033fa:	d901      	bls.n	8003400 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e007      	b.n	8003410 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800340c:	d1ee      	bne.n	80033ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	40007000 	.word	0x40007000

08003420 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003428:	2300      	movs	r3, #0
 800342a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e29b      	b.n	800396e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8087 	beq.w	8003552 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003444:	4b96      	ldr	r3, [pc, #600]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b04      	cmp	r3, #4
 800344e:	d00c      	beq.n	800346a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003450:	4b93      	ldr	r3, [pc, #588]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	d112      	bne.n	8003482 <HAL_RCC_OscConfig+0x62>
 800345c:	4b90      	ldr	r3, [pc, #576]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003468:	d10b      	bne.n	8003482 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346a:	4b8d      	ldr	r3, [pc, #564]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d06c      	beq.n	8003550 <HAL_RCC_OscConfig+0x130>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d168      	bne.n	8003550 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e275      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348a:	d106      	bne.n	800349a <HAL_RCC_OscConfig+0x7a>
 800348c:	4b84      	ldr	r3, [pc, #528]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a83      	ldr	r2, [pc, #524]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	e02e      	b.n	80034f8 <HAL_RCC_OscConfig+0xd8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x9c>
 80034a2:	4b7f      	ldr	r3, [pc, #508]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7e      	ldr	r2, [pc, #504]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b7c      	ldr	r3, [pc, #496]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a7b      	ldr	r2, [pc, #492]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e01d      	b.n	80034f8 <HAL_RCC_OscConfig+0xd8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0xc0>
 80034c6:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a75      	ldr	r2, [pc, #468]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b73      	ldr	r3, [pc, #460]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a72      	ldr	r2, [pc, #456]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0xd8>
 80034e0:	4b6f      	ldr	r3, [pc, #444]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6e      	ldr	r2, [pc, #440]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b6c      	ldr	r3, [pc, #432]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a6b      	ldr	r2, [pc, #428]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe f8fc 	bl	80016fc <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7fe f8f8 	bl	80016fc <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e229      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b61      	ldr	r3, [pc, #388]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0xe8>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe f8e8 	bl	80016fc <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7fe f8e4 	bl	80016fc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e215      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	4b57      	ldr	r3, [pc, #348]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x110>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d069      	beq.n	8003632 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800355e:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800356a:	4b4d      	ldr	r3, [pc, #308]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b08      	cmp	r3, #8
 8003574:	d11c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x190>
 8003576:	4b4a      	ldr	r3, [pc, #296]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_RCC_OscConfig+0x17a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d001      	beq.n	800359a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e1e9      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359a:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	493d      	ldr	r1, [pc, #244]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	e040      	b.n	8003632 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d023      	beq.n	8003600 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b8:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a38      	ldr	r2, [pc, #224]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe f89a 	bl	80016fc <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035cc:	f7fe f896 	bl	80016fc <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1c7      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4929      	ldr	r1, [pc, #164]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
 80035fe:	e018      	b.n	8003632 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe f876 	bl	80016fc <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003614:	f7fe f872 	bl	80016fc <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1a3      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d038      	beq.n	80036b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d019      	beq.n	800367a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364a:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe f853 	bl	80016fc <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365a:	f7fe f84f 	bl	80016fc <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e180      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800366e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x23a>
 8003678:	e01a      	b.n	80036b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367e:	4a08      	ldr	r2, [pc, #32]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe f839 	bl	80016fc <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368e:	f7fe f835 	bl	80016fc <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d903      	bls.n	80036a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e166      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
 80036a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a4:	4b92      	ldr	r3, [pc, #584]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ee      	bne.n	800368e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80a4 	beq.w	8003806 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b8c      	ldr	r3, [pc, #560]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4b89      	ldr	r3, [pc, #548]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a88      	ldr	r2, [pc, #544]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b86      	ldr	r3, [pc, #536]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e6:	4b83      	ldr	r3, [pc, #524]	; (80038f4 <HAL_RCC_OscConfig+0x4d4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d118      	bne.n	8003724 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036f2:	4b80      	ldr	r3, [pc, #512]	; (80038f4 <HAL_RCC_OscConfig+0x4d4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7f      	ldr	r2, [pc, #508]	; (80038f4 <HAL_RCC_OscConfig+0x4d4>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fe:	f7fd fffd 	bl	80016fc <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003706:	f7fd fff9 	bl	80016fc <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b64      	cmp	r3, #100	; 0x64
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e12a      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003718:	4b76      	ldr	r3, [pc, #472]	; (80038f4 <HAL_RCC_OscConfig+0x4d4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x31a>
 800372c:	4b70      	ldr	r3, [pc, #448]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a6f      	ldr	r2, [pc, #444]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e02d      	b.n	8003796 <HAL_RCC_OscConfig+0x376>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x33c>
 8003742:	4b6b      	ldr	r3, [pc, #428]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a6a      	ldr	r2, [pc, #424]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	4b68      	ldr	r3, [pc, #416]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a67      	ldr	r2, [pc, #412]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	e01c      	b.n	8003796 <HAL_RCC_OscConfig+0x376>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b05      	cmp	r3, #5
 8003762:	d10c      	bne.n	800377e <HAL_RCC_OscConfig+0x35e>
 8003764:	4b62      	ldr	r3, [pc, #392]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a61      	ldr	r2, [pc, #388]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
 8003770:	4b5f      	ldr	r3, [pc, #380]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a5e      	ldr	r2, [pc, #376]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
 800377c:	e00b      	b.n	8003796 <HAL_RCC_OscConfig+0x376>
 800377e:	4b5c      	ldr	r3, [pc, #368]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a5b      	ldr	r2, [pc, #364]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
 800378a:	4b59      	ldr	r3, [pc, #356]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a58      	ldr	r2, [pc, #352]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d015      	beq.n	80037ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fd ffad 	bl	80016fc <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fd ffa9 	bl	80016fc <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0d8      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ee      	beq.n	80037a6 <HAL_RCC_OscConfig+0x386>
 80037c8:	e014      	b.n	80037f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fd ff97 	bl	80016fc <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fd ff93 	bl	80016fc <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0c2      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e8:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ee      	bne.n	80037d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a3c      	ldr	r2, [pc, #240]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80ae 	beq.w	800396c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003810:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d06d      	beq.n	80038f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d14b      	bne.n	80038bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a31      	ldr	r2, [pc, #196]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800382a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fd ff64 	bl	80016fc <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fd ff60 	bl	80016fc <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e091      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	085b      	lsrs	r3, r3, #1
 800386e:	3b01      	subs	r3, #1
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	071b      	lsls	r3, r3, #28
 8003882:	491b      	ldr	r1, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003888:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800388e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fd ff32 	bl	80016fc <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389c:	f7fd ff2e 	bl	80016fc <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e05f      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x47c>
 80038ba:	e057      	b.n	800396c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038bc:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80038c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fd ff18 	bl	80016fc <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fd ff14 	bl	80016fc <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e045      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4b0>
 80038ee:	e03d      	b.n	800396c <HAL_RCC_OscConfig+0x54c>
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038f8:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <HAL_RCC_OscConfig+0x558>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d030      	beq.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d129      	bne.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d122      	bne.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003928:	4013      	ands	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800392e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003930:	4293      	cmp	r3, r2
 8003932:	d119      	bne.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	3b01      	subs	r3, #1
 8003942:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d10f      	bne.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800

0800397c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0d0      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b6a      	ldr	r3, [pc, #424]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d910      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b67      	ldr	r3, [pc, #412]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 020f 	bic.w	r2, r3, #15
 80039aa:	4965      	ldr	r1, [pc, #404]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0b8      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a58      	ldr	r2, [pc, #352]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 80039e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f4:	4b53      	ldr	r3, [pc, #332]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a52      	ldr	r2, [pc, #328]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 80039fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a00:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	494d      	ldr	r1, [pc, #308]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d040      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d115      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e07f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3e:	4b41      	ldr	r3, [pc, #260]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e073      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4e:	4b3d      	ldr	r3, [pc, #244]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e06b      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5e:	4b39      	ldr	r3, [pc, #228]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 0203 	bic.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4936      	ldr	r1, [pc, #216]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a70:	f7fd fe44 	bl	80016fc <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a78:	f7fd fe40 	bl	80016fc <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e053      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 020c 	and.w	r2, r3, #12
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1eb      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d210      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 020f 	bic.w	r2, r3, #15
 8003ab6:	4922      	ldr	r1, [pc, #136]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e032      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4916      	ldr	r1, [pc, #88]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	490e      	ldr	r1, [pc, #56]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b0e:	f000 f821 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 8003b12:	4602      	mov	r2, r0
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	490a      	ldr	r1, [pc, #40]	; (8003b48 <HAL_RCC_ClockConfig+0x1cc>)
 8003b20:	5ccb      	ldrb	r3, [r1, r3]
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x1d0>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1d4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fda0 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023c00 	.word	0x40023c00
 8003b44:	40023800 	.word	0x40023800
 8003b48:	080076fc 	.word	0x080076fc
 8003b4c:	20000008 	.word	0x20000008
 8003b50:	2000000c 	.word	0x2000000c

08003b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	607b      	str	r3, [r7, #4]
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	2300      	movs	r3, #0
 8003b66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b6c:	4b67      	ldr	r3, [pc, #412]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d00d      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x40>
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	f200 80bd 	bhi.w	8003cf8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x34>
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b86:	e0b7      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b61      	ldr	r3, [pc, #388]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b8a:	60bb      	str	r3, [r7, #8]
      break;
 8003b8c:	e0b7      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8e:	4b61      	ldr	r3, [pc, #388]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b90:	60bb      	str	r3, [r7, #8]
      break;
 8003b92:	e0b4      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b94:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b9e:	4b5b      	ldr	r3, [pc, #364]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d04d      	beq.n	8003c46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003baa:	4b58      	ldr	r3, [pc, #352]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	ea02 0800 	and.w	r8, r2, r0
 8003bc2:	ea03 0901 	and.w	r9, r3, r1
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	4649      	mov	r1, r9
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	014b      	lsls	r3, r1, #5
 8003bd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bd8:	0142      	lsls	r2, r0, #5
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	ebb0 0008 	subs.w	r0, r0, r8
 8003be2:	eb61 0109 	sbc.w	r1, r1, r9
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	018b      	lsls	r3, r1, #6
 8003bf0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bf4:	0182      	lsls	r2, r0, #6
 8003bf6:	1a12      	subs	r2, r2, r0
 8003bf8:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfc:	f04f 0000 	mov.w	r0, #0
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	00d9      	lsls	r1, r3, #3
 8003c06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c0a:	00d0      	lsls	r0, r2, #3
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	eb12 0208 	adds.w	r2, r2, r8
 8003c14:	eb43 0309 	adc.w	r3, r3, r9
 8003c18:	f04f 0000 	mov.w	r0, #0
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	0259      	lsls	r1, r3, #9
 8003c22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c26:	0250      	lsls	r0, r2, #9
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	f7fc fb52 	bl	80002e0 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e04a      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c46:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	ea02 0400 	and.w	r4, r2, r0
 8003c5e:	ea03 0501 	and.w	r5, r3, r1
 8003c62:	4620      	mov	r0, r4
 8003c64:	4629      	mov	r1, r5
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	014b      	lsls	r3, r1, #5
 8003c70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c74:	0142      	lsls	r2, r0, #5
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	1b00      	subs	r0, r0, r4
 8003c7c:	eb61 0105 	sbc.w	r1, r1, r5
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	018b      	lsls	r3, r1, #6
 8003c8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c8e:	0182      	lsls	r2, r0, #6
 8003c90:	1a12      	subs	r2, r2, r0
 8003c92:	eb63 0301 	sbc.w	r3, r3, r1
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	00d9      	lsls	r1, r3, #3
 8003ca0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca4:	00d0      	lsls	r0, r2, #3
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	1912      	adds	r2, r2, r4
 8003cac:	eb45 0303 	adc.w	r3, r5, r3
 8003cb0:	f04f 0000 	mov.w	r0, #0
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	0299      	lsls	r1, r3, #10
 8003cba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cbe:	0290      	lsls	r0, r2, #10
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	f7fc fb06 	bl	80002e0 <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4613      	mov	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	60bb      	str	r3, [r7, #8]
      break;
 8003cf6:	e002      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cfa:	60bb      	str	r3, [r7, #8]
      break;
 8003cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	00f42400 	.word	0x00f42400
 8003d14:	007a1200 	.word	0x007a1200

08003d18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000008 	.word	0x20000008

08003d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d34:	f7ff fff0 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	0a9b      	lsrs	r3, r3, #10
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4903      	ldr	r1, [pc, #12]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40023800 	.word	0x40023800
 8003d54:	0800770c 	.word	0x0800770c

08003d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d5c:	f7ff ffdc 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	0b5b      	lsrs	r3, r3, #13
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4903      	ldr	r1, [pc, #12]	; (8003d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	0800770c 	.word	0x0800770c

08003d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d012      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003da8:	4b69      	ldr	r3, [pc, #420]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a68      	ldr	r2, [pc, #416]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003db2:	6093      	str	r3, [r2, #8]
 8003db4:	4b66      	ldr	r3, [pc, #408]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	4964      	ldr	r1, [pc, #400]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d017      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dda:	4b5d      	ldr	r3, [pc, #372]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de8:	4959      	ldr	r1, [pc, #356]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df8:	d101      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d017      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e16:	4b4e      	ldr	r3, [pc, #312]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	494a      	ldr	r1, [pc, #296]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e34:	d101      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e52:	2301      	movs	r3, #1
 8003e54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 808b 	beq.w	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e64:	4b3a      	ldr	r3, [pc, #232]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	4a39      	ldr	r2, [pc, #228]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e70:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e7c:	4b35      	ldr	r3, [pc, #212]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a34      	ldr	r2, [pc, #208]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e88:	f7fd fc38 	bl	80016fc <HAL_GetTick>
 8003e8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e90:	f7fd fc34 	bl	80016fc <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e38f      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ea2:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eae:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d035      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d02e      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ecc:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ed6:	4b1e      	ldr	r3, [pc, #120]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ee2:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a1a      	ldr	r2, [pc, #104]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003eee:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ef4:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d114      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fd fbfc 	bl	80016fc <HAL_GetTick>
 8003f04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f06:	e00a      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f08:	f7fd fbf8 	bl	80016fc <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e351      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ee      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f36:	d111      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f44:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f46:	400b      	ands	r3, r1
 8003f48:	4901      	ldr	r1, [pc, #4]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40007000 	.word	0x40007000
 8003f58:	0ffffcff 	.word	0x0ffffcff
 8003f5c:	4bb3      	ldr	r3, [pc, #716]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4ab2      	ldr	r2, [pc, #712]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f66:	6093      	str	r3, [r2, #8]
 8003f68:	4bb0      	ldr	r3, [pc, #704]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f74:	49ad      	ldr	r1, [pc, #692]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d010      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f86:	4ba9      	ldr	r3, [pc, #676]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8c:	4aa7      	ldr	r2, [pc, #668]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f96:	4ba5      	ldr	r3, [pc, #660]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	49a2      	ldr	r1, [pc, #648]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb4:	4b9d      	ldr	r3, [pc, #628]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc2:	499a      	ldr	r1, [pc, #616]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd6:	4b95      	ldr	r3, [pc, #596]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe4:	4991      	ldr	r1, [pc, #580]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff8:	4b8c      	ldr	r3, [pc, #560]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004006:	4989      	ldr	r1, [pc, #548]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800401a:	4b84      	ldr	r3, [pc, #528]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4980      	ldr	r1, [pc, #512]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800403c:	4b7b      	ldr	r3, [pc, #492]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	f023 0203 	bic.w	r2, r3, #3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	4978      	ldr	r1, [pc, #480]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800405e:	4b73      	ldr	r3, [pc, #460]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	f023 020c 	bic.w	r2, r3, #12
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406c:	496f      	ldr	r1, [pc, #444]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004080:	4b6a      	ldr	r3, [pc, #424]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408e:	4967      	ldr	r1, [pc, #412]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040a2:	4b62      	ldr	r3, [pc, #392]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	495e      	ldr	r1, [pc, #376]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040c4:	4b59      	ldr	r3, [pc, #356]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	4956      	ldr	r1, [pc, #344]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040e6:	4b51      	ldr	r3, [pc, #324]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	494d      	ldr	r1, [pc, #308]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004108:	4b48      	ldr	r3, [pc, #288]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004116:	4945      	ldr	r1, [pc, #276]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800412a:	4b40      	ldr	r3, [pc, #256]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004130:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004138:	493c      	ldr	r1, [pc, #240]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800414c:	4b37      	ldr	r3, [pc, #220]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800415a:	4934      	ldr	r1, [pc, #208]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d011      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800416e:	4b2f      	ldr	r3, [pc, #188]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004174:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800417c:	492b      	ldr	r1, [pc, #172]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800418c:	d101      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800418e:	2301      	movs	r3, #1
 8004190:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800419e:	2301      	movs	r3, #1
 80041a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ae:	4b1f      	ldr	r3, [pc, #124]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041bc:	491b      	ldr	r1, [pc, #108]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00b      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041d0:	4b16      	ldr	r3, [pc, #88]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e0:	4912      	ldr	r1, [pc, #72]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041f4:	4b0d      	ldr	r3, [pc, #52]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004204:	4909      	ldr	r1, [pc, #36]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00f      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800421a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800421e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	e002      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800
 8004230:	4986      	ldr	r1, [pc, #536]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004244:	4b81      	ldr	r3, [pc, #516]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800424a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004254:	497d      	ldr	r1, [pc, #500]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d006      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80d6 	beq.w	800441c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004270:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a75      	ldr	r2, [pc, #468]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004276:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800427a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427c:	f7fd fa3e 	bl	80016fc <HAL_GetTick>
 8004280:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004284:	f7fd fa3a 	bl	80016fc <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e195      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004296:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d021      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d11d      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042b6:	4b65      	ldr	r3, [pc, #404]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042c4:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ca:	0e1b      	lsrs	r3, r3, #24
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	019a      	lsls	r2, r3, #6
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	431a      	orrs	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	071b      	lsls	r3, r3, #28
 80042ea:	4958      	ldr	r1, [pc, #352]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004310:	2b00      	cmp	r3, #0
 8004312:	d02e      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431c:	d129      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800431e:	4b4b      	ldr	r3, [pc, #300]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800432c:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004332:	0f1b      	lsrs	r3, r3, #28
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	019a      	lsls	r2, r3, #6
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	041b      	lsls	r3, r3, #16
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	061b      	lsls	r3, r3, #24
 800434c:	431a      	orrs	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	071b      	lsls	r3, r3, #28
 8004352:	493e      	ldr	r1, [pc, #248]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800435a:	4b3c      	ldr	r3, [pc, #240]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800435c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004360:	f023 021f 	bic.w	r2, r3, #31
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	3b01      	subs	r3, #1
 800436a:	4938      	ldr	r1, [pc, #224]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01d      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800437e:	4b33      	ldr	r3, [pc, #204]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004384:	0e1b      	lsrs	r3, r3, #24
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800438c:	4b2f      	ldr	r3, [pc, #188]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004392:	0f1b      	lsrs	r3, r3, #28
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	019a      	lsls	r2, r3, #6
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	431a      	orrs	r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	061b      	lsls	r3, r3, #24
 80043ac:	431a      	orrs	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	071b      	lsls	r3, r3, #28
 80043b2:	4926      	ldr	r1, [pc, #152]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d011      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	019a      	lsls	r2, r3, #6
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	061b      	lsls	r3, r3, #24
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	491a      	ldr	r1, [pc, #104]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043ea:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a17      	ldr	r2, [pc, #92]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f6:	f7fd f981 	bl	80016fc <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043fc:	e008      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043fe:	f7fd f97d 	bl	80016fc <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b64      	cmp	r3, #100	; 0x64
 800440a:	d901      	bls.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e0d8      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004410:	4b0e      	ldr	r3, [pc, #56]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b01      	cmp	r3, #1
 8004420:	f040 80ce 	bne.w	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004424:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a08      	ldr	r2, [pc, #32]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004430:	f7fd f964 	bl	80016fc <HAL_GetTick>
 8004434:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004436:	e00b      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004438:	f7fd f960 	bl	80016fc <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d904      	bls.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e0bb      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004450:	4b5e      	ldr	r3, [pc, #376]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445c:	d0ec      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800447a:	2b00      	cmp	r3, #0
 800447c:	d02e      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d12a      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004486:	4b51      	ldr	r3, [pc, #324]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004494:	4b4d      	ldr	r3, [pc, #308]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	0f1b      	lsrs	r3, r3, #28
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	019a      	lsls	r2, r3, #6
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	061b      	lsls	r3, r3, #24
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	071b      	lsls	r3, r3, #28
 80044ba:	4944      	ldr	r1, [pc, #272]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044c2:	4b42      	ldr	r3, [pc, #264]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	493d      	ldr	r1, [pc, #244]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d022      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f0:	d11d      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044f2:	4b36      	ldr	r3, [pc, #216]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	0e1b      	lsrs	r3, r3, #24
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004500:	4b32      	ldr	r3, [pc, #200]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	0f1b      	lsrs	r3, r3, #28
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	019a      	lsls	r2, r3, #6
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	431a      	orrs	r2, r3
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	061b      	lsls	r3, r3, #24
 8004520:	431a      	orrs	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	4929      	ldr	r1, [pc, #164]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d028      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800453a:	4b24      	ldr	r3, [pc, #144]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	0e1b      	lsrs	r3, r3, #24
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004548:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	0c1b      	lsrs	r3, r3, #16
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	019a      	lsls	r2, r3, #6
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	431a      	orrs	r2, r3
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	071b      	lsls	r3, r3, #28
 800456e:	4917      	ldr	r1, [pc, #92]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800457c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	4911      	ldr	r1, [pc, #68]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0e      	ldr	r2, [pc, #56]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004598:	f7fd f8b0 	bl	80016fc <HAL_GetTick>
 800459c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045a0:	f7fd f8ac 	bl	80016fc <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	; 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e007      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045be:	d1ef      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800

080045d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e049      	b.n	8004676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc febe 	bl	8001378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f000 fac0 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d001      	beq.n	8004698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e054      	b.n	8004742 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a26      	ldr	r2, [pc, #152]	; (8004750 <HAL_TIM_Base_Start_IT+0xd0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d022      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x80>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c2:	d01d      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x80>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a22      	ldr	r2, [pc, #136]	; (8004754 <HAL_TIM_Base_Start_IT+0xd4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d018      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x80>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a21      	ldr	r2, [pc, #132]	; (8004758 <HAL_TIM_Base_Start_IT+0xd8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d013      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x80>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1f      	ldr	r2, [pc, #124]	; (800475c <HAL_TIM_Base_Start_IT+0xdc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00e      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x80>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <HAL_TIM_Base_Start_IT+0xe0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d009      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x80>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <HAL_TIM_Base_Start_IT+0xe4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x80>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <HAL_TIM_Base_Start_IT+0xe8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d115      	bne.n	800472c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_TIM_Base_Start_IT+0xec>)
 8004708:	4013      	ands	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b06      	cmp	r3, #6
 8004710:	d015      	beq.n	800473e <HAL_TIM_Base_Start_IT+0xbe>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004718:	d011      	beq.n	800473e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472a:	e008      	b.n	800473e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e000      	b.n	8004740 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40010000 	.word	0x40010000
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40000c00 	.word	0x40000c00
 8004760:	40010400 	.word	0x40010400
 8004764:	40014000 	.word	0x40014000
 8004768:	40001800 	.word	0x40001800
 800476c:	00010007 	.word	0x00010007

08004770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d122      	bne.n	80047cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d11b      	bne.n	80047cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0202 	mvn.w	r2, #2
 800479c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f9d0 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f9c2 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f9d3 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0204 	mvn.w	r2, #4
 80047f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f9a6 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f998 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f9a9 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b08      	cmp	r3, #8
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0208 	mvn.w	r2, #8
 8004844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2204      	movs	r2, #4
 800484a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f97c 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f96e 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f97f 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b10      	cmp	r3, #16
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b10      	cmp	r3, #16
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0210 	mvn.w	r2, #16
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2208      	movs	r2, #8
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f952 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f944 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f955 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0201 	mvn.w	r2, #1
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fc f93c 	bl	8000b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d10e      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d107      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fb0c 	bl	8004f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492e:	d10e      	bne.n	800494e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d107      	bne.n	800494e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 faff 	bl	8004f4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d10e      	bne.n	800497a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d107      	bne.n	800497a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f903 	bl	8004b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b20      	cmp	r3, #32
 8004986:	d10e      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b20      	cmp	r3, #32
 8004994:	d107      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f06f 0220 	mvn.w	r2, #32
 800499e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fabf 	bl	8004f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIM_ConfigClockSource+0x1c>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e0b4      	b.n	8004b36 <HAL_TIM_ConfigClockSource+0x186>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	4b56      	ldr	r3, [pc, #344]	; (8004b40 <HAL_TIM_ConfigClockSource+0x190>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a04:	d03e      	beq.n	8004a84 <HAL_TIM_ConfigClockSource+0xd4>
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0a:	f200 8087 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a12:	f000 8086 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x172>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1a:	d87f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b70      	cmp	r3, #112	; 0x70
 8004a1e:	d01a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0xa6>
 8004a20:	2b70      	cmp	r3, #112	; 0x70
 8004a22:	d87b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b60      	cmp	r3, #96	; 0x60
 8004a26:	d050      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x11a>
 8004a28:	2b60      	cmp	r3, #96	; 0x60
 8004a2a:	d877      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b50      	cmp	r3, #80	; 0x50
 8004a2e:	d03c      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0xfa>
 8004a30:	2b50      	cmp	r3, #80	; 0x50
 8004a32:	d873      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d058      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x13a>
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d86f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b30      	cmp	r3, #48	; 0x30
 8004a3e:	d064      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a40:	2b30      	cmp	r3, #48	; 0x30
 8004a42:	d86b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d060      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d867      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05c      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d05a      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a54:	e062      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6899      	ldr	r1, [r3, #8]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f000 f9af 	bl	8004dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	609a      	str	r2, [r3, #8]
      break;
 8004a82:	e04f      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f000 f998 	bl	8004dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aa6:	609a      	str	r2, [r3, #8]
      break;
 8004aa8:	e03c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 f90c 	bl	8004cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2150      	movs	r1, #80	; 0x50
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 f965 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e02c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 f92b 	bl	8004d32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2160      	movs	r1, #96	; 0x60
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f955 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e01c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 f8ec 	bl	8004cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2140      	movs	r1, #64	; 0x40
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f945 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004b08:	e00c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f000 f93c 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004b1a:	e003      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b20:	e000      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	fffeff88 	.word	0xfffeff88

08004b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a40      	ldr	r2, [pc, #256]	; (8004ca8 <TIM_Base_SetConfig+0x114>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d013      	beq.n	8004bd4 <TIM_Base_SetConfig+0x40>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb2:	d00f      	beq.n	8004bd4 <TIM_Base_SetConfig+0x40>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a3d      	ldr	r2, [pc, #244]	; (8004cac <TIM_Base_SetConfig+0x118>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <TIM_Base_SetConfig+0x40>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a3c      	ldr	r2, [pc, #240]	; (8004cb0 <TIM_Base_SetConfig+0x11c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d007      	beq.n	8004bd4 <TIM_Base_SetConfig+0x40>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a3b      	ldr	r2, [pc, #236]	; (8004cb4 <TIM_Base_SetConfig+0x120>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_Base_SetConfig+0x40>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a3a      	ldr	r2, [pc, #232]	; (8004cb8 <TIM_Base_SetConfig+0x124>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d108      	bne.n	8004be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2f      	ldr	r2, [pc, #188]	; (8004ca8 <TIM_Base_SetConfig+0x114>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d02b      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf4:	d027      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a2c      	ldr	r2, [pc, #176]	; (8004cac <TIM_Base_SetConfig+0x118>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d023      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a2b      	ldr	r2, [pc, #172]	; (8004cb0 <TIM_Base_SetConfig+0x11c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01f      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a2a      	ldr	r2, [pc, #168]	; (8004cb4 <TIM_Base_SetConfig+0x120>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01b      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a29      	ldr	r2, [pc, #164]	; (8004cb8 <TIM_Base_SetConfig+0x124>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d017      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a28      	ldr	r2, [pc, #160]	; (8004cbc <TIM_Base_SetConfig+0x128>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a27      	ldr	r2, [pc, #156]	; (8004cc0 <TIM_Base_SetConfig+0x12c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00f      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a26      	ldr	r2, [pc, #152]	; (8004cc4 <TIM_Base_SetConfig+0x130>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a25      	ldr	r2, [pc, #148]	; (8004cc8 <TIM_Base_SetConfig+0x134>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <TIM_Base_SetConfig+0x138>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a23      	ldr	r2, [pc, #140]	; (8004cd0 <TIM_Base_SetConfig+0x13c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d108      	bne.n	8004c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <TIM_Base_SetConfig+0x114>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0xf8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a0c      	ldr	r2, [pc, #48]	; (8004cb8 <TIM_Base_SetConfig+0x124>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d103      	bne.n	8004c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	615a      	str	r2, [r3, #20]
}
 8004c9a:	bf00      	nop
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	40000800 	.word	0x40000800
 8004cb4:	40000c00 	.word	0x40000c00
 8004cb8:	40010400 	.word	0x40010400
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800
 8004cc8:	40001800 	.word	0x40001800
 8004ccc:	40001c00 	.word	0x40001c00
 8004cd0:	40002000 	.word	0x40002000

08004cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f023 0201 	bic.w	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f023 030a 	bic.w	r3, r3, #10
 8004d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b087      	sub	sp, #28
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0210 	bic.w	r2, r3, #16
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	031b      	lsls	r3, r3, #12
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f043 0307 	orr.w	r3, r3, #7
 8004db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	609a      	str	r2, [r3, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	021a      	lsls	r2, r3, #8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	609a      	str	r2, [r3, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e06d      	b.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a30      	ldr	r2, [pc, #192]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d108      	bne.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d022      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e92:	d01d      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d018      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d013      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1a      	ldr	r2, [pc, #104]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00e      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d009      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a16      	ldr	r2, [pc, #88]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d10c      	bne.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40010400 	.word	0x40010400
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	40001800 	.word	0x40001800

08004f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e040      	b.n	8004ff4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fc fa6a 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2224      	movs	r2, #36	; 0x24
 8004f8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fbca 	bl	8005738 <UART_SetConfig>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e022      	b.n	8004ff4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fe20 	bl	8005bfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fea7 	bl	8005d40 <UART_CheckIdleState>
 8004ff2:	4603      	mov	r3, r0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005010:	2b20      	cmp	r3, #32
 8005012:	f040 8081 	bne.w	8005118 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <HAL_UART_Transmit+0x26>
 800501c:	88fb      	ldrh	r3, [r7, #6]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e079      	b.n	800511a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_UART_Transmit+0x38>
 8005030:	2302      	movs	r3, #2
 8005032:	e072      	b.n	800511a <HAL_UART_Transmit+0x11e>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2221      	movs	r2, #33	; 0x21
 8005048:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800504a:	f7fc fb57 	bl	80016fc <HAL_GetTick>
 800504e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	88fa      	ldrh	r2, [r7, #6]
 8005054:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	88fa      	ldrh	r2, [r7, #6]
 800505c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005068:	d108      	bne.n	800507c <HAL_UART_Transmit+0x80>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d104      	bne.n	800507c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	e003      	b.n	8005084 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005080:	2300      	movs	r3, #0
 8005082:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800508c:	e02c      	b.n	80050e8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2200      	movs	r2, #0
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fe9a 	bl	8005dd2 <UART_WaitOnFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e038      	b.n	800511a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	3302      	adds	r3, #2
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	e007      	b.n	80050d6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	781a      	ldrb	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3301      	adds	r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1cc      	bne.n	800508e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2140      	movs	r1, #64	; 0x40
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fe67 	bl	8005dd2 <UART_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e005      	b.n	800511a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	e000      	b.n	800511a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005118:	2302      	movs	r3, #2
  }
}
 800511a:	4618      	mov	r0, r3
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b0ba      	sub	sp, #232	; 0xe8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800514a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800514e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005152:	4013      	ands	r3, r2
 8005154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d115      	bne.n	800518c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00f      	beq.n	800518c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800516c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 82a4 	beq.w	80056ca <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
      }
      return;
 800518a:	e29e      	b.n	80056ca <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800518c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8117 	beq.w	80053c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051a6:	4b85      	ldr	r3, [pc, #532]	; (80053bc <HAL_UART_IRQHandler+0x298>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 810a 	beq.w	80053c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d011      	beq.n	80051e0 <HAL_UART_IRQHandler+0xbc>
 80051bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00b      	beq.n	80051e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2201      	movs	r2, #1
 80051ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051d6:	f043 0201 	orr.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d011      	beq.n	8005210 <HAL_UART_IRQHandler+0xec>
 80051ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00b      	beq.n	8005210 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2202      	movs	r2, #2
 80051fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005206:	f043 0204 	orr.w	r2, r3, #4
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d011      	beq.n	8005240 <HAL_UART_IRQHandler+0x11c>
 800521c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2204      	movs	r2, #4
 800522e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005236:	f043 0202 	orr.w	r2, r3, #2
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d017      	beq.n	800527c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800524c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b00      	cmp	r3, #0
 8005256:	d105      	bne.n	8005264 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800525c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2208      	movs	r2, #8
 800526a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005272:	f043 0208 	orr.w	r2, r3, #8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005284:	2b00      	cmp	r3, #0
 8005286:	d012      	beq.n	80052ae <HAL_UART_IRQHandler+0x18a>
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00c      	beq.n	80052ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800529c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 820a 	beq.w	80056ce <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00d      	beq.n	80052e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d005      	beq.n	8005306 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005302:	2b00      	cmp	r3, #0
 8005304:	d04f      	beq.n	80053a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fe27 	bl	8005f5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005316:	2b40      	cmp	r3, #64	; 0x40
 8005318:	d141      	bne.n	800539e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3308      	adds	r3, #8
 8005320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3308      	adds	r3, #8
 8005342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005346:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800534a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800535e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1d9      	bne.n	800531a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536a:	2b00      	cmp	r3, #0
 800536c:	d013      	beq.n	8005396 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <HAL_UART_IRQHandler+0x29c>)
 8005374:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	4618      	mov	r0, r3
 800537c:	f7fd f817 	bl	80023ae <HAL_DMA_Abort_IT>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d017      	beq.n	80053b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005390:	4610      	mov	r0, r2
 8005392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005394:	e00f      	b.n	80053b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f9ae 	bl	80056f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	e00b      	b.n	80053b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f9aa 	bl	80056f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	e007      	b.n	80053b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f9a6 	bl	80056f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80053b4:	e18b      	b.n	80056ce <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b6:	bf00      	nop
    return;
 80053b8:	e189      	b.n	80056ce <HAL_UART_IRQHandler+0x5aa>
 80053ba:	bf00      	nop
 80053bc:	04000120 	.word	0x04000120
 80053c0:	08006021 	.word	0x08006021

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	f040 8144 	bne.w	8005656 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 813d 	beq.w	8005656 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8136 	beq.w	8005656 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2210      	movs	r2, #16
 80053f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	f040 80b2 	bne.w	8005566 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800540e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 815d 	beq.w	80056d2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800541e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005422:	429a      	cmp	r2, r3
 8005424:	f080 8155 	bcs.w	80056d2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800542e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543c:	f000 8085 	beq.w	800554a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800545c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800546a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800546e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005476:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1da      	bne.n	8005440 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3308      	adds	r3, #8
 8005490:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800549a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3308      	adds	r3, #8
 80054aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e1      	bne.n	800548a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3308      	adds	r3, #8
 80054cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3308      	adds	r3, #8
 80054e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e3      	bne.n	80054c6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800551a:	f023 0310 	bic.w	r3, r3, #16
 800551e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800552c:	65bb      	str	r3, [r7, #88]	; 0x58
 800552e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800553a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e4      	bne.n	800550a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005544:	4618      	mov	r0, r3
 8005546:	f7fc fec2 	bl	80022ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005556:	b29b      	uxth	r3, r3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	b29b      	uxth	r3, r3
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f8d4 	bl	800570c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005564:	e0b5      	b.n	80056d2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005572:	b29b      	uxth	r3, r3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80a7 	beq.w	80056d6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80a2 	beq.w	80056d6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055b4:	647b      	str	r3, [r7, #68]	; 0x44
 80055b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e4      	bne.n	8005592 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3308      	adds	r3, #8
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	623b      	str	r3, [r7, #32]
   return(result);
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055ec:	633a      	str	r2, [r7, #48]	; 0x30
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e3      	bne.n	80055c8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0310 	bic.w	r3, r3, #16
 8005626:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005634:	61fb      	str	r3, [r7, #28]
 8005636:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	69b9      	ldr	r1, [r7, #24]
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	617b      	str	r3, [r7, #20]
   return(result);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e4      	bne.n	8005612 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f85c 	bl	800570c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005654:	e03f      	b.n	80056d6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00e      	beq.n	8005680 <HAL_UART_IRQHandler+0x55c>
 8005662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005676:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f853 	bl	8005724 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800567e:	e02d      	b.n	80056dc <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00e      	beq.n	80056aa <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800568c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01c      	beq.n	80056da <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	4798      	blx	r3
    }
    return;
 80056a8:	e017      	b.n	80056da <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d012      	beq.n	80056dc <HAL_UART_IRQHandler+0x5b8>
 80056b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00c      	beq.n	80056dc <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fcc2 	bl	800604c <UART_EndTransmit_IT>
    return;
 80056c8:	e008      	b.n	80056dc <HAL_UART_IRQHandler+0x5b8>
      return;
 80056ca:	bf00      	nop
 80056cc:	e006      	b.n	80056dc <HAL_UART_IRQHandler+0x5b8>
    return;
 80056ce:	bf00      	nop
 80056d0:	e004      	b.n	80056dc <HAL_UART_IRQHandler+0x5b8>
      return;
 80056d2:	bf00      	nop
 80056d4:	e002      	b.n	80056dc <HAL_UART_IRQHandler+0x5b8>
      return;
 80056d6:	bf00      	nop
 80056d8:	e000      	b.n	80056dc <HAL_UART_IRQHandler+0x5b8>
    return;
 80056da:	bf00      	nop
  }

}
 80056dc:	37e8      	adds	r7, #232	; 0xe8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop

080056e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4ba7      	ldr	r3, [pc, #668]	; (8005a00 <UART_SetConfig+0x2c8>)
 8005764:	4013      	ands	r3, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	6979      	ldr	r1, [r7, #20]
 800576c:	430b      	orrs	r3, r1
 800576e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a95      	ldr	r2, [pc, #596]	; (8005a04 <UART_SetConfig+0x2cc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d120      	bne.n	80057f6 <UART_SetConfig+0xbe>
 80057b4:	4b94      	ldr	r3, [pc, #592]	; (8005a08 <UART_SetConfig+0x2d0>)
 80057b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d816      	bhi.n	80057f0 <UART_SetConfig+0xb8>
 80057c2:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <UART_SetConfig+0x90>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057d9 	.word	0x080057d9
 80057cc:	080057e5 	.word	0x080057e5
 80057d0:	080057df 	.word	0x080057df
 80057d4:	080057eb 	.word	0x080057eb
 80057d8:	2301      	movs	r3, #1
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e14f      	b.n	8005a7e <UART_SetConfig+0x346>
 80057de:	2302      	movs	r3, #2
 80057e0:	77fb      	strb	r3, [r7, #31]
 80057e2:	e14c      	b.n	8005a7e <UART_SetConfig+0x346>
 80057e4:	2304      	movs	r3, #4
 80057e6:	77fb      	strb	r3, [r7, #31]
 80057e8:	e149      	b.n	8005a7e <UART_SetConfig+0x346>
 80057ea:	2308      	movs	r3, #8
 80057ec:	77fb      	strb	r3, [r7, #31]
 80057ee:	e146      	b.n	8005a7e <UART_SetConfig+0x346>
 80057f0:	2310      	movs	r3, #16
 80057f2:	77fb      	strb	r3, [r7, #31]
 80057f4:	e143      	b.n	8005a7e <UART_SetConfig+0x346>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a84      	ldr	r2, [pc, #528]	; (8005a0c <UART_SetConfig+0x2d4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d132      	bne.n	8005866 <UART_SetConfig+0x12e>
 8005800:	4b81      	ldr	r3, [pc, #516]	; (8005a08 <UART_SetConfig+0x2d0>)
 8005802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b0c      	cmp	r3, #12
 800580c:	d828      	bhi.n	8005860 <UART_SetConfig+0x128>
 800580e:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <UART_SetConfig+0xdc>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	08005849 	.word	0x08005849
 8005818:	08005861 	.word	0x08005861
 800581c:	08005861 	.word	0x08005861
 8005820:	08005861 	.word	0x08005861
 8005824:	08005855 	.word	0x08005855
 8005828:	08005861 	.word	0x08005861
 800582c:	08005861 	.word	0x08005861
 8005830:	08005861 	.word	0x08005861
 8005834:	0800584f 	.word	0x0800584f
 8005838:	08005861 	.word	0x08005861
 800583c:	08005861 	.word	0x08005861
 8005840:	08005861 	.word	0x08005861
 8005844:	0800585b 	.word	0x0800585b
 8005848:	2300      	movs	r3, #0
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e117      	b.n	8005a7e <UART_SetConfig+0x346>
 800584e:	2302      	movs	r3, #2
 8005850:	77fb      	strb	r3, [r7, #31]
 8005852:	e114      	b.n	8005a7e <UART_SetConfig+0x346>
 8005854:	2304      	movs	r3, #4
 8005856:	77fb      	strb	r3, [r7, #31]
 8005858:	e111      	b.n	8005a7e <UART_SetConfig+0x346>
 800585a:	2308      	movs	r3, #8
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	e10e      	b.n	8005a7e <UART_SetConfig+0x346>
 8005860:	2310      	movs	r3, #16
 8005862:	77fb      	strb	r3, [r7, #31]
 8005864:	e10b      	b.n	8005a7e <UART_SetConfig+0x346>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a69      	ldr	r2, [pc, #420]	; (8005a10 <UART_SetConfig+0x2d8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d120      	bne.n	80058b2 <UART_SetConfig+0x17a>
 8005870:	4b65      	ldr	r3, [pc, #404]	; (8005a08 <UART_SetConfig+0x2d0>)
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005876:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800587a:	2b30      	cmp	r3, #48	; 0x30
 800587c:	d013      	beq.n	80058a6 <UART_SetConfig+0x16e>
 800587e:	2b30      	cmp	r3, #48	; 0x30
 8005880:	d814      	bhi.n	80058ac <UART_SetConfig+0x174>
 8005882:	2b20      	cmp	r3, #32
 8005884:	d009      	beq.n	800589a <UART_SetConfig+0x162>
 8005886:	2b20      	cmp	r3, #32
 8005888:	d810      	bhi.n	80058ac <UART_SetConfig+0x174>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <UART_SetConfig+0x15c>
 800588e:	2b10      	cmp	r3, #16
 8005890:	d006      	beq.n	80058a0 <UART_SetConfig+0x168>
 8005892:	e00b      	b.n	80058ac <UART_SetConfig+0x174>
 8005894:	2300      	movs	r3, #0
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e0f1      	b.n	8005a7e <UART_SetConfig+0x346>
 800589a:	2302      	movs	r3, #2
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e0ee      	b.n	8005a7e <UART_SetConfig+0x346>
 80058a0:	2304      	movs	r3, #4
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e0eb      	b.n	8005a7e <UART_SetConfig+0x346>
 80058a6:	2308      	movs	r3, #8
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e0e8      	b.n	8005a7e <UART_SetConfig+0x346>
 80058ac:	2310      	movs	r3, #16
 80058ae:	77fb      	strb	r3, [r7, #31]
 80058b0:	e0e5      	b.n	8005a7e <UART_SetConfig+0x346>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a57      	ldr	r2, [pc, #348]	; (8005a14 <UART_SetConfig+0x2dc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d120      	bne.n	80058fe <UART_SetConfig+0x1c6>
 80058bc:	4b52      	ldr	r3, [pc, #328]	; (8005a08 <UART_SetConfig+0x2d0>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058c6:	2bc0      	cmp	r3, #192	; 0xc0
 80058c8:	d013      	beq.n	80058f2 <UART_SetConfig+0x1ba>
 80058ca:	2bc0      	cmp	r3, #192	; 0xc0
 80058cc:	d814      	bhi.n	80058f8 <UART_SetConfig+0x1c0>
 80058ce:	2b80      	cmp	r3, #128	; 0x80
 80058d0:	d009      	beq.n	80058e6 <UART_SetConfig+0x1ae>
 80058d2:	2b80      	cmp	r3, #128	; 0x80
 80058d4:	d810      	bhi.n	80058f8 <UART_SetConfig+0x1c0>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <UART_SetConfig+0x1a8>
 80058da:	2b40      	cmp	r3, #64	; 0x40
 80058dc:	d006      	beq.n	80058ec <UART_SetConfig+0x1b4>
 80058de:	e00b      	b.n	80058f8 <UART_SetConfig+0x1c0>
 80058e0:	2300      	movs	r3, #0
 80058e2:	77fb      	strb	r3, [r7, #31]
 80058e4:	e0cb      	b.n	8005a7e <UART_SetConfig+0x346>
 80058e6:	2302      	movs	r3, #2
 80058e8:	77fb      	strb	r3, [r7, #31]
 80058ea:	e0c8      	b.n	8005a7e <UART_SetConfig+0x346>
 80058ec:	2304      	movs	r3, #4
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	e0c5      	b.n	8005a7e <UART_SetConfig+0x346>
 80058f2:	2308      	movs	r3, #8
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e0c2      	b.n	8005a7e <UART_SetConfig+0x346>
 80058f8:	2310      	movs	r3, #16
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e0bf      	b.n	8005a7e <UART_SetConfig+0x346>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a45      	ldr	r2, [pc, #276]	; (8005a18 <UART_SetConfig+0x2e0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d125      	bne.n	8005954 <UART_SetConfig+0x21c>
 8005908:	4b3f      	ldr	r3, [pc, #252]	; (8005a08 <UART_SetConfig+0x2d0>)
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005916:	d017      	beq.n	8005948 <UART_SetConfig+0x210>
 8005918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800591c:	d817      	bhi.n	800594e <UART_SetConfig+0x216>
 800591e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005922:	d00b      	beq.n	800593c <UART_SetConfig+0x204>
 8005924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005928:	d811      	bhi.n	800594e <UART_SetConfig+0x216>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <UART_SetConfig+0x1fe>
 800592e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005932:	d006      	beq.n	8005942 <UART_SetConfig+0x20a>
 8005934:	e00b      	b.n	800594e <UART_SetConfig+0x216>
 8005936:	2300      	movs	r3, #0
 8005938:	77fb      	strb	r3, [r7, #31]
 800593a:	e0a0      	b.n	8005a7e <UART_SetConfig+0x346>
 800593c:	2302      	movs	r3, #2
 800593e:	77fb      	strb	r3, [r7, #31]
 8005940:	e09d      	b.n	8005a7e <UART_SetConfig+0x346>
 8005942:	2304      	movs	r3, #4
 8005944:	77fb      	strb	r3, [r7, #31]
 8005946:	e09a      	b.n	8005a7e <UART_SetConfig+0x346>
 8005948:	2308      	movs	r3, #8
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e097      	b.n	8005a7e <UART_SetConfig+0x346>
 800594e:	2310      	movs	r3, #16
 8005950:	77fb      	strb	r3, [r7, #31]
 8005952:	e094      	b.n	8005a7e <UART_SetConfig+0x346>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a30      	ldr	r2, [pc, #192]	; (8005a1c <UART_SetConfig+0x2e4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d125      	bne.n	80059aa <UART_SetConfig+0x272>
 800595e:	4b2a      	ldr	r3, [pc, #168]	; (8005a08 <UART_SetConfig+0x2d0>)
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005964:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005968:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800596c:	d017      	beq.n	800599e <UART_SetConfig+0x266>
 800596e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005972:	d817      	bhi.n	80059a4 <UART_SetConfig+0x26c>
 8005974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005978:	d00b      	beq.n	8005992 <UART_SetConfig+0x25a>
 800597a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800597e:	d811      	bhi.n	80059a4 <UART_SetConfig+0x26c>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <UART_SetConfig+0x254>
 8005984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005988:	d006      	beq.n	8005998 <UART_SetConfig+0x260>
 800598a:	e00b      	b.n	80059a4 <UART_SetConfig+0x26c>
 800598c:	2301      	movs	r3, #1
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	e075      	b.n	8005a7e <UART_SetConfig+0x346>
 8005992:	2302      	movs	r3, #2
 8005994:	77fb      	strb	r3, [r7, #31]
 8005996:	e072      	b.n	8005a7e <UART_SetConfig+0x346>
 8005998:	2304      	movs	r3, #4
 800599a:	77fb      	strb	r3, [r7, #31]
 800599c:	e06f      	b.n	8005a7e <UART_SetConfig+0x346>
 800599e:	2308      	movs	r3, #8
 80059a0:	77fb      	strb	r3, [r7, #31]
 80059a2:	e06c      	b.n	8005a7e <UART_SetConfig+0x346>
 80059a4:	2310      	movs	r3, #16
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e069      	b.n	8005a7e <UART_SetConfig+0x346>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1c      	ldr	r2, [pc, #112]	; (8005a20 <UART_SetConfig+0x2e8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d137      	bne.n	8005a24 <UART_SetConfig+0x2ec>
 80059b4:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <UART_SetConfig+0x2d0>)
 80059b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80059be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059c2:	d017      	beq.n	80059f4 <UART_SetConfig+0x2bc>
 80059c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059c8:	d817      	bhi.n	80059fa <UART_SetConfig+0x2c2>
 80059ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ce:	d00b      	beq.n	80059e8 <UART_SetConfig+0x2b0>
 80059d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d4:	d811      	bhi.n	80059fa <UART_SetConfig+0x2c2>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <UART_SetConfig+0x2aa>
 80059da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059de:	d006      	beq.n	80059ee <UART_SetConfig+0x2b6>
 80059e0:	e00b      	b.n	80059fa <UART_SetConfig+0x2c2>
 80059e2:	2300      	movs	r3, #0
 80059e4:	77fb      	strb	r3, [r7, #31]
 80059e6:	e04a      	b.n	8005a7e <UART_SetConfig+0x346>
 80059e8:	2302      	movs	r3, #2
 80059ea:	77fb      	strb	r3, [r7, #31]
 80059ec:	e047      	b.n	8005a7e <UART_SetConfig+0x346>
 80059ee:	2304      	movs	r3, #4
 80059f0:	77fb      	strb	r3, [r7, #31]
 80059f2:	e044      	b.n	8005a7e <UART_SetConfig+0x346>
 80059f4:	2308      	movs	r3, #8
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	e041      	b.n	8005a7e <UART_SetConfig+0x346>
 80059fa:	2310      	movs	r3, #16
 80059fc:	77fb      	strb	r3, [r7, #31]
 80059fe:	e03e      	b.n	8005a7e <UART_SetConfig+0x346>
 8005a00:	efff69f3 	.word	0xefff69f3
 8005a04:	40011000 	.word	0x40011000
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40004400 	.word	0x40004400
 8005a10:	40004800 	.word	0x40004800
 8005a14:	40004c00 	.word	0x40004c00
 8005a18:	40005000 	.word	0x40005000
 8005a1c:	40011400 	.word	0x40011400
 8005a20:	40007800 	.word	0x40007800
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a71      	ldr	r2, [pc, #452]	; (8005bf0 <UART_SetConfig+0x4b8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d125      	bne.n	8005a7a <UART_SetConfig+0x342>
 8005a2e:	4b71      	ldr	r3, [pc, #452]	; (8005bf4 <UART_SetConfig+0x4bc>)
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a3c:	d017      	beq.n	8005a6e <UART_SetConfig+0x336>
 8005a3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a42:	d817      	bhi.n	8005a74 <UART_SetConfig+0x33c>
 8005a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a48:	d00b      	beq.n	8005a62 <UART_SetConfig+0x32a>
 8005a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a4e:	d811      	bhi.n	8005a74 <UART_SetConfig+0x33c>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <UART_SetConfig+0x324>
 8005a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a58:	d006      	beq.n	8005a68 <UART_SetConfig+0x330>
 8005a5a:	e00b      	b.n	8005a74 <UART_SetConfig+0x33c>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e00d      	b.n	8005a7e <UART_SetConfig+0x346>
 8005a62:	2302      	movs	r3, #2
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e00a      	b.n	8005a7e <UART_SetConfig+0x346>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e007      	b.n	8005a7e <UART_SetConfig+0x346>
 8005a6e:	2308      	movs	r3, #8
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e004      	b.n	8005a7e <UART_SetConfig+0x346>
 8005a74:	2310      	movs	r3, #16
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e001      	b.n	8005a7e <UART_SetConfig+0x346>
 8005a7a:	2310      	movs	r3, #16
 8005a7c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a86:	d15a      	bne.n	8005b3e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005a88:	7ffb      	ldrb	r3, [r7, #31]
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d827      	bhi.n	8005ade <UART_SetConfig+0x3a6>
 8005a8e:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x35c>)
 8005a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005ac1 	.word	0x08005ac1
 8005a9c:	08005ac9 	.word	0x08005ac9
 8005aa0:	08005adf 	.word	0x08005adf
 8005aa4:	08005acf 	.word	0x08005acf
 8005aa8:	08005adf 	.word	0x08005adf
 8005aac:	08005adf 	.word	0x08005adf
 8005ab0:	08005adf 	.word	0x08005adf
 8005ab4:	08005ad7 	.word	0x08005ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab8:	f7fe f93a 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8005abc:	61b8      	str	r0, [r7, #24]
        break;
 8005abe:	e013      	b.n	8005ae8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ac0:	f7fe f94a 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8005ac4:	61b8      	str	r0, [r7, #24]
        break;
 8005ac6:	e00f      	b.n	8005ae8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ac8:	4b4b      	ldr	r3, [pc, #300]	; (8005bf8 <UART_SetConfig+0x4c0>)
 8005aca:	61bb      	str	r3, [r7, #24]
        break;
 8005acc:	e00c      	b.n	8005ae8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ace:	f7fe f841 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 8005ad2:	61b8      	str	r0, [r7, #24]
        break;
 8005ad4:	e008      	b.n	8005ae8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ada:	61bb      	str	r3, [r7, #24]
        break;
 8005adc:	e004      	b.n	8005ae8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ae6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d074      	beq.n	8005bd8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	005a      	lsls	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	085b      	lsrs	r3, r3, #1
 8005af8:	441a      	add	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b0f      	cmp	r3, #15
 8005b08:	d916      	bls.n	8005b38 <UART_SetConfig+0x400>
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b10:	d212      	bcs.n	8005b38 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f023 030f 	bic.w	r3, r3, #15
 8005b1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	085b      	lsrs	r3, r3, #1
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	89fb      	ldrh	r3, [r7, #14]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	89fa      	ldrh	r2, [r7, #14]
 8005b34:	60da      	str	r2, [r3, #12]
 8005b36:	e04f      	b.n	8005bd8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	77bb      	strb	r3, [r7, #30]
 8005b3c:	e04c      	b.n	8005bd8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b3e:	7ffb      	ldrb	r3, [r7, #31]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d828      	bhi.n	8005b96 <UART_SetConfig+0x45e>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0x414>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b81 	.word	0x08005b81
 8005b58:	08005b97 	.word	0x08005b97
 8005b5c:	08005b87 	.word	0x08005b87
 8005b60:	08005b97 	.word	0x08005b97
 8005b64:	08005b97 	.word	0x08005b97
 8005b68:	08005b97 	.word	0x08005b97
 8005b6c:	08005b8f 	.word	0x08005b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7fe f8de 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8005b74:	61b8      	str	r0, [r7, #24]
        break;
 8005b76:	e013      	b.n	8005ba0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b78:	f7fe f8ee 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8005b7c:	61b8      	str	r0, [r7, #24]
        break;
 8005b7e:	e00f      	b.n	8005ba0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b80:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <UART_SetConfig+0x4c0>)
 8005b82:	61bb      	str	r3, [r7, #24]
        break;
 8005b84:	e00c      	b.n	8005ba0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b86:	f7fd ffe5 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 8005b8a:	61b8      	str	r0, [r7, #24]
        break;
 8005b8c:	e008      	b.n	8005ba0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b92:	61bb      	str	r3, [r7, #24]
        break;
 8005b94:	e004      	b.n	8005ba0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b9e:	bf00      	nop
    }

    if (pclk != 0U)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d018      	beq.n	8005bd8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	085a      	lsrs	r2, r3, #1
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	441a      	add	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b0f      	cmp	r3, #15
 8005bbe:	d909      	bls.n	8005bd4 <UART_SetConfig+0x49c>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc6:	d205      	bcs.n	8005bd4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60da      	str	r2, [r3, #12]
 8005bd2:	e001      	b.n	8005bd8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005be4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40007c00 	.word	0x40007c00
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	00f42400 	.word	0x00f42400

08005bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01a      	beq.n	8005d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cfa:	d10a      	bne.n	8005d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	605a      	str	r2, [r3, #4]
  }
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d50:	f7fb fcd4 	bl	80016fc <HAL_GetTick>
 8005d54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d10e      	bne.n	8005d82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f82d 	bl	8005dd2 <UART_WaitOnFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e023      	b.n	8005dca <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d10e      	bne.n	8005dae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f817 	bl	8005dd2 <UART_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e00d      	b.n	8005dca <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b09c      	sub	sp, #112	; 0x70
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de2:	e0a5      	b.n	8005f30 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	f000 80a1 	beq.w	8005f30 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dee:	f7fb fc85 	bl	80016fc <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d302      	bcc.n	8005e04 <UART_WaitOnFlagUntilTimeout+0x32>
 8005dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d13e      	bne.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e18:	667b      	str	r3, [r7, #100]	; 0x64
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e24:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e2a:	e841 2300 	strex	r3, r2, [r1]
 8005e2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1e6      	bne.n	8005e04 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	f023 0301 	bic.w	r3, r3, #1
 8005e4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3308      	adds	r3, #8
 8005e54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e56:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e5      	bne.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e067      	b.n	8005f52 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d04f      	beq.n	8005f30 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9e:	d147      	bne.n	8005f30 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ea8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e6      	bne.n	8005eaa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	613b      	str	r3, [r7, #16]
   return(result);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f023 0301 	bic.w	r3, r3, #1
 8005ef2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3308      	adds	r3, #8
 8005efa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005efc:	623a      	str	r2, [r7, #32]
 8005efe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	69f9      	ldr	r1, [r7, #28]
 8005f02:	6a3a      	ldr	r2, [r7, #32]
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e5      	bne.n	8005edc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e010      	b.n	8005f52 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69da      	ldr	r2, [r3, #28]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	bf0c      	ite	eq
 8005f40:	2301      	moveq	r3, #1
 8005f42:	2300      	movne	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	79fb      	ldrb	r3, [r7, #7]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	f43f af4a 	beq.w	8005de4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3770      	adds	r7, #112	; 0x70
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b095      	sub	sp, #84	; 0x54
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f80:	643b      	str	r3, [r7, #64]	; 0x40
 8005f82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e6      	bne.n	8005f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e5      	bne.n	8005f94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d118      	bne.n	8006002 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f023 0310 	bic.w	r3, r3, #16
 8005fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6979      	ldr	r1, [r7, #20]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e6      	bne.n	8005fd0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006014:	bf00      	nop
 8006016:	3754      	adds	r7, #84	; 0x54
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff fb5a 	bl	80056f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	60bb      	str	r3, [r7, #8]
   return(result);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6979      	ldr	r1, [r7, #20]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	613b      	str	r3, [r7, #16]
   return(result);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e6      	bne.n	8006054 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fb26 	bl	80056e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006098:	bf00      	nop
 800609a:	3720      	adds	r7, #32
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060a0:	b084      	sub	sp, #16
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b084      	sub	sp, #16
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	f107 001c 	add.w	r0, r7, #28
 80060ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d120      	bne.n	80060fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	4b20      	ldr	r3, [pc, #128]	; (800614c <USB_CoreInit+0xac>)
 80060ca:	4013      	ands	r3, r2
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d105      	bne.n	80060ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa92 	bl	8006618 <USB_CoreReset>
 80060f4:	4603      	mov	r3, r0
 80060f6:	73fb      	strb	r3, [r7, #15]
 80060f8:	e010      	b.n	800611c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa86 	bl	8006618 <USB_CoreReset>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	2b01      	cmp	r3, #1
 8006120:	d10b      	bne.n	800613a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f043 0206 	orr.w	r2, r3, #6
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f043 0220 	orr.w	r2, r3, #32
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006146:	b004      	add	sp, #16
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	ffbdffbf 	.word	0xffbdffbf

08006150 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f023 0201 	bic.w	r2, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	460b      	mov	r3, r1
 800617c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d115      	bne.n	80061c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061a0:	2001      	movs	r0, #1
 80061a2:	f7fb fab7 	bl	8001714 <HAL_Delay>
      ms++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3301      	adds	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fa25 	bl	80065fc <USB_GetMode>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d01e      	beq.n	80061f6 <USB_SetCurrentMode+0x84>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b31      	cmp	r3, #49	; 0x31
 80061bc:	d9f0      	bls.n	80061a0 <USB_SetCurrentMode+0x2e>
 80061be:	e01a      	b.n	80061f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d115      	bne.n	80061f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061d2:	2001      	movs	r0, #1
 80061d4:	f7fb fa9e 	bl	8001714 <HAL_Delay>
      ms++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa0c 	bl	80065fc <USB_GetMode>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <USB_SetCurrentMode+0x84>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b31      	cmp	r3, #49	; 0x31
 80061ee:	d9f0      	bls.n	80061d2 <USB_SetCurrentMode+0x60>
 80061f0:	e001      	b.n	80061f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e005      	b.n	8006202 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b32      	cmp	r3, #50	; 0x32
 80061fa:	d101      	bne.n	8006200 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800620c:	b084      	sub	sp, #16
 800620e:	b580      	push	{r7, lr}
 8006210:	b086      	sub	sp, #24
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800621a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006226:	2300      	movs	r3, #0
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	e009      	b.n	8006240 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	3340      	adds	r3, #64	; 0x40
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	2200      	movs	r2, #0
 8006238:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	3301      	adds	r3, #1
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b0e      	cmp	r3, #14
 8006244:	d9f2      	bls.n	800622c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d11c      	bne.n	8006286 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800625a:	f043 0302 	orr.w	r3, r3, #2
 800625e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	e005      	b.n	8006292 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006298:	461a      	mov	r2, r3
 800629a:	2300      	movs	r3, #0
 800629c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a4:	4619      	mov	r1, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ac:	461a      	mov	r2, r3
 80062ae:	680b      	ldr	r3, [r1, #0]
 80062b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d10c      	bne.n	80062d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d104      	bne.n	80062c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062be:	2100      	movs	r1, #0
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f961 	bl	8006588 <USB_SetDevSpeed>
 80062c6:	e008      	b.n	80062da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062c8:	2101      	movs	r1, #1
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f95c 	bl	8006588 <USB_SetDevSpeed>
 80062d0:	e003      	b.n	80062da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062d2:	2103      	movs	r1, #3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f957 	bl	8006588 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062da:	2110      	movs	r1, #16
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f8f3 	bl	80064c8 <USB_FlushTxFifo>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f91d 	bl	800652c <USB_FlushRxFifo>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006302:	461a      	mov	r2, r3
 8006304:	2300      	movs	r3, #0
 8006306:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630e:	461a      	mov	r2, r3
 8006310:	2300      	movs	r3, #0
 8006312:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631a:	461a      	mov	r2, r3
 800631c:	2300      	movs	r3, #0
 800631e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006320:	2300      	movs	r3, #0
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	e043      	b.n	80063ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800633c:	d118      	bne.n	8006370 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	461a      	mov	r2, r3
 8006352:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	e013      	b.n	8006382 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006366:	461a      	mov	r2, r3
 8006368:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	e008      	b.n	8006382 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637c:	461a      	mov	r2, r3
 800637e:	2300      	movs	r3, #0
 8006380:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638e:	461a      	mov	r2, r3
 8006390:	2300      	movs	r3, #0
 8006392:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a0:	461a      	mov	r2, r3
 80063a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	3301      	adds	r3, #1
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d3b7      	bcc.n	8006326 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b6:	2300      	movs	r3, #0
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	e043      	b.n	8006444 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063d2:	d118      	bne.n	8006406 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e6:	461a      	mov	r2, r3
 80063e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e013      	b.n	8006418 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fc:	461a      	mov	r2, r3
 80063fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	e008      	b.n	8006418 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006412:	461a      	mov	r2, r3
 8006414:	2300      	movs	r3, #0
 8006416:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	461a      	mov	r2, r3
 8006426:	2300      	movs	r3, #0
 8006428:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	461a      	mov	r2, r3
 8006438:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800643c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	3301      	adds	r3, #1
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	429a      	cmp	r2, r3
 800644a:	d3b7      	bcc.n	80063bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800645a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800645e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800646c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f043 0210 	orr.w	r2, r3, #16
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <USB_DevInit+0x2b4>)
 8006486:	4313      	orrs	r3, r2
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800648c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d005      	beq.n	800649e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f043 0208 	orr.w	r2, r3, #8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800649e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d105      	bne.n	80064b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <USB_DevInit+0x2b8>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064bc:	b004      	add	sp, #16
 80064be:	4770      	bx	lr
 80064c0:	803c3800 	.word	0x803c3800
 80064c4:	40000004 	.word	0x40000004

080064c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3301      	adds	r3, #1
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	4a12      	ldr	r2, [pc, #72]	; (8006528 <USB_FlushTxFifo+0x60>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e01a      	b.n	800651c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	daf3      	bge.n	80064d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	019b      	lsls	r3, r3, #6
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3301      	adds	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	4a08      	ldr	r2, [pc, #32]	; (8006528 <USB_FlushTxFifo+0x60>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d901      	bls.n	800650e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e006      	b.n	800651c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b20      	cmp	r3, #32
 8006518:	d0f1      	beq.n	80064fe <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	00030d40 	.word	0x00030d40

0800652c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3301      	adds	r3, #1
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	4a11      	ldr	r2, [pc, #68]	; (8006584 <USB_FlushRxFifo+0x58>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d901      	bls.n	8006548 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e017      	b.n	8006578 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	daf3      	bge.n	8006538 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2210      	movs	r2, #16
 8006558:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3301      	adds	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	4a08      	ldr	r2, [pc, #32]	; (8006584 <USB_FlushRxFifo+0x58>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d901      	bls.n	800656a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e006      	b.n	8006578 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b10      	cmp	r3, #16
 8006574:	d0f1      	beq.n	800655a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	00030d40 	.word	0x00030d40

08006588 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	68f9      	ldr	r1, [r7, #12]
 80065a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a8:	4313      	orrs	r3, r2
 80065aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065d4:	f023 0303 	bic.w	r3, r3, #3
 80065d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e8:	f043 0302 	orr.w	r3, r3, #2
 80065ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0301 	and.w	r3, r3, #1
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	4a13      	ldr	r2, [pc, #76]	; (8006678 <USB_CoreReset+0x60>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e01a      	b.n	800666a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	daf3      	bge.n	8006624 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f043 0201 	orr.w	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3301      	adds	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	4a09      	ldr	r2, [pc, #36]	; (8006678 <USB_CoreReset+0x60>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d901      	bls.n	800665c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e006      	b.n	800666a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b01      	cmp	r3, #1
 8006666:	d0f1      	beq.n	800664c <USB_CoreReset+0x34>

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	00030d40 	.word	0x00030d40

0800667c <__errno>:
 800667c:	4b01      	ldr	r3, [pc, #4]	; (8006684 <__errno+0x8>)
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20000014 	.word	0x20000014

08006688 <__libc_init_array>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4d0d      	ldr	r5, [pc, #52]	; (80066c0 <__libc_init_array+0x38>)
 800668c:	4c0d      	ldr	r4, [pc, #52]	; (80066c4 <__libc_init_array+0x3c>)
 800668e:	1b64      	subs	r4, r4, r5
 8006690:	10a4      	asrs	r4, r4, #2
 8006692:	2600      	movs	r6, #0
 8006694:	42a6      	cmp	r6, r4
 8006696:	d109      	bne.n	80066ac <__libc_init_array+0x24>
 8006698:	4d0b      	ldr	r5, [pc, #44]	; (80066c8 <__libc_init_array+0x40>)
 800669a:	4c0c      	ldr	r4, [pc, #48]	; (80066cc <__libc_init_array+0x44>)
 800669c:	f000 fc4e 	bl	8006f3c <_init>
 80066a0:	1b64      	subs	r4, r4, r5
 80066a2:	10a4      	asrs	r4, r4, #2
 80066a4:	2600      	movs	r6, #0
 80066a6:	42a6      	cmp	r6, r4
 80066a8:	d105      	bne.n	80066b6 <__libc_init_array+0x2e>
 80066aa:	bd70      	pop	{r4, r5, r6, pc}
 80066ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b0:	4798      	blx	r3
 80066b2:	3601      	adds	r6, #1
 80066b4:	e7ee      	b.n	8006694 <__libc_init_array+0xc>
 80066b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ba:	4798      	blx	r3
 80066bc:	3601      	adds	r6, #1
 80066be:	e7f2      	b.n	80066a6 <__libc_init_array+0x1e>
 80066c0:	08007750 	.word	0x08007750
 80066c4:	08007750 	.word	0x08007750
 80066c8:	08007750 	.word	0x08007750
 80066cc:	08007754 	.word	0x08007754

080066d0 <memcpy>:
 80066d0:	440a      	add	r2, r1
 80066d2:	4291      	cmp	r1, r2
 80066d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066d8:	d100      	bne.n	80066dc <memcpy+0xc>
 80066da:	4770      	bx	lr
 80066dc:	b510      	push	{r4, lr}
 80066de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066e6:	4291      	cmp	r1, r2
 80066e8:	d1f9      	bne.n	80066de <memcpy+0xe>
 80066ea:	bd10      	pop	{r4, pc}

080066ec <memmove>:
 80066ec:	4288      	cmp	r0, r1
 80066ee:	b510      	push	{r4, lr}
 80066f0:	eb01 0402 	add.w	r4, r1, r2
 80066f4:	d902      	bls.n	80066fc <memmove+0x10>
 80066f6:	4284      	cmp	r4, r0
 80066f8:	4623      	mov	r3, r4
 80066fa:	d807      	bhi.n	800670c <memmove+0x20>
 80066fc:	1e43      	subs	r3, r0, #1
 80066fe:	42a1      	cmp	r1, r4
 8006700:	d008      	beq.n	8006714 <memmove+0x28>
 8006702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800670a:	e7f8      	b.n	80066fe <memmove+0x12>
 800670c:	4402      	add	r2, r0
 800670e:	4601      	mov	r1, r0
 8006710:	428a      	cmp	r2, r1
 8006712:	d100      	bne.n	8006716 <memmove+0x2a>
 8006714:	bd10      	pop	{r4, pc}
 8006716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800671a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800671e:	e7f7      	b.n	8006710 <memmove+0x24>

08006720 <memset>:
 8006720:	4402      	add	r2, r0
 8006722:	4603      	mov	r3, r0
 8006724:	4293      	cmp	r3, r2
 8006726:	d100      	bne.n	800672a <memset+0xa>
 8006728:	4770      	bx	lr
 800672a:	f803 1b01 	strb.w	r1, [r3], #1
 800672e:	e7f9      	b.n	8006724 <memset+0x4>

08006730 <siprintf>:
 8006730:	b40e      	push	{r1, r2, r3}
 8006732:	b500      	push	{lr}
 8006734:	b09c      	sub	sp, #112	; 0x70
 8006736:	ab1d      	add	r3, sp, #116	; 0x74
 8006738:	9002      	str	r0, [sp, #8]
 800673a:	9006      	str	r0, [sp, #24]
 800673c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006740:	4809      	ldr	r0, [pc, #36]	; (8006768 <siprintf+0x38>)
 8006742:	9107      	str	r1, [sp, #28]
 8006744:	9104      	str	r1, [sp, #16]
 8006746:	4909      	ldr	r1, [pc, #36]	; (800676c <siprintf+0x3c>)
 8006748:	f853 2b04 	ldr.w	r2, [r3], #4
 800674c:	9105      	str	r1, [sp, #20]
 800674e:	6800      	ldr	r0, [r0, #0]
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	a902      	add	r1, sp, #8
 8006754:	f000 f868 	bl	8006828 <_svfiprintf_r>
 8006758:	9b02      	ldr	r3, [sp, #8]
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	b01c      	add	sp, #112	; 0x70
 8006760:	f85d eb04 	ldr.w	lr, [sp], #4
 8006764:	b003      	add	sp, #12
 8006766:	4770      	bx	lr
 8006768:	20000014 	.word	0x20000014
 800676c:	ffff0208 	.word	0xffff0208

08006770 <__ssputs_r>:
 8006770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	688e      	ldr	r6, [r1, #8]
 8006776:	429e      	cmp	r6, r3
 8006778:	4682      	mov	sl, r0
 800677a:	460c      	mov	r4, r1
 800677c:	4690      	mov	r8, r2
 800677e:	461f      	mov	r7, r3
 8006780:	d838      	bhi.n	80067f4 <__ssputs_r+0x84>
 8006782:	898a      	ldrh	r2, [r1, #12]
 8006784:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006788:	d032      	beq.n	80067f0 <__ssputs_r+0x80>
 800678a:	6825      	ldr	r5, [r4, #0]
 800678c:	6909      	ldr	r1, [r1, #16]
 800678e:	eba5 0901 	sub.w	r9, r5, r1
 8006792:	6965      	ldr	r5, [r4, #20]
 8006794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800679c:	3301      	adds	r3, #1
 800679e:	444b      	add	r3, r9
 80067a0:	106d      	asrs	r5, r5, #1
 80067a2:	429d      	cmp	r5, r3
 80067a4:	bf38      	it	cc
 80067a6:	461d      	movcc	r5, r3
 80067a8:	0553      	lsls	r3, r2, #21
 80067aa:	d531      	bpl.n	8006810 <__ssputs_r+0xa0>
 80067ac:	4629      	mov	r1, r5
 80067ae:	f000 fb1f 	bl	8006df0 <_malloc_r>
 80067b2:	4606      	mov	r6, r0
 80067b4:	b950      	cbnz	r0, 80067cc <__ssputs_r+0x5c>
 80067b6:	230c      	movs	r3, #12
 80067b8:	f8ca 3000 	str.w	r3, [sl]
 80067bc:	89a3      	ldrh	r3, [r4, #12]
 80067be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067c2:	81a3      	strh	r3, [r4, #12]
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067cc:	6921      	ldr	r1, [r4, #16]
 80067ce:	464a      	mov	r2, r9
 80067d0:	f7ff ff7e 	bl	80066d0 <memcpy>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067de:	81a3      	strh	r3, [r4, #12]
 80067e0:	6126      	str	r6, [r4, #16]
 80067e2:	6165      	str	r5, [r4, #20]
 80067e4:	444e      	add	r6, r9
 80067e6:	eba5 0509 	sub.w	r5, r5, r9
 80067ea:	6026      	str	r6, [r4, #0]
 80067ec:	60a5      	str	r5, [r4, #8]
 80067ee:	463e      	mov	r6, r7
 80067f0:	42be      	cmp	r6, r7
 80067f2:	d900      	bls.n	80067f6 <__ssputs_r+0x86>
 80067f4:	463e      	mov	r6, r7
 80067f6:	4632      	mov	r2, r6
 80067f8:	6820      	ldr	r0, [r4, #0]
 80067fa:	4641      	mov	r1, r8
 80067fc:	f7ff ff76 	bl	80066ec <memmove>
 8006800:	68a3      	ldr	r3, [r4, #8]
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	1b9b      	subs	r3, r3, r6
 8006806:	4432      	add	r2, r6
 8006808:	60a3      	str	r3, [r4, #8]
 800680a:	6022      	str	r2, [r4, #0]
 800680c:	2000      	movs	r0, #0
 800680e:	e7db      	b.n	80067c8 <__ssputs_r+0x58>
 8006810:	462a      	mov	r2, r5
 8006812:	f000 fb47 	bl	8006ea4 <_realloc_r>
 8006816:	4606      	mov	r6, r0
 8006818:	2800      	cmp	r0, #0
 800681a:	d1e1      	bne.n	80067e0 <__ssputs_r+0x70>
 800681c:	6921      	ldr	r1, [r4, #16]
 800681e:	4650      	mov	r0, sl
 8006820:	f000 fa96 	bl	8006d50 <_free_r>
 8006824:	e7c7      	b.n	80067b6 <__ssputs_r+0x46>
	...

08006828 <_svfiprintf_r>:
 8006828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	4698      	mov	r8, r3
 800682e:	898b      	ldrh	r3, [r1, #12]
 8006830:	061b      	lsls	r3, r3, #24
 8006832:	b09d      	sub	sp, #116	; 0x74
 8006834:	4607      	mov	r7, r0
 8006836:	460d      	mov	r5, r1
 8006838:	4614      	mov	r4, r2
 800683a:	d50e      	bpl.n	800685a <_svfiprintf_r+0x32>
 800683c:	690b      	ldr	r3, [r1, #16]
 800683e:	b963      	cbnz	r3, 800685a <_svfiprintf_r+0x32>
 8006840:	2140      	movs	r1, #64	; 0x40
 8006842:	f000 fad5 	bl	8006df0 <_malloc_r>
 8006846:	6028      	str	r0, [r5, #0]
 8006848:	6128      	str	r0, [r5, #16]
 800684a:	b920      	cbnz	r0, 8006856 <_svfiprintf_r+0x2e>
 800684c:	230c      	movs	r3, #12
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	f04f 30ff 	mov.w	r0, #4294967295
 8006854:	e0d1      	b.n	80069fa <_svfiprintf_r+0x1d2>
 8006856:	2340      	movs	r3, #64	; 0x40
 8006858:	616b      	str	r3, [r5, #20]
 800685a:	2300      	movs	r3, #0
 800685c:	9309      	str	r3, [sp, #36]	; 0x24
 800685e:	2320      	movs	r3, #32
 8006860:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006864:	f8cd 800c 	str.w	r8, [sp, #12]
 8006868:	2330      	movs	r3, #48	; 0x30
 800686a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a14 <_svfiprintf_r+0x1ec>
 800686e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006872:	f04f 0901 	mov.w	r9, #1
 8006876:	4623      	mov	r3, r4
 8006878:	469a      	mov	sl, r3
 800687a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800687e:	b10a      	cbz	r2, 8006884 <_svfiprintf_r+0x5c>
 8006880:	2a25      	cmp	r2, #37	; 0x25
 8006882:	d1f9      	bne.n	8006878 <_svfiprintf_r+0x50>
 8006884:	ebba 0b04 	subs.w	fp, sl, r4
 8006888:	d00b      	beq.n	80068a2 <_svfiprintf_r+0x7a>
 800688a:	465b      	mov	r3, fp
 800688c:	4622      	mov	r2, r4
 800688e:	4629      	mov	r1, r5
 8006890:	4638      	mov	r0, r7
 8006892:	f7ff ff6d 	bl	8006770 <__ssputs_r>
 8006896:	3001      	adds	r0, #1
 8006898:	f000 80aa 	beq.w	80069f0 <_svfiprintf_r+0x1c8>
 800689c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800689e:	445a      	add	r2, fp
 80068a0:	9209      	str	r2, [sp, #36]	; 0x24
 80068a2:	f89a 3000 	ldrb.w	r3, [sl]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 80a2 	beq.w	80069f0 <_svfiprintf_r+0x1c8>
 80068ac:	2300      	movs	r3, #0
 80068ae:	f04f 32ff 	mov.w	r2, #4294967295
 80068b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068b6:	f10a 0a01 	add.w	sl, sl, #1
 80068ba:	9304      	str	r3, [sp, #16]
 80068bc:	9307      	str	r3, [sp, #28]
 80068be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068c2:	931a      	str	r3, [sp, #104]	; 0x68
 80068c4:	4654      	mov	r4, sl
 80068c6:	2205      	movs	r2, #5
 80068c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068cc:	4851      	ldr	r0, [pc, #324]	; (8006a14 <_svfiprintf_r+0x1ec>)
 80068ce:	f7f9 fcb7 	bl	8000240 <memchr>
 80068d2:	9a04      	ldr	r2, [sp, #16]
 80068d4:	b9d8      	cbnz	r0, 800690e <_svfiprintf_r+0xe6>
 80068d6:	06d0      	lsls	r0, r2, #27
 80068d8:	bf44      	itt	mi
 80068da:	2320      	movmi	r3, #32
 80068dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068e0:	0711      	lsls	r1, r2, #28
 80068e2:	bf44      	itt	mi
 80068e4:	232b      	movmi	r3, #43	; 0x2b
 80068e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068ea:	f89a 3000 	ldrb.w	r3, [sl]
 80068ee:	2b2a      	cmp	r3, #42	; 0x2a
 80068f0:	d015      	beq.n	800691e <_svfiprintf_r+0xf6>
 80068f2:	9a07      	ldr	r2, [sp, #28]
 80068f4:	4654      	mov	r4, sl
 80068f6:	2000      	movs	r0, #0
 80068f8:	f04f 0c0a 	mov.w	ip, #10
 80068fc:	4621      	mov	r1, r4
 80068fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006902:	3b30      	subs	r3, #48	; 0x30
 8006904:	2b09      	cmp	r3, #9
 8006906:	d94e      	bls.n	80069a6 <_svfiprintf_r+0x17e>
 8006908:	b1b0      	cbz	r0, 8006938 <_svfiprintf_r+0x110>
 800690a:	9207      	str	r2, [sp, #28]
 800690c:	e014      	b.n	8006938 <_svfiprintf_r+0x110>
 800690e:	eba0 0308 	sub.w	r3, r0, r8
 8006912:	fa09 f303 	lsl.w	r3, r9, r3
 8006916:	4313      	orrs	r3, r2
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	46a2      	mov	sl, r4
 800691c:	e7d2      	b.n	80068c4 <_svfiprintf_r+0x9c>
 800691e:	9b03      	ldr	r3, [sp, #12]
 8006920:	1d19      	adds	r1, r3, #4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	9103      	str	r1, [sp, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	bfbb      	ittet	lt
 800692a:	425b      	neglt	r3, r3
 800692c:	f042 0202 	orrlt.w	r2, r2, #2
 8006930:	9307      	strge	r3, [sp, #28]
 8006932:	9307      	strlt	r3, [sp, #28]
 8006934:	bfb8      	it	lt
 8006936:	9204      	strlt	r2, [sp, #16]
 8006938:	7823      	ldrb	r3, [r4, #0]
 800693a:	2b2e      	cmp	r3, #46	; 0x2e
 800693c:	d10c      	bne.n	8006958 <_svfiprintf_r+0x130>
 800693e:	7863      	ldrb	r3, [r4, #1]
 8006940:	2b2a      	cmp	r3, #42	; 0x2a
 8006942:	d135      	bne.n	80069b0 <_svfiprintf_r+0x188>
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	1d1a      	adds	r2, r3, #4
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	9203      	str	r2, [sp, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	bfb8      	it	lt
 8006950:	f04f 33ff 	movlt.w	r3, #4294967295
 8006954:	3402      	adds	r4, #2
 8006956:	9305      	str	r3, [sp, #20]
 8006958:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a24 <_svfiprintf_r+0x1fc>
 800695c:	7821      	ldrb	r1, [r4, #0]
 800695e:	2203      	movs	r2, #3
 8006960:	4650      	mov	r0, sl
 8006962:	f7f9 fc6d 	bl	8000240 <memchr>
 8006966:	b140      	cbz	r0, 800697a <_svfiprintf_r+0x152>
 8006968:	2340      	movs	r3, #64	; 0x40
 800696a:	eba0 000a 	sub.w	r0, r0, sl
 800696e:	fa03 f000 	lsl.w	r0, r3, r0
 8006972:	9b04      	ldr	r3, [sp, #16]
 8006974:	4303      	orrs	r3, r0
 8006976:	3401      	adds	r4, #1
 8006978:	9304      	str	r3, [sp, #16]
 800697a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800697e:	4826      	ldr	r0, [pc, #152]	; (8006a18 <_svfiprintf_r+0x1f0>)
 8006980:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006984:	2206      	movs	r2, #6
 8006986:	f7f9 fc5b 	bl	8000240 <memchr>
 800698a:	2800      	cmp	r0, #0
 800698c:	d038      	beq.n	8006a00 <_svfiprintf_r+0x1d8>
 800698e:	4b23      	ldr	r3, [pc, #140]	; (8006a1c <_svfiprintf_r+0x1f4>)
 8006990:	bb1b      	cbnz	r3, 80069da <_svfiprintf_r+0x1b2>
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	3307      	adds	r3, #7
 8006996:	f023 0307 	bic.w	r3, r3, #7
 800699a:	3308      	adds	r3, #8
 800699c:	9303      	str	r3, [sp, #12]
 800699e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a0:	4433      	add	r3, r6
 80069a2:	9309      	str	r3, [sp, #36]	; 0x24
 80069a4:	e767      	b.n	8006876 <_svfiprintf_r+0x4e>
 80069a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80069aa:	460c      	mov	r4, r1
 80069ac:	2001      	movs	r0, #1
 80069ae:	e7a5      	b.n	80068fc <_svfiprintf_r+0xd4>
 80069b0:	2300      	movs	r3, #0
 80069b2:	3401      	adds	r4, #1
 80069b4:	9305      	str	r3, [sp, #20]
 80069b6:	4619      	mov	r1, r3
 80069b8:	f04f 0c0a 	mov.w	ip, #10
 80069bc:	4620      	mov	r0, r4
 80069be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069c2:	3a30      	subs	r2, #48	; 0x30
 80069c4:	2a09      	cmp	r2, #9
 80069c6:	d903      	bls.n	80069d0 <_svfiprintf_r+0x1a8>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0c5      	beq.n	8006958 <_svfiprintf_r+0x130>
 80069cc:	9105      	str	r1, [sp, #20]
 80069ce:	e7c3      	b.n	8006958 <_svfiprintf_r+0x130>
 80069d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80069d4:	4604      	mov	r4, r0
 80069d6:	2301      	movs	r3, #1
 80069d8:	e7f0      	b.n	80069bc <_svfiprintf_r+0x194>
 80069da:	ab03      	add	r3, sp, #12
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	462a      	mov	r2, r5
 80069e0:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <_svfiprintf_r+0x1f8>)
 80069e2:	a904      	add	r1, sp, #16
 80069e4:	4638      	mov	r0, r7
 80069e6:	f3af 8000 	nop.w
 80069ea:	1c42      	adds	r2, r0, #1
 80069ec:	4606      	mov	r6, r0
 80069ee:	d1d6      	bne.n	800699e <_svfiprintf_r+0x176>
 80069f0:	89ab      	ldrh	r3, [r5, #12]
 80069f2:	065b      	lsls	r3, r3, #25
 80069f4:	f53f af2c 	bmi.w	8006850 <_svfiprintf_r+0x28>
 80069f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069fa:	b01d      	add	sp, #116	; 0x74
 80069fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a00:	ab03      	add	r3, sp, #12
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	462a      	mov	r2, r5
 8006a06:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <_svfiprintf_r+0x1f8>)
 8006a08:	a904      	add	r1, sp, #16
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	f000 f87a 	bl	8006b04 <_printf_i>
 8006a10:	e7eb      	b.n	80069ea <_svfiprintf_r+0x1c2>
 8006a12:	bf00      	nop
 8006a14:	08007714 	.word	0x08007714
 8006a18:	0800771e 	.word	0x0800771e
 8006a1c:	00000000 	.word	0x00000000
 8006a20:	08006771 	.word	0x08006771
 8006a24:	0800771a 	.word	0x0800771a

08006a28 <_printf_common>:
 8006a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	4699      	mov	r9, r3
 8006a30:	688a      	ldr	r2, [r1, #8]
 8006a32:	690b      	ldr	r3, [r1, #16]
 8006a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	bfb8      	it	lt
 8006a3c:	4613      	movlt	r3, r2
 8006a3e:	6033      	str	r3, [r6, #0]
 8006a40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a44:	4607      	mov	r7, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	b10a      	cbz	r2, 8006a4e <_printf_common+0x26>
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	6033      	str	r3, [r6, #0]
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	0699      	lsls	r1, r3, #26
 8006a52:	bf42      	ittt	mi
 8006a54:	6833      	ldrmi	r3, [r6, #0]
 8006a56:	3302      	addmi	r3, #2
 8006a58:	6033      	strmi	r3, [r6, #0]
 8006a5a:	6825      	ldr	r5, [r4, #0]
 8006a5c:	f015 0506 	ands.w	r5, r5, #6
 8006a60:	d106      	bne.n	8006a70 <_printf_common+0x48>
 8006a62:	f104 0a19 	add.w	sl, r4, #25
 8006a66:	68e3      	ldr	r3, [r4, #12]
 8006a68:	6832      	ldr	r2, [r6, #0]
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	42ab      	cmp	r3, r5
 8006a6e:	dc26      	bgt.n	8006abe <_printf_common+0x96>
 8006a70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a74:	1e13      	subs	r3, r2, #0
 8006a76:	6822      	ldr	r2, [r4, #0]
 8006a78:	bf18      	it	ne
 8006a7a:	2301      	movne	r3, #1
 8006a7c:	0692      	lsls	r2, r2, #26
 8006a7e:	d42b      	bmi.n	8006ad8 <_printf_common+0xb0>
 8006a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a84:	4649      	mov	r1, r9
 8006a86:	4638      	mov	r0, r7
 8006a88:	47c0      	blx	r8
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d01e      	beq.n	8006acc <_printf_common+0xa4>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	68e5      	ldr	r5, [r4, #12]
 8006a92:	6832      	ldr	r2, [r6, #0]
 8006a94:	f003 0306 	and.w	r3, r3, #6
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	bf08      	it	eq
 8006a9c:	1aad      	subeq	r5, r5, r2
 8006a9e:	68a3      	ldr	r3, [r4, #8]
 8006aa0:	6922      	ldr	r2, [r4, #16]
 8006aa2:	bf0c      	ite	eq
 8006aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aa8:	2500      	movne	r5, #0
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	bfc4      	itt	gt
 8006aae:	1a9b      	subgt	r3, r3, r2
 8006ab0:	18ed      	addgt	r5, r5, r3
 8006ab2:	2600      	movs	r6, #0
 8006ab4:	341a      	adds	r4, #26
 8006ab6:	42b5      	cmp	r5, r6
 8006ab8:	d11a      	bne.n	8006af0 <_printf_common+0xc8>
 8006aba:	2000      	movs	r0, #0
 8006abc:	e008      	b.n	8006ad0 <_printf_common+0xa8>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	47c0      	blx	r8
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d103      	bne.n	8006ad4 <_printf_common+0xac>
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	e7c6      	b.n	8006a66 <_printf_common+0x3e>
 8006ad8:	18e1      	adds	r1, r4, r3
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	2030      	movs	r0, #48	; 0x30
 8006ade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ae2:	4422      	add	r2, r4
 8006ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aec:	3302      	adds	r3, #2
 8006aee:	e7c7      	b.n	8006a80 <_printf_common+0x58>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4622      	mov	r2, r4
 8006af4:	4649      	mov	r1, r9
 8006af6:	4638      	mov	r0, r7
 8006af8:	47c0      	blx	r8
 8006afa:	3001      	adds	r0, #1
 8006afc:	d0e6      	beq.n	8006acc <_printf_common+0xa4>
 8006afe:	3601      	adds	r6, #1
 8006b00:	e7d9      	b.n	8006ab6 <_printf_common+0x8e>
	...

08006b04 <_printf_i>:
 8006b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b08:	460c      	mov	r4, r1
 8006b0a:	4691      	mov	r9, r2
 8006b0c:	7e27      	ldrb	r7, [r4, #24]
 8006b0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b10:	2f78      	cmp	r7, #120	; 0x78
 8006b12:	4680      	mov	r8, r0
 8006b14:	469a      	mov	sl, r3
 8006b16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b1a:	d807      	bhi.n	8006b2c <_printf_i+0x28>
 8006b1c:	2f62      	cmp	r7, #98	; 0x62
 8006b1e:	d80a      	bhi.n	8006b36 <_printf_i+0x32>
 8006b20:	2f00      	cmp	r7, #0
 8006b22:	f000 80d8 	beq.w	8006cd6 <_printf_i+0x1d2>
 8006b26:	2f58      	cmp	r7, #88	; 0x58
 8006b28:	f000 80a3 	beq.w	8006c72 <_printf_i+0x16e>
 8006b2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b34:	e03a      	b.n	8006bac <_printf_i+0xa8>
 8006b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b3a:	2b15      	cmp	r3, #21
 8006b3c:	d8f6      	bhi.n	8006b2c <_printf_i+0x28>
 8006b3e:	a001      	add	r0, pc, #4	; (adr r0, 8006b44 <_printf_i+0x40>)
 8006b40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b44:	08006b9d 	.word	0x08006b9d
 8006b48:	08006bb1 	.word	0x08006bb1
 8006b4c:	08006b2d 	.word	0x08006b2d
 8006b50:	08006b2d 	.word	0x08006b2d
 8006b54:	08006b2d 	.word	0x08006b2d
 8006b58:	08006b2d 	.word	0x08006b2d
 8006b5c:	08006bb1 	.word	0x08006bb1
 8006b60:	08006b2d 	.word	0x08006b2d
 8006b64:	08006b2d 	.word	0x08006b2d
 8006b68:	08006b2d 	.word	0x08006b2d
 8006b6c:	08006b2d 	.word	0x08006b2d
 8006b70:	08006cbd 	.word	0x08006cbd
 8006b74:	08006be1 	.word	0x08006be1
 8006b78:	08006c9f 	.word	0x08006c9f
 8006b7c:	08006b2d 	.word	0x08006b2d
 8006b80:	08006b2d 	.word	0x08006b2d
 8006b84:	08006cdf 	.word	0x08006cdf
 8006b88:	08006b2d 	.word	0x08006b2d
 8006b8c:	08006be1 	.word	0x08006be1
 8006b90:	08006b2d 	.word	0x08006b2d
 8006b94:	08006b2d 	.word	0x08006b2d
 8006b98:	08006ca7 	.word	0x08006ca7
 8006b9c:	680b      	ldr	r3, [r1, #0]
 8006b9e:	1d1a      	adds	r2, r3, #4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	600a      	str	r2, [r1, #0]
 8006ba4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bac:	2301      	movs	r3, #1
 8006bae:	e0a3      	b.n	8006cf8 <_printf_i+0x1f4>
 8006bb0:	6825      	ldr	r5, [r4, #0]
 8006bb2:	6808      	ldr	r0, [r1, #0]
 8006bb4:	062e      	lsls	r6, r5, #24
 8006bb6:	f100 0304 	add.w	r3, r0, #4
 8006bba:	d50a      	bpl.n	8006bd2 <_printf_i+0xce>
 8006bbc:	6805      	ldr	r5, [r0, #0]
 8006bbe:	600b      	str	r3, [r1, #0]
 8006bc0:	2d00      	cmp	r5, #0
 8006bc2:	da03      	bge.n	8006bcc <_printf_i+0xc8>
 8006bc4:	232d      	movs	r3, #45	; 0x2d
 8006bc6:	426d      	negs	r5, r5
 8006bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bcc:	485e      	ldr	r0, [pc, #376]	; (8006d48 <_printf_i+0x244>)
 8006bce:	230a      	movs	r3, #10
 8006bd0:	e019      	b.n	8006c06 <_printf_i+0x102>
 8006bd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006bd6:	6805      	ldr	r5, [r0, #0]
 8006bd8:	600b      	str	r3, [r1, #0]
 8006bda:	bf18      	it	ne
 8006bdc:	b22d      	sxthne	r5, r5
 8006bde:	e7ef      	b.n	8006bc0 <_printf_i+0xbc>
 8006be0:	680b      	ldr	r3, [r1, #0]
 8006be2:	6825      	ldr	r5, [r4, #0]
 8006be4:	1d18      	adds	r0, r3, #4
 8006be6:	6008      	str	r0, [r1, #0]
 8006be8:	0628      	lsls	r0, r5, #24
 8006bea:	d501      	bpl.n	8006bf0 <_printf_i+0xec>
 8006bec:	681d      	ldr	r5, [r3, #0]
 8006bee:	e002      	b.n	8006bf6 <_printf_i+0xf2>
 8006bf0:	0669      	lsls	r1, r5, #25
 8006bf2:	d5fb      	bpl.n	8006bec <_printf_i+0xe8>
 8006bf4:	881d      	ldrh	r5, [r3, #0]
 8006bf6:	4854      	ldr	r0, [pc, #336]	; (8006d48 <_printf_i+0x244>)
 8006bf8:	2f6f      	cmp	r7, #111	; 0x6f
 8006bfa:	bf0c      	ite	eq
 8006bfc:	2308      	moveq	r3, #8
 8006bfe:	230a      	movne	r3, #10
 8006c00:	2100      	movs	r1, #0
 8006c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c06:	6866      	ldr	r6, [r4, #4]
 8006c08:	60a6      	str	r6, [r4, #8]
 8006c0a:	2e00      	cmp	r6, #0
 8006c0c:	bfa2      	ittt	ge
 8006c0e:	6821      	ldrge	r1, [r4, #0]
 8006c10:	f021 0104 	bicge.w	r1, r1, #4
 8006c14:	6021      	strge	r1, [r4, #0]
 8006c16:	b90d      	cbnz	r5, 8006c1c <_printf_i+0x118>
 8006c18:	2e00      	cmp	r6, #0
 8006c1a:	d04d      	beq.n	8006cb8 <_printf_i+0x1b4>
 8006c1c:	4616      	mov	r6, r2
 8006c1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c22:	fb03 5711 	mls	r7, r3, r1, r5
 8006c26:	5dc7      	ldrb	r7, [r0, r7]
 8006c28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c2c:	462f      	mov	r7, r5
 8006c2e:	42bb      	cmp	r3, r7
 8006c30:	460d      	mov	r5, r1
 8006c32:	d9f4      	bls.n	8006c1e <_printf_i+0x11a>
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d10b      	bne.n	8006c50 <_printf_i+0x14c>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	07df      	lsls	r7, r3, #31
 8006c3c:	d508      	bpl.n	8006c50 <_printf_i+0x14c>
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	6861      	ldr	r1, [r4, #4]
 8006c42:	4299      	cmp	r1, r3
 8006c44:	bfde      	ittt	le
 8006c46:	2330      	movle	r3, #48	; 0x30
 8006c48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c50:	1b92      	subs	r2, r2, r6
 8006c52:	6122      	str	r2, [r4, #16]
 8006c54:	f8cd a000 	str.w	sl, [sp]
 8006c58:	464b      	mov	r3, r9
 8006c5a:	aa03      	add	r2, sp, #12
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4640      	mov	r0, r8
 8006c60:	f7ff fee2 	bl	8006a28 <_printf_common>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d14c      	bne.n	8006d02 <_printf_i+0x1fe>
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	b004      	add	sp, #16
 8006c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c72:	4835      	ldr	r0, [pc, #212]	; (8006d48 <_printf_i+0x244>)
 8006c74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	680e      	ldr	r6, [r1, #0]
 8006c7c:	061f      	lsls	r7, r3, #24
 8006c7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c82:	600e      	str	r6, [r1, #0]
 8006c84:	d514      	bpl.n	8006cb0 <_printf_i+0x1ac>
 8006c86:	07d9      	lsls	r1, r3, #31
 8006c88:	bf44      	itt	mi
 8006c8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c8e:	6023      	strmi	r3, [r4, #0]
 8006c90:	b91d      	cbnz	r5, 8006c9a <_printf_i+0x196>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	f023 0320 	bic.w	r3, r3, #32
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	2310      	movs	r3, #16
 8006c9c:	e7b0      	b.n	8006c00 <_printf_i+0xfc>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	f043 0320 	orr.w	r3, r3, #32
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	2378      	movs	r3, #120	; 0x78
 8006ca8:	4828      	ldr	r0, [pc, #160]	; (8006d4c <_printf_i+0x248>)
 8006caa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cae:	e7e3      	b.n	8006c78 <_printf_i+0x174>
 8006cb0:	065e      	lsls	r6, r3, #25
 8006cb2:	bf48      	it	mi
 8006cb4:	b2ad      	uxthmi	r5, r5
 8006cb6:	e7e6      	b.n	8006c86 <_printf_i+0x182>
 8006cb8:	4616      	mov	r6, r2
 8006cba:	e7bb      	b.n	8006c34 <_printf_i+0x130>
 8006cbc:	680b      	ldr	r3, [r1, #0]
 8006cbe:	6826      	ldr	r6, [r4, #0]
 8006cc0:	6960      	ldr	r0, [r4, #20]
 8006cc2:	1d1d      	adds	r5, r3, #4
 8006cc4:	600d      	str	r5, [r1, #0]
 8006cc6:	0635      	lsls	r5, r6, #24
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	d501      	bpl.n	8006cd0 <_printf_i+0x1cc>
 8006ccc:	6018      	str	r0, [r3, #0]
 8006cce:	e002      	b.n	8006cd6 <_printf_i+0x1d2>
 8006cd0:	0671      	lsls	r1, r6, #25
 8006cd2:	d5fb      	bpl.n	8006ccc <_printf_i+0x1c8>
 8006cd4:	8018      	strh	r0, [r3, #0]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	4616      	mov	r6, r2
 8006cdc:	e7ba      	b.n	8006c54 <_printf_i+0x150>
 8006cde:	680b      	ldr	r3, [r1, #0]
 8006ce0:	1d1a      	adds	r2, r3, #4
 8006ce2:	600a      	str	r2, [r1, #0]
 8006ce4:	681e      	ldr	r6, [r3, #0]
 8006ce6:	6862      	ldr	r2, [r4, #4]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7f9 faa8 	bl	8000240 <memchr>
 8006cf0:	b108      	cbz	r0, 8006cf6 <_printf_i+0x1f2>
 8006cf2:	1b80      	subs	r0, r0, r6
 8006cf4:	6060      	str	r0, [r4, #4]
 8006cf6:	6863      	ldr	r3, [r4, #4]
 8006cf8:	6123      	str	r3, [r4, #16]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d00:	e7a8      	b.n	8006c54 <_printf_i+0x150>
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	4632      	mov	r2, r6
 8006d06:	4649      	mov	r1, r9
 8006d08:	4640      	mov	r0, r8
 8006d0a:	47d0      	blx	sl
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d0ab      	beq.n	8006c68 <_printf_i+0x164>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	079b      	lsls	r3, r3, #30
 8006d14:	d413      	bmi.n	8006d3e <_printf_i+0x23a>
 8006d16:	68e0      	ldr	r0, [r4, #12]
 8006d18:	9b03      	ldr	r3, [sp, #12]
 8006d1a:	4298      	cmp	r0, r3
 8006d1c:	bfb8      	it	lt
 8006d1e:	4618      	movlt	r0, r3
 8006d20:	e7a4      	b.n	8006c6c <_printf_i+0x168>
 8006d22:	2301      	movs	r3, #1
 8006d24:	4632      	mov	r2, r6
 8006d26:	4649      	mov	r1, r9
 8006d28:	4640      	mov	r0, r8
 8006d2a:	47d0      	blx	sl
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d09b      	beq.n	8006c68 <_printf_i+0x164>
 8006d30:	3501      	adds	r5, #1
 8006d32:	68e3      	ldr	r3, [r4, #12]
 8006d34:	9903      	ldr	r1, [sp, #12]
 8006d36:	1a5b      	subs	r3, r3, r1
 8006d38:	42ab      	cmp	r3, r5
 8006d3a:	dcf2      	bgt.n	8006d22 <_printf_i+0x21e>
 8006d3c:	e7eb      	b.n	8006d16 <_printf_i+0x212>
 8006d3e:	2500      	movs	r5, #0
 8006d40:	f104 0619 	add.w	r6, r4, #25
 8006d44:	e7f5      	b.n	8006d32 <_printf_i+0x22e>
 8006d46:	bf00      	nop
 8006d48:	08007725 	.word	0x08007725
 8006d4c:	08007736 	.word	0x08007736

08006d50 <_free_r>:
 8006d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d048      	beq.n	8006de8 <_free_r+0x98>
 8006d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d5a:	9001      	str	r0, [sp, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d62:	bfb8      	it	lt
 8006d64:	18e4      	addlt	r4, r4, r3
 8006d66:	f000 f8d3 	bl	8006f10 <__malloc_lock>
 8006d6a:	4a20      	ldr	r2, [pc, #128]	; (8006dec <_free_r+0x9c>)
 8006d6c:	9801      	ldr	r0, [sp, #4]
 8006d6e:	6813      	ldr	r3, [r2, #0]
 8006d70:	4615      	mov	r5, r2
 8006d72:	b933      	cbnz	r3, 8006d82 <_free_r+0x32>
 8006d74:	6063      	str	r3, [r4, #4]
 8006d76:	6014      	str	r4, [r2, #0]
 8006d78:	b003      	add	sp, #12
 8006d7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d7e:	f000 b8cd 	b.w	8006f1c <__malloc_unlock>
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	d90b      	bls.n	8006d9e <_free_r+0x4e>
 8006d86:	6821      	ldr	r1, [r4, #0]
 8006d88:	1862      	adds	r2, r4, r1
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	bf04      	itt	eq
 8006d8e:	681a      	ldreq	r2, [r3, #0]
 8006d90:	685b      	ldreq	r3, [r3, #4]
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	bf04      	itt	eq
 8006d96:	1852      	addeq	r2, r2, r1
 8006d98:	6022      	streq	r2, [r4, #0]
 8006d9a:	602c      	str	r4, [r5, #0]
 8006d9c:	e7ec      	b.n	8006d78 <_free_r+0x28>
 8006d9e:	461a      	mov	r2, r3
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	b10b      	cbz	r3, 8006da8 <_free_r+0x58>
 8006da4:	42a3      	cmp	r3, r4
 8006da6:	d9fa      	bls.n	8006d9e <_free_r+0x4e>
 8006da8:	6811      	ldr	r1, [r2, #0]
 8006daa:	1855      	adds	r5, r2, r1
 8006dac:	42a5      	cmp	r5, r4
 8006dae:	d10b      	bne.n	8006dc8 <_free_r+0x78>
 8006db0:	6824      	ldr	r4, [r4, #0]
 8006db2:	4421      	add	r1, r4
 8006db4:	1854      	adds	r4, r2, r1
 8006db6:	42a3      	cmp	r3, r4
 8006db8:	6011      	str	r1, [r2, #0]
 8006dba:	d1dd      	bne.n	8006d78 <_free_r+0x28>
 8006dbc:	681c      	ldr	r4, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	6053      	str	r3, [r2, #4]
 8006dc2:	4421      	add	r1, r4
 8006dc4:	6011      	str	r1, [r2, #0]
 8006dc6:	e7d7      	b.n	8006d78 <_free_r+0x28>
 8006dc8:	d902      	bls.n	8006dd0 <_free_r+0x80>
 8006dca:	230c      	movs	r3, #12
 8006dcc:	6003      	str	r3, [r0, #0]
 8006dce:	e7d3      	b.n	8006d78 <_free_r+0x28>
 8006dd0:	6825      	ldr	r5, [r4, #0]
 8006dd2:	1961      	adds	r1, r4, r5
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	bf04      	itt	eq
 8006dd8:	6819      	ldreq	r1, [r3, #0]
 8006dda:	685b      	ldreq	r3, [r3, #4]
 8006ddc:	6063      	str	r3, [r4, #4]
 8006dde:	bf04      	itt	eq
 8006de0:	1949      	addeq	r1, r1, r5
 8006de2:	6021      	streq	r1, [r4, #0]
 8006de4:	6054      	str	r4, [r2, #4]
 8006de6:	e7c7      	b.n	8006d78 <_free_r+0x28>
 8006de8:	b003      	add	sp, #12
 8006dea:	bd30      	pop	{r4, r5, pc}
 8006dec:	200004a0 	.word	0x200004a0

08006df0 <_malloc_r>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	1ccd      	adds	r5, r1, #3
 8006df4:	f025 0503 	bic.w	r5, r5, #3
 8006df8:	3508      	adds	r5, #8
 8006dfa:	2d0c      	cmp	r5, #12
 8006dfc:	bf38      	it	cc
 8006dfe:	250c      	movcc	r5, #12
 8006e00:	2d00      	cmp	r5, #0
 8006e02:	4606      	mov	r6, r0
 8006e04:	db01      	blt.n	8006e0a <_malloc_r+0x1a>
 8006e06:	42a9      	cmp	r1, r5
 8006e08:	d903      	bls.n	8006e12 <_malloc_r+0x22>
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	6033      	str	r3, [r6, #0]
 8006e0e:	2000      	movs	r0, #0
 8006e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e12:	f000 f87d 	bl	8006f10 <__malloc_lock>
 8006e16:	4921      	ldr	r1, [pc, #132]	; (8006e9c <_malloc_r+0xac>)
 8006e18:	680a      	ldr	r2, [r1, #0]
 8006e1a:	4614      	mov	r4, r2
 8006e1c:	b99c      	cbnz	r4, 8006e46 <_malloc_r+0x56>
 8006e1e:	4f20      	ldr	r7, [pc, #128]	; (8006ea0 <_malloc_r+0xb0>)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	b923      	cbnz	r3, 8006e2e <_malloc_r+0x3e>
 8006e24:	4621      	mov	r1, r4
 8006e26:	4630      	mov	r0, r6
 8006e28:	f000 f862 	bl	8006ef0 <_sbrk_r>
 8006e2c:	6038      	str	r0, [r7, #0]
 8006e2e:	4629      	mov	r1, r5
 8006e30:	4630      	mov	r0, r6
 8006e32:	f000 f85d 	bl	8006ef0 <_sbrk_r>
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	d123      	bne.n	8006e82 <_malloc_r+0x92>
 8006e3a:	230c      	movs	r3, #12
 8006e3c:	6033      	str	r3, [r6, #0]
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f000 f86c 	bl	8006f1c <__malloc_unlock>
 8006e44:	e7e3      	b.n	8006e0e <_malloc_r+0x1e>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	1b5b      	subs	r3, r3, r5
 8006e4a:	d417      	bmi.n	8006e7c <_malloc_r+0x8c>
 8006e4c:	2b0b      	cmp	r3, #11
 8006e4e:	d903      	bls.n	8006e58 <_malloc_r+0x68>
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	441c      	add	r4, r3
 8006e54:	6025      	str	r5, [r4, #0]
 8006e56:	e004      	b.n	8006e62 <_malloc_r+0x72>
 8006e58:	6863      	ldr	r3, [r4, #4]
 8006e5a:	42a2      	cmp	r2, r4
 8006e5c:	bf0c      	ite	eq
 8006e5e:	600b      	streq	r3, [r1, #0]
 8006e60:	6053      	strne	r3, [r2, #4]
 8006e62:	4630      	mov	r0, r6
 8006e64:	f000 f85a 	bl	8006f1c <__malloc_unlock>
 8006e68:	f104 000b 	add.w	r0, r4, #11
 8006e6c:	1d23      	adds	r3, r4, #4
 8006e6e:	f020 0007 	bic.w	r0, r0, #7
 8006e72:	1ac2      	subs	r2, r0, r3
 8006e74:	d0cc      	beq.n	8006e10 <_malloc_r+0x20>
 8006e76:	1a1b      	subs	r3, r3, r0
 8006e78:	50a3      	str	r3, [r4, r2]
 8006e7a:	e7c9      	b.n	8006e10 <_malloc_r+0x20>
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	6864      	ldr	r4, [r4, #4]
 8006e80:	e7cc      	b.n	8006e1c <_malloc_r+0x2c>
 8006e82:	1cc4      	adds	r4, r0, #3
 8006e84:	f024 0403 	bic.w	r4, r4, #3
 8006e88:	42a0      	cmp	r0, r4
 8006e8a:	d0e3      	beq.n	8006e54 <_malloc_r+0x64>
 8006e8c:	1a21      	subs	r1, r4, r0
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f000 f82e 	bl	8006ef0 <_sbrk_r>
 8006e94:	3001      	adds	r0, #1
 8006e96:	d1dd      	bne.n	8006e54 <_malloc_r+0x64>
 8006e98:	e7cf      	b.n	8006e3a <_malloc_r+0x4a>
 8006e9a:	bf00      	nop
 8006e9c:	200004a0 	.word	0x200004a0
 8006ea0:	200004a4 	.word	0x200004a4

08006ea4 <_realloc_r>:
 8006ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	460e      	mov	r6, r1
 8006eac:	b921      	cbnz	r1, 8006eb8 <_realloc_r+0x14>
 8006eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	f7ff bf9c 	b.w	8006df0 <_malloc_r>
 8006eb8:	b922      	cbnz	r2, 8006ec4 <_realloc_r+0x20>
 8006eba:	f7ff ff49 	bl	8006d50 <_free_r>
 8006ebe:	4625      	mov	r5, r4
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec4:	f000 f830 	bl	8006f28 <_malloc_usable_size_r>
 8006ec8:	42a0      	cmp	r0, r4
 8006eca:	d20f      	bcs.n	8006eec <_realloc_r+0x48>
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4638      	mov	r0, r7
 8006ed0:	f7ff ff8e 	bl	8006df0 <_malloc_r>
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d0f2      	beq.n	8006ec0 <_realloc_r+0x1c>
 8006eda:	4631      	mov	r1, r6
 8006edc:	4622      	mov	r2, r4
 8006ede:	f7ff fbf7 	bl	80066d0 <memcpy>
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	f7ff ff33 	bl	8006d50 <_free_r>
 8006eea:	e7e9      	b.n	8006ec0 <_realloc_r+0x1c>
 8006eec:	4635      	mov	r5, r6
 8006eee:	e7e7      	b.n	8006ec0 <_realloc_r+0x1c>

08006ef0 <_sbrk_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4d06      	ldr	r5, [pc, #24]	; (8006f0c <_sbrk_r+0x1c>)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4608      	mov	r0, r1
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	f7fa f956 	bl	80011ac <_sbrk>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d102      	bne.n	8006f0a <_sbrk_r+0x1a>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	b103      	cbz	r3, 8006f0a <_sbrk_r+0x1a>
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	20000a64 	.word	0x20000a64

08006f10 <__malloc_lock>:
 8006f10:	4801      	ldr	r0, [pc, #4]	; (8006f18 <__malloc_lock+0x8>)
 8006f12:	f000 b811 	b.w	8006f38 <__retarget_lock_acquire_recursive>
 8006f16:	bf00      	nop
 8006f18:	20000a6c 	.word	0x20000a6c

08006f1c <__malloc_unlock>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	; (8006f24 <__malloc_unlock+0x8>)
 8006f1e:	f000 b80c 	b.w	8006f3a <__retarget_lock_release_recursive>
 8006f22:	bf00      	nop
 8006f24:	20000a6c 	.word	0x20000a6c

08006f28 <_malloc_usable_size_r>:
 8006f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2c:	1f18      	subs	r0, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfbc      	itt	lt
 8006f32:	580b      	ldrlt	r3, [r1, r0]
 8006f34:	18c0      	addlt	r0, r0, r3
 8006f36:	4770      	bx	lr

08006f38 <__retarget_lock_acquire_recursive>:
 8006f38:	4770      	bx	lr

08006f3a <__retarget_lock_release_recursive>:
 8006f3a:	4770      	bx	lr

08006f3c <_init>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr

08006f48 <_fini>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr
