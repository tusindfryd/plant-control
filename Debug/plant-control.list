
plant-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f14  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006178  08006178  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006178  08006178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006180  08006180  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006180  08006180  00016180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000070  080061f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  080061f8  00020618  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be48  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000393f  00000000  00000000  0003bee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  0003f828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  00040be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2f8  00000000  00000000  00041e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a886  00000000  00000000  0006d108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104444  00000000  00000000  0008798e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018bdd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005540  00000000  00000000  0018be28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080060fc 	.word	0x080060fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080060fc 	.word	0x080060fc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <lerp>:
#include "WS9527.h"

uint16_t WS9527_Reading_ADC;
uint16_t WS9527_Reading;

float lerp(uint16_t v0, uint32_t v1, float t) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005e6:	81fb      	strh	r3, [r7, #14]
	return (1 - t) * v0 + t * v1;
 80005e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80005f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f4:	89fb      	ldrh	r3, [r7, #14]
 80005f6:	ee07 3a90 	vmov	s15, r3
 80005fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800060c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000614:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000618:	eeb0 0a67 	vmov.f32	s0, s15
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <WS9527_Initialize>:

void WS9527_Initialize() {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <WS9527_Initialize+0x10>)
 800062e:	f000 fe61 	bl	80012f4 <HAL_ADC_Start_IT>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000009c 	.word	0x2000009c

0800063c <WS9527_StartReadings>:

void WS9527_StartReadings() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <WS9527_StartReadings+0x10>)
 8000642:	f000 fe57 	bl	80012f4 <HAL_ADC_Start_IT>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000009c 	.word	0x2000009c

08000650 <WS9527_GetReadings>:

void WS9527_GetReadings(ADC_HandleTypeDef *hadc) {
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	/* first we lerp everything out and then scale the result by 18  *
	 * that's because maximally moist soil gives the reading of 1800 *
	 * so 1% is the reading divided by 18                            */
	if (hadc->Instance == ADC1) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <WS9527_GetReadings+0x58>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d11d      	bne.n	800069e <WS9527_GetReadings+0x4e>
		WS9527_Reading_ADC = (int) lerp(WS9527_Reading_ADC,
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <WS9527_GetReadings+0x5c>)
 8000664:	881c      	ldrh	r4, [r3, #0]
 8000666:	4812      	ldr	r0, [pc, #72]	; (80006b0 <WS9527_GetReadings+0x60>)
 8000668:	f001 f82c 	bl	80016c4 <HAL_ADC_GetValue>
 800066c:	4603      	mov	r3, r0
 800066e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80006b4 <WS9527_GetReadings+0x64>
 8000672:	4619      	mov	r1, r3
 8000674:	4620      	mov	r0, r4
 8000676:	f7ff ffaf 	bl	80005d8 <lerp>
 800067a:	eef0 7a40 	vmov.f32	s15, s0
 800067e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000682:	ee17 3a90 	vmov	r3, s15
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <WS9527_GetReadings+0x5c>)
 800068a:	801a      	strh	r2, [r3, #0]
				HAL_ADC_GetValue(&hadc1), 0.001);
		WS9527_Reading = WS9527_Reading_ADC / 18;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <WS9527_GetReadings+0x5c>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <WS9527_GetReadings+0x68>)
 8000692:	fba2 2303 	umull	r2, r3, r2, r3
 8000696:	089b      	lsrs	r3, r3, #2
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <WS9527_GetReadings+0x6c>)
 800069c:	801a      	strh	r2, [r3, #0]
	}
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40012000 	.word	0x40012000
 80006ac:	20000098 	.word	0x20000098
 80006b0:	2000009c 	.word	0x2000009c
 80006b4:	3a83126f 	.word	0x3a83126f
 80006b8:	38e38e39 	.word	0x38e38e39
 80006bc:	2000009a 	.word	0x2000009a

080006c0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_ADC1_Init+0x98>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_ADC1_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_ADC1_Init+0x98>)
 8000722:	f000 fda3 	bl	800126c <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800072c:	f000 fa2e 	bl	8000b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000734:	2301      	movs	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_ADC1_Init+0x98>)
 8000742:	f000 ffe1 	bl	8001708 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800074c:	f000 fa1e 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	2000009c 	.word	0x2000009c
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <HAL_ADC_MspInit+0x84>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d12b      	bne.n	80007de <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_ADC_MspInit+0x88>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <HAL_ADC_MspInit+0x88>)
 800078c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <HAL_ADC_MspInit+0x88>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b6:	2301      	movs	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_ADC_MspInit+0x8c>)
 80007ca:	f001 fb9b 	bl	8001f04 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2012      	movs	r0, #18
 80007d4:	f001 facd 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007d8:	2012      	movs	r0, #18
 80007da:	f001 fae6 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40012000 	.word	0x40012000
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000

080007f4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b68      	ldr	r3, [pc, #416]	; (80009ac <MX_GPIO_Init+0x1b8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a67      	ldr	r2, [pc, #412]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b65      	ldr	r3, [pc, #404]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	4b62      	ldr	r3, [pc, #392]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a61      	ldr	r2, [pc, #388]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b5f      	ldr	r3, [pc, #380]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b5c      	ldr	r3, [pc, #368]	; (80009ac <MX_GPIO_Init+0x1b8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a5b      	ldr	r2, [pc, #364]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b59      	ldr	r3, [pc, #356]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b56      	ldr	r3, [pc, #344]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a55      	ldr	r2, [pc, #340]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b53      	ldr	r3, [pc, #332]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b50      	ldr	r3, [pc, #320]	; (80009ac <MX_GPIO_Init+0x1b8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a4f      	ldr	r2, [pc, #316]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b4d      	ldr	r3, [pc, #308]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000882:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a49      	ldr	r2, [pc, #292]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b47      	ldr	r3, [pc, #284]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f244 0181 	movw	r1, #16513	; 0x4081
 80008a0:	4843      	ldr	r0, [pc, #268]	; (80009b0 <MX_GPIO_Init+0x1bc>)
 80008a2:	f001 fcdb 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	4842      	ldr	r0, [pc, #264]	; (80009b4 <MX_GPIO_Init+0x1c0>)
 80008ac:	f001 fcd6 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	483c      	ldr	r0, [pc, #240]	; (80009b8 <MX_GPIO_Init+0x1c4>)
 80008c8:	f001 fb1c 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008cc:	2332      	movs	r3, #50	; 0x32
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008dc:	230b      	movs	r3, #11
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4834      	ldr	r0, [pc, #208]	; (80009b8 <MX_GPIO_Init+0x1c4>)
 80008e8:	f001 fb0c 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008ec:	2386      	movs	r3, #134	; 0x86
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008fc:	230b      	movs	r3, #11
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	482d      	ldr	r0, [pc, #180]	; (80009bc <MX_GPIO_Init+0x1c8>)
 8000908:	f001 fafc 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800090c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4822      	ldr	r0, [pc, #136]	; (80009b0 <MX_GPIO_Init+0x1bc>)
 8000926:	f001 faed 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800092a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800093c:	230b      	movs	r3, #11
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	481a      	ldr	r0, [pc, #104]	; (80009b0 <MX_GPIO_Init+0x1bc>)
 8000948:	f001 fadc 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800094c:	2340      	movs	r3, #64	; 0x40
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_GPIO_Init+0x1c0>)
 8000964:	f001 face 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	480e      	ldr	r0, [pc, #56]	; (80009b4 <MX_GPIO_Init+0x1c0>)
 800097c:	f001 fac2 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000980:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000992:	230b      	movs	r3, #11
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_GPIO_Init+0x1c0>)
 800099e:	f001 fab1 	bl	8001f04 <HAL_GPIO_Init>

}
 80009a2:	bf00      	nop
 80009a4:	3730      	adds	r7, #48	; 0x30
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020400 	.word	0x40020400
 80009b4:	40021800 	.word	0x40021800
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020000 	.word	0x40020000

080009c0 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint16_t WS9527_Reading;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	WS9527_GetReadings(hadc);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fe41 	bl	8000650 <WS9527_GetReadings>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d102      	bne.n	80009f0 <HAL_TIM_PeriodElapsedCallback+0x18>
		/* TIM3 is set with the frequency of 1000 Hz (period of 1 ms) */
		WS9527_StartReadings();
 80009ea:	f7ff fe27 	bl	800063c <WS9527_StartReadings>
	}
	else if (htim->Instance == TIM4) {
			/* TIM4 is set with the frequency of 1 Hz (period of 1 s) */
			UART_TransmitData(WS9527_Reading);
	}
}
 80009ee:	e009      	b.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0x2c>
	else if (htim->Instance == TIM4) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d104      	bne.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0x2c>
			UART_TransmitData(WS9527_Reading);
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f8ca 	bl	8000b98 <UART_TransmitData>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40000400 	.word	0x40000400
 8000a10:	40000800 	.word	0x40000800
 8000a14:	2000009a 	.word	0x2000009a

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1c:	f000 fba5 	bl	800116a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a20:	f000 f81a 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 8000a24:	f000 f992 	bl	8000d4c <MX_TIM3_Init>
  MX_GPIO_Init();
 8000a28:	f7ff fee4 	bl	80007f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a2c:	f000 fa6e 	bl	8000f0c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000a30:	f7ff fe46 	bl	80006c0 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a34:	f000 fae6 	bl	8001004 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000a38:	f000 f9d6 	bl	8000de8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <main+0x38>)
 8000a3e:	f002 feff 	bl	8003840 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000a42:	4804      	ldr	r0, [pc, #16]	; (8000a54 <main+0x3c>)
 8000a44:	f002 fefc 	bl	8003840 <HAL_TIM_Base_Start_IT>
	WS9527_Initialize();
 8000a48:	f7ff fdee 	bl	8000628 <WS9527_Initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000a4c:	e7fe      	b.n	8000a4c <main+0x34>
 8000a4e:	bf00      	nop
 8000a50:	20000130 	.word	0x20000130
 8000a54:	200000e4 	.word	0x200000e4

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0b8      	sub	sp, #224	; 0xe0
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a62:	2234      	movs	r2, #52	; 0x34
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 ff12 	bl	8005890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	2290      	movs	r2, #144	; 0x90
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f004 ff03 	bl	8005890 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a8a:	f001 fd49 	bl	8002520 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <SystemClock_Config+0x128>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a3b      	ldr	r2, [pc, #236]	; (8000b80 <SystemClock_Config+0x128>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <SystemClock_Config+0x128>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa6:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <SystemClock_Config+0x12c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aae:	4a35      	ldr	r2, [pc, #212]	; (8000b84 <SystemClock_Config+0x12c>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <SystemClock_Config+0x12c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ae4:	2360      	movs	r3, #96	; 0x60
 8000ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000af0:	2304      	movs	r3, #4
 8000af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fd6d 	bl	80025e0 <HAL_RCC_OscConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b0c:	f000 f83e 	bl	8000b8c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b10:	f001 fd16 	bl	8002540 <HAL_PWREx_EnableOverDrive>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b1a:	f000 f837 	bl	8000b8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	230f      	movs	r3, #15
 8000b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2302      	movs	r3, #2
 8000b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b42:	2103      	movs	r1, #3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fff9 	bl	8002b3c <HAL_RCC_ClockConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000b50:	f000 f81c 	bl	8000b8c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <SystemClock_Config+0x130>)
 8000b56:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 f9ea 	bl	8002f40 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000b72:	f000 f80b 	bl	8000b8c <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	37e0      	adds	r7, #224	; 0xe0
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000
 8000b88:	00200100 	.word	0x00200100

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <UART_TransmitData>:
/* the UART port is hardcoded as UART3 for simplicity */

#include "messages.h"

void UART_TransmitData(uint16_t reading) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
	char json_data[21];
    sprintf(json_data, "{ \"moisture\" : %03d }", reading);
 8000ba2:	88fa      	ldrh	r2, [r7, #6]
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <UART_TransmitData+0x30>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 fe78 	bl	80058a0 <siprintf>

	HAL_UART_Transmit(&huart3, (uint8_t*)json_data, sizeof(json_data) - 1, 100);
 8000bb0:	f107 0108 	add.w	r1, r7, #8
 8000bb4:	2364      	movs	r3, #100	; 0x64
 8000bb6:	2214      	movs	r2, #20
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <UART_TransmitData+0x34>)
 8000bba:	f003 faff 	bl	80041bc <HAL_UART_Transmit>
}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	08006114 	.word	0x08006114
 8000bcc:	2000017c 	.word	0x2000017c

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x44>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_MspInit+0x44>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_MspInit+0x44>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x44>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 fabe 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <ADC_IRQHandler+0x10>)
 8000c72:	f000 fc17 	bl	80014a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000009c 	.word	0x2000009c

08000c80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM3_IRQHandler+0x10>)
 8000c86:	f002 fe53 	bl	8003930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000130 	.word	0x20000130

08000c94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM4_IRQHandler+0x10>)
 8000c9a:	f002 fe49 	bl	8003930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000e4 	.word	0x200000e4

08000ca8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <USART3_IRQHandler+0x10>)
 8000cae:	f003 fb19 	bl	80042e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000017c 	.word	0x2000017c

08000cbc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000cc4:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <_sbrk+0x64>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <_sbrk+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d207      	bcs.n	8000cfc <_sbrk+0x40>
		errno = ENOMEM;
 8000cec:	f004 fda6 	bl	800583c <__errno>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20080000 	.word	0x20080000
 8000d1c:	00000400 	.word	0x00000400
 8000d20:	2000008c 	.word	0x2000008c
 8000d24:	20000618 	.word	0x20000618

08000d28 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_TIM3_Init+0x94>)
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <MX_TIM3_Init+0x98>)
 8000d6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <MX_TIM3_Init+0x94>)
 8000d72:	225f      	movs	r2, #95	; 0x5f
 8000d74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_TIM3_Init+0x94>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_TIM3_Init+0x94>)
 8000d7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_TIM3_Init+0x94>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_TIM3_Init+0x94>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d90:	4813      	ldr	r0, [pc, #76]	; (8000de0 <MX_TIM3_Init+0x94>)
 8000d92:	f002 fcfd 	bl	8003790 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d9c:	f7ff fef6 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_TIM3_Init+0x94>)
 8000dae:	f002 fedf 	bl	8003b70 <HAL_TIM_ConfigClockSource>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000db8:	f7ff fee8 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_TIM3_Init+0x94>)
 8000dca:	f003 f8fd 	bl	8003fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000dd4:	f7ff feda 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000130 	.word	0x20000130
 8000de4:	40000400 	.word	0x40000400

08000de8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_TIM4_Init+0x98>)
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <MX_TIM4_Init+0x9c>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9599;
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_TIM4_Init+0x98>)
 8000e0e:	f242 527f 	movw	r2, #9599	; 0x257f
 8000e12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_TIM4_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_TIM4_Init+0x98>)
 8000e1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_TIM4_Init+0x98>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <MX_TIM4_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e2e:	4814      	ldr	r0, [pc, #80]	; (8000e80 <MX_TIM4_Init+0x98>)
 8000e30:	f002 fcae 	bl	8003790 <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000e3a:	f7ff fea7 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480d      	ldr	r0, [pc, #52]	; (8000e80 <MX_TIM4_Init+0x98>)
 8000e4c:	f002 fe90 	bl	8003b70 <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000e56:	f7ff fe99 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <MX_TIM4_Init+0x98>)
 8000e68:	f003 f8ae 	bl	8003fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000e72:	f7ff fe8b 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000e4 	.word	0x200000e4
 8000e84:	40000800 	.word	0x40000800

08000e88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1a      	ldr	r2, [pc, #104]	; (8000f00 <HAL_TIM_Base_MspInit+0x78>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d114      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_TIM_Base_MspInit+0x7c>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_TIM_Base_MspInit+0x7c>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_TIM_Base_MspInit+0x7c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	201d      	movs	r0, #29
 8000eb8:	f000 ff5b 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ebc:	201d      	movs	r0, #29
 8000ebe:	f000 ff74 	bl	8001daa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000ec2:	e018      	b.n	8000ef6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <HAL_TIM_Base_MspInit+0x80>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d113      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_TIM_Base_MspInit+0x7c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <HAL_TIM_Base_MspInit+0x7c>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_TIM_Base_MspInit+0x7c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	201e      	movs	r0, #30
 8000eec:	f000 ff41 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ef0:	201e      	movs	r0, #30
 8000ef2:	f000 ff5a 	bl	8001daa <HAL_NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40000400 	.word	0x40000400
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40000800 	.word	0x40000800

08000f0c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <MX_USART3_UART_Init+0x5c>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f50:	f003 f8e6 	bl	8004120 <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f5a:	f7ff fe17 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000017c 	.word	0x2000017c
 8000f68:	40004800 	.word	0x40004800

08000f6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <HAL_UART_MspInit+0x8c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a1a      	ldr	r2, [pc, #104]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4809      	ldr	r0, [pc, #36]	; (8001000 <HAL_UART_MspInit+0x94>)
 8000fdc:	f000 ff92 	bl	8001f04 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2027      	movs	r0, #39	; 0x27
 8000fe6:	f000 fec4 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fea:	2027      	movs	r0, #39	; 0x27
 8000fec:	f000 fedd 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40004800 	.word	0x40004800
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020c00 	.word	0x40020c00

08001004 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800100e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001012:	2206      	movs	r2, #6
 8001014:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001018:	2202      	movs	r2, #2
 800101a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001024:	2202      	movs	r2, #2
 8001026:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102a:	2201      	movs	r2, #1
 800102c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103c:	2201      	movs	r2, #1
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001048:	f001 f921 	bl	800228e <HAL_PCD_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001052:	f7ff fd9b 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000200 	.word	0x20000200

08001060 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001080:	d141      	bne.n	8001106 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_PCD_MspInit+0xb0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a22      	ldr	r2, [pc, #136]	; (8001110 <HAL_PCD_MspInit+0xb0>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_PCD_MspInit+0xb0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800109a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010ac:	230a      	movs	r3, #10
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4817      	ldr	r0, [pc, #92]	; (8001114 <HAL_PCD_MspInit+0xb4>)
 80010b8:	f000 ff24 	bl	8001f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4810      	ldr	r0, [pc, #64]	; (8001114 <HAL_PCD_MspInit+0xb4>)
 80010d2:	f000 ff17 	bl	8001f04 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_PCD_MspInit+0xb0>)
 80010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010da:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_PCD_MspInit+0xb0>)
 80010dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e0:	6353      	str	r3, [r2, #52]	; 0x34
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_PCD_MspInit+0xb0>)
 80010e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_PCD_MspInit+0xb0>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_PCD_MspInit+0xb0>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_PCD_MspInit+0xb0>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001134:	4c0b      	ldr	r4, [pc, #44]	; (8001164 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001142:	f7ff fdf1 	bl	8000d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f004 fb7f 	bl	8005848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff fc65 	bl	8000a18 <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800115c:	08006188 	.word	0x08006188
  ldr r2, =_sbss
 8001160:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001164:	20000618 	.word	0x20000618

08001168 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <CAN1_RX0_IRQHandler>

0800116a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116e:	2003      	movs	r0, #3
 8001170:	f000 fdf4 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001174:	2000      	movs	r0, #0
 8001176:	f000 f805 	bl	8001184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117a:	f7ff fd29 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x54>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x58>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fe0f 	bl	8001dc6 <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f000 fdd7 	bl	8001d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <HAL_InitTick+0x5c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000604 	.word	0x20000604

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000604 	.word	0x20000604

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff ffee 	bl	800120c <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_Delay+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800124a:	bf00      	nop
 800124c:	f7ff ffde 	bl	800120c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008

0800126c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e031      	b.n	80012e6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fa6a 	bl	8000764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_ADC_Init+0x84>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	f043 0202 	orr.w	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 fb7a 	bl	80019b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f023 0303 	bic.w	r3, r3, #3
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
 80012d6:	e001      	b.n	80012dc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	ffffeefd 	.word	0xffffeefd

080012f4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_ADC_Start_IT+0x1a>
 800130a:	2302      	movs	r3, #2
 800130c:	e0b5      	b.n	800147a <HAL_ADC_Start_IT+0x186>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d018      	beq.n	8001356 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001334:	4b54      	ldr	r3, [pc, #336]	; (8001488 <HAL_ADC_Start_IT+0x194>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a54      	ldr	r2, [pc, #336]	; (800148c <HAL_ADC_Start_IT+0x198>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9a      	lsrs	r2, r3, #18
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001348:	e002      	b.n	8001350 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3b01      	subs	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f9      	bne.n	800134a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d17d      	bne.n	8001460 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001368:	4b49      	ldr	r3, [pc, #292]	; (8001490 <HAL_ADC_Start_IT+0x19c>)
 800136a:	4013      	ands	r3, r2
 800136c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800138a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800139e:	d106      	bne.n	80013ae <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	f023 0206 	bic.w	r2, r3, #6
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
 80013ac:	e002      	b.n	80013b4 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013c4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HAL_ADC_Start_IT+0x1a0>)
 80013d2:	430b      	orrs	r3, r1
 80013d4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_ADC_Start_IT+0x1a4>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10f      	bne.n	8001402 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d143      	bne.n	8001478 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	e03a      	b.n	8001478 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a25      	ldr	r2, [pc, #148]	; (800149c <HAL_ADC_Start_IT+0x1a8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d10e      	bne.n	800142a <HAL_ADC_Start_IT+0x136>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d107      	bne.n	800142a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001428:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_ADC_Start_IT+0x1a4>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	d120      	bne.n	8001478 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_ADC_Start_IT+0x1ac>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d11b      	bne.n	8001478 <HAL_ADC_Start_IT+0x184>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d114      	bne.n	8001478 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	e00b      	b.n	8001478 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f043 0210 	orr.w	r2, r3, #16
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	f043 0201 	orr.w	r2, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000000 	.word	0x20000000
 800148c:	431bde83 	.word	0x431bde83
 8001490:	fffff8fe 	.word	0xfffff8fe
 8001494:	04000020 	.word	0x04000020
 8001498:	40012300 	.word	0x40012300
 800149c:	40012000 	.word	0x40012000
 80014a0:	40012200 	.word	0x40012200

080014a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d049      	beq.n	800156e <HAL_ADC_IRQHandler+0xca>
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d046      	beq.n	800156e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d12b      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800150a:	2b00      	cmp	r3, #0
 800150c:	d127      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001526:	2b00      	cmp	r3, #0
 8001528:	d119      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0220 	bic.w	r2, r2, #32
 8001538:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f043 0201 	orr.w	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fa2e 	bl	80009c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0212 	mvn.w	r2, #18
 800156c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d057      	beq.n	8001634 <HAL_ADC_IRQHandler+0x190>
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d054      	beq.n	8001634 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	2b00      	cmp	r3, #0
 8001594:	d105      	bne.n	80015a2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d139      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d12b      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d124      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11d      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d119      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fabf 	bl	8001ba8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f06f 020c 	mvn.w	r2, #12
 8001632:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001642:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d017      	beq.n	800167a <HAL_ADC_IRQHandler+0x1d6>
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d014      	beq.n	800167a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d10d      	bne.n	800167a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f837 	bl	80016de <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f06f 0201 	mvn.w	r2, #1
 8001678:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001688:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d015      	beq.n	80016bc <HAL_ADC_IRQHandler+0x218>
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d012      	beq.n	80016bc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f043 0202 	orr.w	r2, r3, #2
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f06f 0220 	mvn.w	r2, #32
 80016aa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f820 	bl	80016f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f06f 0220 	mvn.w	r2, #32
 80016ba:	601a      	str	r2, [r3, #0]
  }
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1c>
 8001720:	2302      	movs	r3, #2
 8001722:	e136      	b.n	8001992 <HAL_ADC_ConfigChannel+0x28a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d93a      	bls.n	80017aa <HAL_ADC_ConfigChannel+0xa2>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800173c:	d035      	beq.n	80017aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68d9      	ldr	r1, [r3, #12]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	3b1e      	subs	r3, #30
 8001754:	2207      	movs	r2, #7
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a8d      	ldr	r2, [pc, #564]	; (80019a0 <HAL_ADC_ConfigChannel+0x298>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d10a      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68d9      	ldr	r1, [r3, #12]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	061a      	lsls	r2, r3, #24
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001782:	e035      	b.n	80017f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68d9      	ldr	r1, [r3, #12]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	4618      	mov	r0, r3
 8001796:	4603      	mov	r3, r0
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4403      	add	r3, r0
 800179c:	3b1e      	subs	r3, #30
 800179e:	409a      	lsls	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017a8:	e022      	b.n	80017f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6919      	ldr	r1, [r3, #16]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	2207      	movs	r2, #7
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43da      	mvns	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	400a      	ands	r2, r1
 80017cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6919      	ldr	r1, [r3, #16]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	4603      	mov	r3, r0
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4403      	add	r3, r0
 80017e6:	409a      	lsls	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b06      	cmp	r3, #6
 80017f6:	d824      	bhi.n	8001842 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	3b05      	subs	r3, #5
 800180a:	221f      	movs	r2, #31
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43da      	mvns	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	400a      	ands	r2, r1
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b29b      	uxth	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b05      	subs	r3, #5
 8001834:	fa00 f203 	lsl.w	r2, r0, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	635a      	str	r2, [r3, #52]	; 0x34
 8001840:	e04c      	b.n	80018dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d824      	bhi.n	8001894 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	3b23      	subs	r3, #35	; 0x23
 800185c:	221f      	movs	r2, #31
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	400a      	ands	r2, r1
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3b23      	subs	r3, #35	; 0x23
 8001886:	fa00 f203 	lsl.w	r2, r0, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
 8001892:	e023      	b.n	80018dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3b41      	subs	r3, #65	; 0x41
 80018a6:	221f      	movs	r2, #31
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43da      	mvns	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	400a      	ands	r2, r1
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b41      	subs	r3, #65	; 0x41
 80018d0:	fa00 f203 	lsl.w	r2, r0, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a30      	ldr	r2, [pc, #192]	; (80019a4 <HAL_ADC_ConfigChannel+0x29c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10a      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1f4>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018ee:	d105      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a2c      	ldr	r2, [pc, #176]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80018f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <HAL_ADC_ConfigChannel+0x29c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10f      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x21e>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b12      	cmp	r3, #18
 800190c:	d10b      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001914:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001918:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001924:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_ADC_ConfigChannel+0x29c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d12b      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x280>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <HAL_ADC_ConfigChannel+0x298>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d003      	beq.n	8001942 <HAL_ADC_ConfigChannel+0x23a>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b11      	cmp	r3, #17
 8001940:	d122      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001948:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800194c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001954:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001958:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_ADC_ConfigChannel+0x298>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d111      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_ADC_ConfigChannel+0x2a4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_ADC_ConfigChannel+0x2a8>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	0c9a      	lsrs	r2, r3, #18
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800197a:	e002      	b.n	8001982 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3b01      	subs	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f9      	bne.n	800197c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	10000012 	.word	0x10000012
 80019a4:	40012000 	.word	0x40012000
 80019a8:	40012300 	.word	0x40012300
 80019ac:	20000000 	.word	0x20000000
 80019b0:	431bde83 	.word	0x431bde83

080019b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80019bc:	4b78      	ldr	r3, [pc, #480]	; (8001ba0 <ADC_Init+0x1ec>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a77      	ldr	r2, [pc, #476]	; (8001ba0 <ADC_Init+0x1ec>)
 80019c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019c6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019c8:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <ADC_Init+0x1ec>)
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4973      	ldr	r1, [pc, #460]	; (8001ba0 <ADC_Init+0x1ec>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	021a      	lsls	r2, r3, #8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6899      	ldr	r1, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <ADC_Init+0x1f0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d022      	beq.n	8001a8e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6899      	ldr	r1, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	e00f      	b.n	8001aae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0202 	bic.w	r2, r2, #2
 8001abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6899      	ldr	r1, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	005a      	lsls	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01b      	beq.n	8001b14 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001afa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	3b01      	subs	r3, #1
 8001b08:	035a      	lsls	r2, r3, #13
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	e007      	b.n	8001b24 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	051a      	lsls	r2, r3, #20
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6899      	ldr	r1, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b66:	025a      	lsls	r2, r3, #9
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6899      	ldr	r1, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	029a      	lsls	r2, r3, #10
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40012300 	.word	0x40012300
 8001ba4:	0f000001 	.word	0x0f000001

08001ba8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <__NVIC_SetPriorityGrouping+0x40>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <__NVIC_SetPriorityGrouping+0x40>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00
 8001c00:	05fa0000 	.word	0x05fa0000

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	; (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff29 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff3e 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff31 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffa2 	bl	8001d18 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff fa0e 	bl	800120c <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d008      	beq.n	8001e10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e052      	b.n	8001eb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0216 	bic.w	r2, r2, #22
 8001e1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d103      	bne.n	8001e40 <HAL_DMA_Abort+0x62>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0208 	bic.w	r2, r2, #8
 8001e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e60:	e013      	b.n	8001e8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e62:	f7ff f9d3 	bl	800120c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d90c      	bls.n	8001e8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e015      	b.n	8001eb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e4      	bne.n	8001e62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	223f      	movs	r2, #63	; 0x3f
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d004      	beq.n	8001edc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2280      	movs	r2, #128	; 0x80
 8001ed6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e00c      	b.n	8001ef6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2205      	movs	r2, #5
 8001ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	e175      	b.n	8002210 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	f040 8164 	bne.w	800220a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d005      	beq.n	8001f5a <HAL_GPIO_Init+0x56>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d130      	bne.n	8001fbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f90:	2201      	movs	r2, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 0201 	and.w	r2, r3, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d017      	beq.n	8001ff8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d123      	bne.n	800204c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	08da      	lsrs	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3208      	adds	r2, #8
 8002046:	69b9      	ldr	r1, [r7, #24]
 8002048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0203 	and.w	r2, r3, #3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80be 	beq.w	800220a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	4b66      	ldr	r3, [pc, #408]	; (8002228 <HAL_GPIO_Init+0x324>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a65      	ldr	r2, [pc, #404]	; (8002228 <HAL_GPIO_Init+0x324>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_GPIO_Init+0x324>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80020a6:	4a61      	ldr	r2, [pc, #388]	; (800222c <HAL_GPIO_Init+0x328>)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a58      	ldr	r2, [pc, #352]	; (8002230 <HAL_GPIO_Init+0x32c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d037      	beq.n	8002142 <HAL_GPIO_Init+0x23e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a57      	ldr	r2, [pc, #348]	; (8002234 <HAL_GPIO_Init+0x330>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d031      	beq.n	800213e <HAL_GPIO_Init+0x23a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a56      	ldr	r2, [pc, #344]	; (8002238 <HAL_GPIO_Init+0x334>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d02b      	beq.n	800213a <HAL_GPIO_Init+0x236>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a55      	ldr	r2, [pc, #340]	; (800223c <HAL_GPIO_Init+0x338>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d025      	beq.n	8002136 <HAL_GPIO_Init+0x232>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a54      	ldr	r2, [pc, #336]	; (8002240 <HAL_GPIO_Init+0x33c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01f      	beq.n	8002132 <HAL_GPIO_Init+0x22e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a53      	ldr	r2, [pc, #332]	; (8002244 <HAL_GPIO_Init+0x340>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <HAL_GPIO_Init+0x22a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a52      	ldr	r2, [pc, #328]	; (8002248 <HAL_GPIO_Init+0x344>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x226>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a51      	ldr	r2, [pc, #324]	; (800224c <HAL_GPIO_Init+0x348>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x222>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a50      	ldr	r2, [pc, #320]	; (8002250 <HAL_GPIO_Init+0x34c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x21e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4f      	ldr	r2, [pc, #316]	; (8002254 <HAL_GPIO_Init+0x350>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x21a>
 800211a:	2309      	movs	r3, #9
 800211c:	e012      	b.n	8002144 <HAL_GPIO_Init+0x240>
 800211e:	230a      	movs	r3, #10
 8002120:	e010      	b.n	8002144 <HAL_GPIO_Init+0x240>
 8002122:	2308      	movs	r3, #8
 8002124:	e00e      	b.n	8002144 <HAL_GPIO_Init+0x240>
 8002126:	2307      	movs	r3, #7
 8002128:	e00c      	b.n	8002144 <HAL_GPIO_Init+0x240>
 800212a:	2306      	movs	r3, #6
 800212c:	e00a      	b.n	8002144 <HAL_GPIO_Init+0x240>
 800212e:	2305      	movs	r3, #5
 8002130:	e008      	b.n	8002144 <HAL_GPIO_Init+0x240>
 8002132:	2304      	movs	r3, #4
 8002134:	e006      	b.n	8002144 <HAL_GPIO_Init+0x240>
 8002136:	2303      	movs	r3, #3
 8002138:	e004      	b.n	8002144 <HAL_GPIO_Init+0x240>
 800213a:	2302      	movs	r3, #2
 800213c:	e002      	b.n	8002144 <HAL_GPIO_Init+0x240>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_GPIO_Init+0x240>
 8002142:	2300      	movs	r3, #0
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	f002 0203 	and.w	r2, r2, #3
 800214a:	0092      	lsls	r2, r2, #2
 800214c:	4093      	lsls	r3, r2
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002154:	4935      	ldr	r1, [pc, #212]	; (800222c <HAL_GPIO_Init+0x328>)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002162:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <HAL_GPIO_Init+0x354>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002186:	4a34      	ldr	r2, [pc, #208]	; (8002258 <HAL_GPIO_Init+0x354>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800218c:	4b32      	ldr	r3, [pc, #200]	; (8002258 <HAL_GPIO_Init+0x354>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b0:	4a29      	ldr	r2, [pc, #164]	; (8002258 <HAL_GPIO_Init+0x354>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <HAL_GPIO_Init+0x354>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021da:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <HAL_GPIO_Init+0x354>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_GPIO_Init+0x354>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <HAL_GPIO_Init+0x354>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3301      	adds	r3, #1
 800220e:	61fb      	str	r3, [r7, #28]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	2b0f      	cmp	r3, #15
 8002214:	f67f ae86 	bls.w	8001f24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	40013800 	.word	0x40013800
 8002230:	40020000 	.word	0x40020000
 8002234:	40020400 	.word	0x40020400
 8002238:	40020800 	.word	0x40020800
 800223c:	40020c00 	.word	0x40020c00
 8002240:	40021000 	.word	0x40021000
 8002244:	40021400 	.word	0x40021400
 8002248:	40021800 	.word	0x40021800
 800224c:	40021c00 	.word	0x40021c00
 8002250:	40022000 	.word	0x40022000
 8002254:	40022400 	.word	0x40022400
 8002258:	40013c00 	.word	0x40013c00

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002278:	e003      	b.n	8002282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	619a      	str	r2, [r3, #24]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800228e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002290:	b08f      	sub	sp, #60	; 0x3c
 8002292:	af0a      	add	r7, sp, #40	; 0x28
 8002294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e116      	b.n	80024ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fed0 	bl	8001060 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 f816 	bl	8005310 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	687e      	ldr	r6, [r7, #4]
 80022ec:	466d      	mov	r5, sp
 80022ee:	f106 0410 	add.w	r4, r6, #16
 80022f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002302:	1d33      	adds	r3, r6, #4
 8002304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002306:	6838      	ldr	r0, [r7, #0]
 8002308:	f002 ffaa 	bl	8005260 <USB_CoreInit>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2202      	movs	r2, #2
 8002316:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0d7      	b.n	80024ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f003 f804 	bl	8005332 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e04a      	b.n	80023c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	333d      	adds	r3, #61	; 0x3d
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	333c      	adds	r3, #60	; 0x3c
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	b298      	uxth	r0, r3
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3342      	adds	r3, #66	; 0x42
 800236c:	4602      	mov	r2, r0
 800236e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	333f      	adds	r3, #63	; 0x3f
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	3344      	adds	r3, #68	; 0x44
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	3348      	adds	r3, #72	; 0x48
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	3350      	adds	r3, #80	; 0x50
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	3301      	adds	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d3af      	bcc.n	8002330 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e044      	b.n	8002460 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3301      	adds	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	d3b5      	bcc.n	80023d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	687e      	ldr	r6, [r7, #4]
 8002472:	466d      	mov	r5, sp
 8002474:	f106 0410 	add.w	r4, r6, #16
 8002478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002480:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002484:	e885 0003 	stmia.w	r5, {r0, r1}
 8002488:	1d33      	adds	r3, r6, #4
 800248a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248c:	6838      	ldr	r0, [r7, #0]
 800248e:	f002 ff9d 	bl	80053cc <USB_DevInit>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e014      	b.n	80024ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d102      	bne.n	80024c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f80b 	bl	80024d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 f957 	bl	800577a <USB_DevDisconnect>

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080024d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_PCDEx_ActivateLPM+0x44>)
 8002508:	4313      	orrs	r3, r2
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	10000003 	.word	0x10000003

08002520 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40007000 	.word	0x40007000

08002540 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a22      	ldr	r2, [pc, #136]	; (80025d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002562:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800256e:	f7fe fe4d 	bl	800120c <HAL_GetTick>
 8002572:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002574:	e009      	b.n	800258a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002576:	f7fe fe49 	bl	800120c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002584:	d901      	bls.n	800258a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e022      	b.n	80025d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002596:	d1ee      	bne.n	8002576 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002598:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a4:	f7fe fe32 	bl	800120c <HAL_GetTick>
 80025a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025aa:	e009      	b.n	80025c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025ac:	f7fe fe2e 	bl	800120c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025ba:	d901      	bls.n	80025c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e007      	b.n	80025d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025cc:	d1ee      	bne.n	80025ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40007000 	.word	0x40007000

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025e8:	2300      	movs	r3, #0
 80025ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e29b      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8087 	beq.w	8002712 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002604:	4b96      	ldr	r3, [pc, #600]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b04      	cmp	r3, #4
 800260e:	d00c      	beq.n	800262a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002610:	4b93      	ldr	r3, [pc, #588]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d112      	bne.n	8002642 <HAL_RCC_OscConfig+0x62>
 800261c:	4b90      	ldr	r3, [pc, #576]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002628:	d10b      	bne.n	8002642 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262a:	4b8d      	ldr	r3, [pc, #564]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d06c      	beq.n	8002710 <HAL_RCC_OscConfig+0x130>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d168      	bne.n	8002710 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e275      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x7a>
 800264c:	4b84      	ldr	r3, [pc, #528]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a83      	ldr	r2, [pc, #524]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e02e      	b.n	80026b8 <HAL_RCC_OscConfig+0xd8>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x9c>
 8002662:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a7e      	ldr	r2, [pc, #504]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b7c      	ldr	r3, [pc, #496]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a7b      	ldr	r2, [pc, #492]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e01d      	b.n	80026b8 <HAL_RCC_OscConfig+0xd8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0xc0>
 8002686:	4b76      	ldr	r3, [pc, #472]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a75      	ldr	r2, [pc, #468]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800268c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b73      	ldr	r3, [pc, #460]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a72      	ldr	r2, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0xd8>
 80026a0:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6e      	ldr	r2, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a6b      	ldr	r2, [pc, #428]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fda4 	bl	800120c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7fe fda0 	bl	800120c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e229      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b61      	ldr	r3, [pc, #388]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe8>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fd90 	bl	800120c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe fd8c 	bl	800120c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e215      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	4b57      	ldr	r3, [pc, #348]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x110>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d069      	beq.n	80027f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800271e:	4b50      	ldr	r3, [pc, #320]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b4d      	ldr	r3, [pc, #308]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d11c      	bne.n	8002770 <HAL_RCC_OscConfig+0x190>
 8002736:	4b4a      	ldr	r3, [pc, #296]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d116      	bne.n	8002770 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_RCC_OscConfig+0x17a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e1e9      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	493d      	ldr	r1, [pc, #244]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	e040      	b.n	80027f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002778:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a38      	ldr	r2, [pc, #224]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fd42 	bl	800120c <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7fe fd3e 	bl	800120c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e1c7      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b30      	ldr	r3, [pc, #192]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4929      	ldr	r1, [pc, #164]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
 80027be:	e018      	b.n	80027f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c0:	4b27      	ldr	r3, [pc, #156]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a26      	ldr	r2, [pc, #152]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fd1e 	bl	800120c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d4:	f7fe fd1a 	bl	800120c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1a3      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d038      	beq.n	8002870 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d019      	beq.n	800283a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280a:	4a15      	ldr	r2, [pc, #84]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe fcfb 	bl	800120c <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281a:	f7fe fcf7 	bl	800120c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e180      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800282e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x23a>
 8002838:	e01a      	b.n	8002870 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 800283c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283e:	4a08      	ldr	r2, [pc, #32]	; (8002860 <HAL_RCC_OscConfig+0x280>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002846:	f7fe fce1 	bl	800120c <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284e:	f7fe fcdd 	bl	800120c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d903      	bls.n	8002864 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e166      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
 8002860:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002864:	4b92      	ldr	r3, [pc, #584]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ee      	bne.n	800284e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a4 	beq.w	80029c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287e:	4b8c      	ldr	r3, [pc, #560]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10d      	bne.n	80028a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	4b89      	ldr	r3, [pc, #548]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4a88      	ldr	r2, [pc, #544]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002894:	6413      	str	r3, [r2, #64]	; 0x40
 8002896:	4b86      	ldr	r3, [pc, #536]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a6:	4b83      	ldr	r3, [pc, #524]	; (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d118      	bne.n	80028e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80028b2:	4b80      	ldr	r3, [pc, #512]	; (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7f      	ldr	r2, [pc, #508]	; (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028be:	f7fe fca5 	bl	800120c <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c6:	f7fe fca1 	bl	800120c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b64      	cmp	r3, #100	; 0x64
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e12a      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d8:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x31a>
 80028ec:	4b70      	ldr	r3, [pc, #448]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a6f      	ldr	r2, [pc, #444]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	e02d      	b.n	8002956 <HAL_RCC_OscConfig+0x376>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x33c>
 8002902:	4b6b      	ldr	r3, [pc, #428]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a6a      	ldr	r2, [pc, #424]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a67      	ldr	r2, [pc, #412]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	e01c      	b.n	8002956 <HAL_RCC_OscConfig+0x376>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d10c      	bne.n	800293e <HAL_RCC_OscConfig+0x35e>
 8002924:	4b62      	ldr	r3, [pc, #392]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a61      	ldr	r2, [pc, #388]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	4b5f      	ldr	r3, [pc, #380]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a5e      	ldr	r2, [pc, #376]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6713      	str	r3, [r2, #112]	; 0x70
 800293c:	e00b      	b.n	8002956 <HAL_RCC_OscConfig+0x376>
 800293e:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a5b      	ldr	r2, [pc, #364]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
 800294a:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a58      	ldr	r2, [pc, #352]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002950:	f023 0304 	bic.w	r3, r3, #4
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d015      	beq.n	800298a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295e:	f7fe fc55 	bl	800120c <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe fc51 	bl	800120c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	; 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0d8      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297c:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ee      	beq.n	8002966 <HAL_RCC_OscConfig+0x386>
 8002988:	e014      	b.n	80029b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298a:	f7fe fc3f 	bl	800120c <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe fc3b 	bl	800120c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0c2      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a8:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ee      	bne.n	8002992 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80ae 	beq.w	8002b2c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d0:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d06d      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d14b      	bne.n	8002a7c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e4:	4b32      	ldr	r3, [pc, #200]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a31      	ldr	r2, [pc, #196]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fc0c 	bl	800120c <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f8:	f7fe fc08 	bl	800120c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e091      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0a:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	019b      	lsls	r3, r3, #6
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	071b      	lsls	r3, r3, #28
 8002a42:	491b      	ldr	r1, [pc, #108]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fbda 	bl	800120c <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fbd6 	bl	800120c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e05f      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x47c>
 8002a7a:	e057      	b.n	8002b2c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fbc0 	bl	800120c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe fbbc 	bl	800120c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e045      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x4b0>
 8002aae:	e03d      	b.n	8002b2c <HAL_RCC_OscConfig+0x54c>
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <HAL_RCC_OscConfig+0x558>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d030      	beq.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d129      	bne.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d122      	bne.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d119      	bne.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	3b01      	subs	r3, #1
 8002b02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d10f      	bne.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800

08002b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0d0      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b54:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d910      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 020f 	bic.w	r2, r3, #15
 8002b6a:	4965      	ldr	r1, [pc, #404]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0b8      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d020      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b9c:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a58      	ldr	r2, [pc, #352]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ba6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb4:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	494d      	ldr	r1, [pc, #308]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d040      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d115      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e07f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfe:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e073      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06b      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1e:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f023 0203 	bic.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4936      	ldr	r1, [pc, #216]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c30:	f7fe faec 	bl	800120c <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c38:	f7fe fae8 	bl	800120c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e053      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 020c 	and.w	r2, r3, #12
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d1eb      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d210      	bcs.n	8002c90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 020f 	bic.w	r2, r3, #15
 8002c76:	4922      	ldr	r1, [pc, #136]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e032      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4916      	ldr	r1, [pc, #88]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	490e      	ldr	r1, [pc, #56]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cce:	f000 f821 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	490a      	ldr	r1, [pc, #40]	; (8002d08 <HAL_RCC_ClockConfig+0x1cc>)
 8002ce0:	5ccb      	ldrb	r3, [r1, r3]
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1d0>)
 8002ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1d4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fa48 	bl	8001184 <HAL_InitTick>

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023c00 	.word	0x40023c00
 8002d04:	40023800 	.word	0x40023800
 8002d08:	0800612c 	.word	0x0800612c
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	20000004 	.word	0x20000004

08002d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	2300      	movs	r3, #0
 8002d26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d2c:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d00d      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x40>
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	f200 80bd 	bhi.w	8002eb8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x34>
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d003      	beq.n	8002d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d46:	e0b7      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d48:	4b61      	ldr	r3, [pc, #388]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d4a:	60bb      	str	r3, [r7, #8]
      break;
 8002d4c:	e0b7      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d4e:	4b61      	ldr	r3, [pc, #388]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d50:	60bb      	str	r3, [r7, #8]
      break;
 8002d52:	e0b4      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d54:	4b5d      	ldr	r3, [pc, #372]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d5c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d04d      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6a:	4b58      	ldr	r3, [pc, #352]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	099b      	lsrs	r3, r3, #6
 8002d70:	461a      	mov	r2, r3
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d7a:	f04f 0100 	mov.w	r1, #0
 8002d7e:	ea02 0800 	and.w	r8, r2, r0
 8002d82:	ea03 0901 	and.w	r9, r3, r1
 8002d86:	4640      	mov	r0, r8
 8002d88:	4649      	mov	r1, r9
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	014b      	lsls	r3, r1, #5
 8002d94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d98:	0142      	lsls	r2, r0, #5
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	ebb0 0008 	subs.w	r0, r0, r8
 8002da2:	eb61 0109 	sbc.w	r1, r1, r9
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	018b      	lsls	r3, r1, #6
 8002db0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002db4:	0182      	lsls	r2, r0, #6
 8002db6:	1a12      	subs	r2, r2, r0
 8002db8:	eb63 0301 	sbc.w	r3, r3, r1
 8002dbc:	f04f 0000 	mov.w	r0, #0
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	00d9      	lsls	r1, r3, #3
 8002dc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dca:	00d0      	lsls	r0, r2, #3
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	eb12 0208 	adds.w	r2, r2, r8
 8002dd4:	eb43 0309 	adc.w	r3, r3, r9
 8002dd8:	f04f 0000 	mov.w	r0, #0
 8002ddc:	f04f 0100 	mov.w	r1, #0
 8002de0:	0259      	lsls	r1, r3, #9
 8002de2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002de6:	0250      	lsls	r0, r2, #9
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4610      	mov	r0, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	f7fd fa72 	bl	80002e0 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4613      	mov	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e04a      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e06:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	099b      	lsrs	r3, r3, #6
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e16:	f04f 0100 	mov.w	r1, #0
 8002e1a:	ea02 0400 	and.w	r4, r2, r0
 8002e1e:	ea03 0501 	and.w	r5, r3, r1
 8002e22:	4620      	mov	r0, r4
 8002e24:	4629      	mov	r1, r5
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	014b      	lsls	r3, r1, #5
 8002e30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e34:	0142      	lsls	r2, r0, #5
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	1b00      	subs	r0, r0, r4
 8002e3c:	eb61 0105 	sbc.w	r1, r1, r5
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	018b      	lsls	r3, r1, #6
 8002e4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e4e:	0182      	lsls	r2, r0, #6
 8002e50:	1a12      	subs	r2, r2, r0
 8002e52:	eb63 0301 	sbc.w	r3, r3, r1
 8002e56:	f04f 0000 	mov.w	r0, #0
 8002e5a:	f04f 0100 	mov.w	r1, #0
 8002e5e:	00d9      	lsls	r1, r3, #3
 8002e60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e64:	00d0      	lsls	r0, r2, #3
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	1912      	adds	r2, r2, r4
 8002e6c:	eb45 0303 	adc.w	r3, r5, r3
 8002e70:	f04f 0000 	mov.w	r0, #0
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	0299      	lsls	r1, r3, #10
 8002e7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e7e:	0290      	lsls	r0, r2, #10
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	f7fd fa26 	bl	80002e0 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	60bb      	str	r3, [r7, #8]
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002eba:	60bb      	str	r3, [r7, #8]
      break;
 8002ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	00f42400 	.word	0x00f42400
 8002ed4:	007a1200 	.word	0x007a1200

08002ed8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000000 	.word	0x20000000

08002ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ef4:	f7ff fff0 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0a9b      	lsrs	r3, r3, #10
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4903      	ldr	r1, [pc, #12]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	0800613c 	.word	0x0800613c

08002f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f1c:	f7ff ffdc 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	0b5b      	lsrs	r3, r3, #13
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	0800613c 	.word	0x0800613c

08002f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d012      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f68:	4b69      	ldr	r3, [pc, #420]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a68      	ldr	r2, [pc, #416]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f72:	6093      	str	r3, [r2, #8]
 8002f74:	4b66      	ldr	r3, [pc, #408]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	4964      	ldr	r1, [pc, #400]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d017      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f9a:	4b5d      	ldr	r3, [pc, #372]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa8:	4959      	ldr	r1, [pc, #356]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d017      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fd6:	4b4e      	ldr	r3, [pc, #312]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	494a      	ldr	r1, [pc, #296]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003002:	2301      	movs	r3, #1
 8003004:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003012:	2301      	movs	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 808b 	beq.w	800313a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003024:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	4a39      	ldr	r2, [pc, #228]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302e:	6413      	str	r3, [r2, #64]	; 0x40
 8003030:	4b37      	ldr	r3, [pc, #220]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800303c:	4b35      	ldr	r3, [pc, #212]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a34      	ldr	r2, [pc, #208]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003048:	f7fe f8e0 	bl	800120c <HAL_GetTick>
 800304c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003050:	f7fe f8dc 	bl	800120c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e38f      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003062:	4b2c      	ldr	r3, [pc, #176]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800306e:	4b28      	ldr	r3, [pc, #160]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003076:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d035      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	429a      	cmp	r2, r3
 800308a:	d02e      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800308c:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003094:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003096:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	4a1d      	ldr	r2, [pc, #116]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80030ae:	4a18      	ldr	r2, [pc, #96]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030b4:	4b16      	ldr	r3, [pc, #88]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d114      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe f8a4 	bl	800120c <HAL_GetTick>
 80030c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fe f8a0 	bl	800120c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e351      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0ee      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f6:	d111      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003106:	400b      	ands	r3, r1
 8003108:	4901      	ldr	r1, [pc, #4]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
 800310e:	e00b      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000
 8003118:	0ffffcff 	.word	0x0ffffcff
 800311c:	4bb3      	ldr	r3, [pc, #716]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4ab2      	ldr	r2, [pc, #712]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003122:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003126:	6093      	str	r3, [r2, #8]
 8003128:	4bb0      	ldr	r3, [pc, #704]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800312a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003134:	49ad      	ldr	r1, [pc, #692]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003136:	4313      	orrs	r3, r2
 8003138:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003146:	4ba9      	ldr	r3, [pc, #676]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800314c:	4aa7      	ldr	r2, [pc, #668]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800314e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003152:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003156:	4ba5      	ldr	r3, [pc, #660]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003158:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	49a2      	ldr	r1, [pc, #648]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003174:	4b9d      	ldr	r3, [pc, #628]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003182:	499a      	ldr	r1, [pc, #616]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003196:	4b95      	ldr	r3, [pc, #596]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031a4:	4991      	ldr	r1, [pc, #580]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031b8:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c6:	4989      	ldr	r1, [pc, #548]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031da:	4b84      	ldr	r3, [pc, #528]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4980      	ldr	r1, [pc, #512]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031fc:	4b7b      	ldr	r3, [pc, #492]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	f023 0203 	bic.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	4978      	ldr	r1, [pc, #480]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800321e:	4b73      	ldr	r3, [pc, #460]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f023 020c 	bic.w	r2, r3, #12
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322c:	496f      	ldr	r1, [pc, #444]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003240:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	4967      	ldr	r1, [pc, #412]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003262:	4b62      	ldr	r3, [pc, #392]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	495e      	ldr	r1, [pc, #376]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003284:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	4956      	ldr	r1, [pc, #344]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80032a6:	4b51      	ldr	r3, [pc, #324]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	494d      	ldr	r1, [pc, #308]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032c8:	4b48      	ldr	r3, [pc, #288]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	4945      	ldr	r1, [pc, #276]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032ea:	4b40      	ldr	r3, [pc, #256]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f8:	493c      	ldr	r1, [pc, #240]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800330c:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331a:	4934      	ldr	r1, [pc, #208]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d011      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800332e:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003334:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800333c:	492b      	ldr	r1, [pc, #172]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800334c:	d101      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800334e:	2301      	movs	r3, #1
 8003350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800335e:	2301      	movs	r3, #1
 8003360:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800336e:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337c:	491b      	ldr	r1, [pc, #108]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00b      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003396:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a0:	4912      	ldr	r1, [pc, #72]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80033b4:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c4:	4909      	ldr	r1, [pc, #36]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00f      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	e002      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	4986      	ldr	r1, [pc, #536]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00b      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003404:	4b81      	ldr	r3, [pc, #516]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800340a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003414:	497d      	ldr	r1, [pc, #500]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d006      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80d6 	beq.w	80035dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003430:	4b76      	ldr	r3, [pc, #472]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a75      	ldr	r2, [pc, #468]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003436:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800343a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343c:	f7fd fee6 	bl	800120c <HAL_GetTick>
 8003440:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003444:	f7fd fee2 	bl	800120c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e195      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003456:	4b6d      	ldr	r3, [pc, #436]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d021      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003472:	2b00      	cmp	r3, #0
 8003474:	d11d      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003476:	4b65      	ldr	r3, [pc, #404]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800348a:	0e1b      	lsrs	r3, r3, #24
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	019a      	lsls	r2, r3, #6
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	431a      	orrs	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	071b      	lsls	r3, r3, #28
 80034aa:	4958      	ldr	r1, [pc, #352]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02e      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034dc:	d129      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034de:	4b4b      	ldr	r3, [pc, #300]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034ec:	4b47      	ldr	r3, [pc, #284]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f2:	0f1b      	lsrs	r3, r3, #28
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	019a      	lsls	r2, r3, #6
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	061b      	lsls	r3, r3, #24
 800350c:	431a      	orrs	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	071b      	lsls	r3, r3, #28
 8003512:	493e      	ldr	r1, [pc, #248]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800351a:	4b3c      	ldr	r3, [pc, #240]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800351c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003520:	f023 021f 	bic.w	r2, r3, #31
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	3b01      	subs	r3, #1
 800352a:	4938      	ldr	r1, [pc, #224]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01d      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800353e:	4b33      	ldr	r3, [pc, #204]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003544:	0e1b      	lsrs	r3, r3, #24
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800354c:	4b2f      	ldr	r3, [pc, #188]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800354e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003552:	0f1b      	lsrs	r3, r3, #28
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	019a      	lsls	r2, r3, #6
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	431a      	orrs	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	431a      	orrs	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	071b      	lsls	r3, r3, #28
 8003572:	4926      	ldr	r1, [pc, #152]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d011      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	019a      	lsls	r2, r3, #6
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	071b      	lsls	r3, r3, #28
 80035a2:	491a      	ldr	r1, [pc, #104]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b6:	f7fd fe29 	bl	800120c <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035be:	f7fd fe25 	bl	800120c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b64      	cmp	r3, #100	; 0x64
 80035ca:	d901      	bls.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e0d8      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035d0:	4b0e      	ldr	r3, [pc, #56]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	f040 80ce 	bne.w	8003780 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a08      	ldr	r2, [pc, #32]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f0:	f7fd fe0c 	bl	800120c <HAL_GetTick>
 80035f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035f6:	e00b      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035f8:	f7fd fe08 	bl	800120c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d904      	bls.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e0bb      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003610:	4b5e      	ldr	r3, [pc, #376]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800361c:	d0ec      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800363a:	2b00      	cmp	r3, #0
 800363c:	d02e      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d12a      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003646:	4b51      	ldr	r3, [pc, #324]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	0c1b      	lsrs	r3, r3, #16
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003654:	4b4d      	ldr	r3, [pc, #308]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	0f1b      	lsrs	r3, r3, #28
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	019a      	lsls	r2, r3, #6
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	061b      	lsls	r3, r3, #24
 8003674:	431a      	orrs	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	071b      	lsls	r3, r3, #28
 800367a:	4944      	ldr	r1, [pc, #272]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003682:	4b42      	ldr	r3, [pc, #264]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003688:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	3b01      	subs	r3, #1
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	493d      	ldr	r1, [pc, #244]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d022      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b0:	d11d      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036b2:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	0e1b      	lsrs	r3, r3, #24
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036c0:	4b32      	ldr	r3, [pc, #200]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	0f1b      	lsrs	r3, r3, #28
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	019a      	lsls	r2, r3, #6
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	041b      	lsls	r3, r3, #16
 80036da:	431a      	orrs	r2, r3
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	061b      	lsls	r3, r3, #24
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	071b      	lsls	r3, r3, #28
 80036e6:	4929      	ldr	r1, [pc, #164]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d028      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003700:	0e1b      	lsrs	r3, r3, #24
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003708:	4b20      	ldr	r3, [pc, #128]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	0c1b      	lsrs	r3, r3, #16
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	019a      	lsls	r2, r3, #6
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	431a      	orrs	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	071b      	lsls	r3, r3, #28
 800372e:	4917      	ldr	r1, [pc, #92]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800373c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	4911      	ldr	r1, [pc, #68]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003758:	f7fd fd58 	bl	800120c <HAL_GetTick>
 800375c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003760:	f7fd fd54 	bl	800120c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e007      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800377a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800377e:	d1ef      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800

08003790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e049      	b.n	8003836 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fb66 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f000 fac0 	bl	8003d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d001      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e054      	b.n	8003902 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a26      	ldr	r2, [pc, #152]	; (8003910 <HAL_TIM_Base_Start_IT+0xd0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d022      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0x80>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003882:	d01d      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0x80>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_TIM_Base_Start_IT+0xd4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d018      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0x80>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a21      	ldr	r2, [pc, #132]	; (8003918 <HAL_TIM_Base_Start_IT+0xd8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d013      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0x80>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_TIM_Base_Start_IT+0xdc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00e      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0x80>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <HAL_TIM_Base_Start_IT+0xe0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d009      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0x80>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <HAL_TIM_Base_Start_IT+0xe4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d004      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0x80>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <HAL_TIM_Base_Start_IT+0xe8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d115      	bne.n	80038ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_TIM_Base_Start_IT+0xec>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b06      	cmp	r3, #6
 80038d0:	d015      	beq.n	80038fe <HAL_TIM_Base_Start_IT+0xbe>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d011      	beq.n	80038fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0201 	orr.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ea:	e008      	b.n	80038fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e000      	b.n	8003900 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40010000 	.word	0x40010000
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800
 800391c:	40000c00 	.word	0x40000c00
 8003920:	40010400 	.word	0x40010400
 8003924:	40014000 	.word	0x40014000
 8003928:	40001800 	.word	0x40001800
 800392c:	00010007 	.word	0x00010007

08003930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d122      	bne.n	800398c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b02      	cmp	r3, #2
 8003952:	d11b      	bne.n	800398c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0202 	mvn.w	r2, #2
 800395c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f9d0 	bl	8003d18 <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f9c2 	bl	8003d04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f9d3 	bl	8003d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d122      	bne.n	80039e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d11b      	bne.n	80039e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0204 	mvn.w	r2, #4
 80039b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f9a6 	bl	8003d18 <HAL_TIM_IC_CaptureCallback>
 80039cc:	e005      	b.n	80039da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f998 	bl	8003d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f9a9 	bl	8003d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0208 	mvn.w	r2, #8
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f97c 	bl	8003d18 <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f96e 	bl	8003d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f97f 	bl	8003d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0210 	mvn.w	r2, #16
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f952 	bl	8003d18 <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f944 	bl	8003d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f955 	bl	8003d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d10e      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0201 	mvn.w	r2, #1
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fc ff92 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d107      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fb0c 	bl	80040f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aee:	d10e      	bne.n	8003b0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afa:	2b80      	cmp	r3, #128	; 0x80
 8003afc:	d107      	bne.n	8003b0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 faff 	bl	800410c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d10e      	bne.n	8003b3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d107      	bne.n	8003b3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f903 	bl	8003d40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d10e      	bne.n	8003b66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d107      	bne.n	8003b66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f06f 0220 	mvn.w	r2, #32
 8003b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fabf 	bl	80040e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_TIM_ConfigClockSource+0x1c>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e0b4      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x186>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <HAL_TIM_ConfigClockSource+0x190>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc4:	d03e      	beq.n	8003c44 <HAL_TIM_ConfigClockSource+0xd4>
 8003bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bca:	f200 8087 	bhi.w	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	f000 8086 	beq.w	8003ce2 <HAL_TIM_ConfigClockSource+0x172>
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bda:	d87f      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b70      	cmp	r3, #112	; 0x70
 8003bde:	d01a      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0xa6>
 8003be0:	2b70      	cmp	r3, #112	; 0x70
 8003be2:	d87b      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b60      	cmp	r3, #96	; 0x60
 8003be6:	d050      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0x11a>
 8003be8:	2b60      	cmp	r3, #96	; 0x60
 8003bea:	d877      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b50      	cmp	r3, #80	; 0x50
 8003bee:	d03c      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0xfa>
 8003bf0:	2b50      	cmp	r3, #80	; 0x50
 8003bf2:	d873      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b40      	cmp	r3, #64	; 0x40
 8003bf6:	d058      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x13a>
 8003bf8:	2b40      	cmp	r3, #64	; 0x40
 8003bfa:	d86f      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b30      	cmp	r3, #48	; 0x30
 8003bfe:	d064      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x15a>
 8003c00:	2b30      	cmp	r3, #48	; 0x30
 8003c02:	d86b      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d060      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x15a>
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d867      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d05c      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x15a>
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d05a      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x15a>
 8003c14:	e062      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6899      	ldr	r1, [r3, #8]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f000 f9af 	bl	8003f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	609a      	str	r2, [r3, #8]
      break;
 8003c42:	e04f      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	6899      	ldr	r1, [r3, #8]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f000 f998 	bl	8003f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c66:	609a      	str	r2, [r3, #8]
      break;
 8003c68:	e03c      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6859      	ldr	r1, [r3, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	461a      	mov	r2, r3
 8003c78:	f000 f90c 	bl	8003e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2150      	movs	r1, #80	; 0x50
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f965 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003c88:	e02c      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	461a      	mov	r2, r3
 8003c98:	f000 f92b 	bl	8003ef2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2160      	movs	r1, #96	; 0x60
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f955 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003ca8:	e01c      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6859      	ldr	r1, [r3, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f000 f8ec 	bl	8003e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2140      	movs	r1, #64	; 0x40
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f945 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e00c      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f000 f93c 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003cda:	e003      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce0:	e000      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	fffeff88 	.word	0xfffeff88

08003d04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a40      	ldr	r2, [pc, #256]	; (8003e68 <TIM_Base_SetConfig+0x114>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d72:	d00f      	beq.n	8003d94 <TIM_Base_SetConfig+0x40>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3d      	ldr	r2, [pc, #244]	; (8003e6c <TIM_Base_SetConfig+0x118>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00b      	beq.n	8003d94 <TIM_Base_SetConfig+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3c      	ldr	r2, [pc, #240]	; (8003e70 <TIM_Base_SetConfig+0x11c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d007      	beq.n	8003d94 <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3b      	ldr	r2, [pc, #236]	; (8003e74 <TIM_Base_SetConfig+0x120>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_Base_SetConfig+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3a      	ldr	r2, [pc, #232]	; (8003e78 <TIM_Base_SetConfig+0x124>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d108      	bne.n	8003da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2f      	ldr	r2, [pc, #188]	; (8003e68 <TIM_Base_SetConfig+0x114>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02b      	beq.n	8003e06 <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db4:	d027      	beq.n	8003e06 <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <TIM_Base_SetConfig+0x118>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d023      	beq.n	8003e06 <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2b      	ldr	r2, [pc, #172]	; (8003e70 <TIM_Base_SetConfig+0x11c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01f      	beq.n	8003e06 <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2a      	ldr	r2, [pc, #168]	; (8003e74 <TIM_Base_SetConfig+0x120>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01b      	beq.n	8003e06 <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a29      	ldr	r2, [pc, #164]	; (8003e78 <TIM_Base_SetConfig+0x124>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d017      	beq.n	8003e06 <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a28      	ldr	r2, [pc, #160]	; (8003e7c <TIM_Base_SetConfig+0x128>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a27      	ldr	r2, [pc, #156]	; (8003e80 <TIM_Base_SetConfig+0x12c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00f      	beq.n	8003e06 <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a26      	ldr	r2, [pc, #152]	; (8003e84 <TIM_Base_SetConfig+0x130>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00b      	beq.n	8003e06 <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a25      	ldr	r2, [pc, #148]	; (8003e88 <TIM_Base_SetConfig+0x134>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d007      	beq.n	8003e06 <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a24      	ldr	r2, [pc, #144]	; (8003e8c <TIM_Base_SetConfig+0x138>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a23      	ldr	r2, [pc, #140]	; (8003e90 <TIM_Base_SetConfig+0x13c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d108      	bne.n	8003e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <TIM_Base_SetConfig+0x114>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_Base_SetConfig+0xf8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a0c      	ldr	r2, [pc, #48]	; (8003e78 <TIM_Base_SetConfig+0x124>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d103      	bne.n	8003e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	615a      	str	r2, [r3, #20]
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800
 8003e74:	40000c00 	.word	0x40000c00
 8003e78:	40010400 	.word	0x40010400
 8003e7c:	40014000 	.word	0x40014000
 8003e80:	40014400 	.word	0x40014400
 8003e84:	40014800 	.word	0x40014800
 8003e88:	40001800 	.word	0x40001800
 8003e8c:	40001c00 	.word	0x40001c00
 8003e90:	40002000 	.word	0x40002000

08003e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0201 	bic.w	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f023 030a 	bic.w	r3, r3, #10
 8003ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b087      	sub	sp, #28
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0210 	bic.w	r2, r3, #16
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	031b      	lsls	r3, r3, #12
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f043 0307 	orr.w	r3, r3, #7
 8003f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	609a      	str	r2, [r3, #8]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	021a      	lsls	r2, r3, #8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	609a      	str	r2, [r3, #8]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e06d      	b.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a30      	ldr	r2, [pc, #192]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d108      	bne.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800401a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a20      	ldr	r2, [pc, #128]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d022      	beq.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004052:	d01d      	beq.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1c      	ldr	r2, [pc, #112]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a15      	ldr	r2, [pc, #84]	; (80040cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a16      	ldr	r2, [pc, #88]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d10c      	bne.n	80040aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004096:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40010400 	.word	0x40010400
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40001800 	.word	0x40001800

080040e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e040      	b.n	80041b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fc ff12 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2224      	movs	r2, #36	; 0x24
 800414c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fbca 	bl	80048f8 <UART_SetConfig>
 8004164:	4603      	mov	r3, r0
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e022      	b.n	80041b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fe20 	bl	8004dbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800418a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800419a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fea7 	bl	8004f00 <UART_CheckIdleState>
 80041b2:	4603      	mov	r3, r0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	f040 8081 	bne.w	80042d8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_UART_Transmit+0x26>
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e079      	b.n	80042da <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_UART_Transmit+0x38>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e072      	b.n	80042da <HAL_UART_Transmit+0x11e>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2221      	movs	r2, #33	; 0x21
 8004208:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800420a:	f7fc ffff 	bl	800120c <HAL_GetTick>
 800420e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	88fa      	ldrh	r2, [r7, #6]
 8004214:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	d108      	bne.n	800423c <HAL_UART_Transmit+0x80>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e003      	b.n	8004244 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800424c:	e02c      	b.n	80042a8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fe9a 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e038      	b.n	80042da <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800427c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	3302      	adds	r3, #2
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	e007      	b.n	8004296 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	3301      	adds	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1cc      	bne.n	800424e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2200      	movs	r2, #0
 80042bc:	2140      	movs	r1, #64	; 0x40
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fe67 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e005      	b.n	80042da <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	e000      	b.n	80042da <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
  }
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b0ba      	sub	sp, #232	; 0xe8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800430a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800430e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004312:	4013      	ands	r3, r2
 8004314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d115      	bne.n	800434c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00f      	beq.n	800434c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 82a4 	beq.w	800488a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
      }
      return;
 800434a:	e29e      	b.n	800488a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800434c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8117 	beq.w	8004584 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004366:	4b85      	ldr	r3, [pc, #532]	; (800457c <HAL_UART_IRQHandler+0x298>)
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 810a 	beq.w	8004584 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d011      	beq.n	80043a0 <HAL_UART_IRQHandler+0xbc>
 800437c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d011      	beq.n	80043d0 <HAL_UART_IRQHandler+0xec>
 80043ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00b      	beq.n	80043d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2202      	movs	r2, #2
 80043be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c6:	f043 0204 	orr.w	r2, r3, #4
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d011      	beq.n	8004400 <HAL_UART_IRQHandler+0x11c>
 80043dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00b      	beq.n	8004400 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2204      	movs	r2, #4
 80043ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f6:	f043 0202 	orr.w	r2, r3, #2
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d017      	beq.n	800443c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800440c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800441c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2208      	movs	r2, #8
 800442a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004432:	f043 0208 	orr.w	r2, r3, #8
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800443c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004444:	2b00      	cmp	r3, #0
 8004446:	d012      	beq.n	800446e <HAL_UART_IRQHandler+0x18a>
 8004448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00c      	beq.n	800446e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800445c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004464:	f043 0220 	orr.w	r2, r3, #32
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 820a 	beq.w	800488e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00d      	beq.n	80044a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	d005      	beq.n	80044c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d04f      	beq.n	8004566 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fe27 	bl	800511a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b40      	cmp	r3, #64	; 0x40
 80044d8:	d141      	bne.n	800455e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3308      	adds	r3, #8
 80044e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800450a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800451e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1d9      	bne.n	80044da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	2b00      	cmp	r3, #0
 800452c:	d013      	beq.n	8004556 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a13      	ldr	r2, [pc, #76]	; (8004580 <HAL_UART_IRQHandler+0x29c>)
 8004534:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4618      	mov	r0, r3
 800453c:	f7fd fcbf 	bl	8001ebe <HAL_DMA_Abort_IT>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d017      	beq.n	8004576 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004550:	4610      	mov	r0, r2
 8004552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	e00f      	b.n	8004576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f9ae 	bl	80048b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	e00b      	b.n	8004576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f9aa 	bl	80048b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004564:	e007      	b.n	8004576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f9a6 	bl	80048b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004574:	e18b      	b.n	800488e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004576:	bf00      	nop
    return;
 8004578:	e189      	b.n	800488e <HAL_UART_IRQHandler+0x5aa>
 800457a:	bf00      	nop
 800457c:	04000120 	.word	0x04000120
 8004580:	080051e1 	.word	0x080051e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004588:	2b01      	cmp	r3, #1
 800458a:	f040 8144 	bne.w	8004816 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 813d 	beq.w	8004816 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8136 	beq.w	8004816 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2210      	movs	r2, #16
 80045b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	f040 80b2 	bne.w	8004726 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 815d 	beq.w	8004892 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045e2:	429a      	cmp	r2, r3
 80045e4:	f080 8155 	bcs.w	8004892 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fc:	f000 8085 	beq.w	800470a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800461c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800462a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800462e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004636:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1da      	bne.n	8004600 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3308      	adds	r3, #8
 8004650:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800465a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3308      	adds	r3, #8
 800466a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800466e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004672:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004676:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e1      	bne.n	800464a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3308      	adds	r3, #8
 800468c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3308      	adds	r3, #8
 80046a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e3      	bne.n	8004686 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046da:	f023 0310 	bic.w	r3, r3, #16
 80046de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80046ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e4      	bne.n	80046ca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4618      	mov	r0, r3
 8004706:	f7fd fb6a 	bl	8001dde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004716:	b29b      	uxth	r3, r3
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	b29b      	uxth	r3, r3
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f8d4 	bl	80048cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004724:	e0b5      	b.n	8004892 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004732:	b29b      	uxth	r3, r3
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 80a7 	beq.w	8004896 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80a2 	beq.w	8004896 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004762:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004774:	647b      	str	r3, [r7, #68]	; 0x44
 8004776:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800477a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e4      	bne.n	8004752 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	623b      	str	r3, [r7, #32]
   return(result);
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3308      	adds	r3, #8
 80047a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047ac:	633a      	str	r2, [r7, #48]	; 0x30
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e3      	bne.n	8004788 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0310 	bic.w	r3, r3, #16
 80047e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047f4:	61fb      	str	r3, [r7, #28]
 80047f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	69b9      	ldr	r1, [r7, #24]
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	617b      	str	r3, [r7, #20]
   return(result);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e4      	bne.n	80047d2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f85c 	bl	80048cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004814:	e03f      	b.n	8004896 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00e      	beq.n	8004840 <HAL_UART_IRQHandler+0x55c>
 8004822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d008      	beq.n	8004840 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004836:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f853 	bl	80048e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800483e:	e02d      	b.n	800489c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00e      	beq.n	800486a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800484c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01c      	beq.n	800489a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	4798      	blx	r3
    }
    return;
 8004868:	e017      	b.n	800489a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d012      	beq.n	800489c <HAL_UART_IRQHandler+0x5b8>
 8004876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00c      	beq.n	800489c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fcc2 	bl	800520c <UART_EndTransmit_IT>
    return;
 8004888:	e008      	b.n	800489c <HAL_UART_IRQHandler+0x5b8>
      return;
 800488a:	bf00      	nop
 800488c:	e006      	b.n	800489c <HAL_UART_IRQHandler+0x5b8>
    return;
 800488e:	bf00      	nop
 8004890:	e004      	b.n	800489c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004892:	bf00      	nop
 8004894:	e002      	b.n	800489c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004896:	bf00      	nop
 8004898:	e000      	b.n	800489c <HAL_UART_IRQHandler+0x5b8>
    return;
 800489a:	bf00      	nop
  }

}
 800489c:	37e8      	adds	r7, #232	; 0xe8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop

080048a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4ba7      	ldr	r3, [pc, #668]	; (8004bc0 <UART_SetConfig+0x2c8>)
 8004924:	4013      	ands	r3, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	6979      	ldr	r1, [r7, #20]
 800492c:	430b      	orrs	r3, r1
 800492e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a95      	ldr	r2, [pc, #596]	; (8004bc4 <UART_SetConfig+0x2cc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d120      	bne.n	80049b6 <UART_SetConfig+0xbe>
 8004974:	4b94      	ldr	r3, [pc, #592]	; (8004bc8 <UART_SetConfig+0x2d0>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b03      	cmp	r3, #3
 8004980:	d816      	bhi.n	80049b0 <UART_SetConfig+0xb8>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <UART_SetConfig+0x90>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	08004999 	.word	0x08004999
 800498c:	080049a5 	.word	0x080049a5
 8004990:	0800499f 	.word	0x0800499f
 8004994:	080049ab 	.word	0x080049ab
 8004998:	2301      	movs	r3, #1
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e14f      	b.n	8004c3e <UART_SetConfig+0x346>
 800499e:	2302      	movs	r3, #2
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e14c      	b.n	8004c3e <UART_SetConfig+0x346>
 80049a4:	2304      	movs	r3, #4
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e149      	b.n	8004c3e <UART_SetConfig+0x346>
 80049aa:	2308      	movs	r3, #8
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e146      	b.n	8004c3e <UART_SetConfig+0x346>
 80049b0:	2310      	movs	r3, #16
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e143      	b.n	8004c3e <UART_SetConfig+0x346>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a84      	ldr	r2, [pc, #528]	; (8004bcc <UART_SetConfig+0x2d4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d132      	bne.n	8004a26 <UART_SetConfig+0x12e>
 80049c0:	4b81      	ldr	r3, [pc, #516]	; (8004bc8 <UART_SetConfig+0x2d0>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b0c      	cmp	r3, #12
 80049cc:	d828      	bhi.n	8004a20 <UART_SetConfig+0x128>
 80049ce:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0xdc>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	08004a09 	.word	0x08004a09
 80049d8:	08004a21 	.word	0x08004a21
 80049dc:	08004a21 	.word	0x08004a21
 80049e0:	08004a21 	.word	0x08004a21
 80049e4:	08004a15 	.word	0x08004a15
 80049e8:	08004a21 	.word	0x08004a21
 80049ec:	08004a21 	.word	0x08004a21
 80049f0:	08004a21 	.word	0x08004a21
 80049f4:	08004a0f 	.word	0x08004a0f
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a21 	.word	0x08004a21
 8004a04:	08004a1b 	.word	0x08004a1b
 8004a08:	2300      	movs	r3, #0
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e117      	b.n	8004c3e <UART_SetConfig+0x346>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e114      	b.n	8004c3e <UART_SetConfig+0x346>
 8004a14:	2304      	movs	r3, #4
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e111      	b.n	8004c3e <UART_SetConfig+0x346>
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e10e      	b.n	8004c3e <UART_SetConfig+0x346>
 8004a20:	2310      	movs	r3, #16
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e10b      	b.n	8004c3e <UART_SetConfig+0x346>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a69      	ldr	r2, [pc, #420]	; (8004bd0 <UART_SetConfig+0x2d8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d120      	bne.n	8004a72 <UART_SetConfig+0x17a>
 8004a30:	4b65      	ldr	r3, [pc, #404]	; (8004bc8 <UART_SetConfig+0x2d0>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a3a:	2b30      	cmp	r3, #48	; 0x30
 8004a3c:	d013      	beq.n	8004a66 <UART_SetConfig+0x16e>
 8004a3e:	2b30      	cmp	r3, #48	; 0x30
 8004a40:	d814      	bhi.n	8004a6c <UART_SetConfig+0x174>
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d009      	beq.n	8004a5a <UART_SetConfig+0x162>
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d810      	bhi.n	8004a6c <UART_SetConfig+0x174>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <UART_SetConfig+0x15c>
 8004a4e:	2b10      	cmp	r3, #16
 8004a50:	d006      	beq.n	8004a60 <UART_SetConfig+0x168>
 8004a52:	e00b      	b.n	8004a6c <UART_SetConfig+0x174>
 8004a54:	2300      	movs	r3, #0
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e0f1      	b.n	8004c3e <UART_SetConfig+0x346>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e0ee      	b.n	8004c3e <UART_SetConfig+0x346>
 8004a60:	2304      	movs	r3, #4
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e0eb      	b.n	8004c3e <UART_SetConfig+0x346>
 8004a66:	2308      	movs	r3, #8
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e0e8      	b.n	8004c3e <UART_SetConfig+0x346>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e0e5      	b.n	8004c3e <UART_SetConfig+0x346>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a57      	ldr	r2, [pc, #348]	; (8004bd4 <UART_SetConfig+0x2dc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d120      	bne.n	8004abe <UART_SetConfig+0x1c6>
 8004a7c:	4b52      	ldr	r3, [pc, #328]	; (8004bc8 <UART_SetConfig+0x2d0>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a86:	2bc0      	cmp	r3, #192	; 0xc0
 8004a88:	d013      	beq.n	8004ab2 <UART_SetConfig+0x1ba>
 8004a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a8c:	d814      	bhi.n	8004ab8 <UART_SetConfig+0x1c0>
 8004a8e:	2b80      	cmp	r3, #128	; 0x80
 8004a90:	d009      	beq.n	8004aa6 <UART_SetConfig+0x1ae>
 8004a92:	2b80      	cmp	r3, #128	; 0x80
 8004a94:	d810      	bhi.n	8004ab8 <UART_SetConfig+0x1c0>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <UART_SetConfig+0x1a8>
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d006      	beq.n	8004aac <UART_SetConfig+0x1b4>
 8004a9e:	e00b      	b.n	8004ab8 <UART_SetConfig+0x1c0>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e0cb      	b.n	8004c3e <UART_SetConfig+0x346>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e0c8      	b.n	8004c3e <UART_SetConfig+0x346>
 8004aac:	2304      	movs	r3, #4
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e0c5      	b.n	8004c3e <UART_SetConfig+0x346>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e0c2      	b.n	8004c3e <UART_SetConfig+0x346>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e0bf      	b.n	8004c3e <UART_SetConfig+0x346>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a45      	ldr	r2, [pc, #276]	; (8004bd8 <UART_SetConfig+0x2e0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d125      	bne.n	8004b14 <UART_SetConfig+0x21c>
 8004ac8:	4b3f      	ldr	r3, [pc, #252]	; (8004bc8 <UART_SetConfig+0x2d0>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad6:	d017      	beq.n	8004b08 <UART_SetConfig+0x210>
 8004ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004adc:	d817      	bhi.n	8004b0e <UART_SetConfig+0x216>
 8004ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae2:	d00b      	beq.n	8004afc <UART_SetConfig+0x204>
 8004ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae8:	d811      	bhi.n	8004b0e <UART_SetConfig+0x216>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <UART_SetConfig+0x1fe>
 8004aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af2:	d006      	beq.n	8004b02 <UART_SetConfig+0x20a>
 8004af4:	e00b      	b.n	8004b0e <UART_SetConfig+0x216>
 8004af6:	2300      	movs	r3, #0
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e0a0      	b.n	8004c3e <UART_SetConfig+0x346>
 8004afc:	2302      	movs	r3, #2
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e09d      	b.n	8004c3e <UART_SetConfig+0x346>
 8004b02:	2304      	movs	r3, #4
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e09a      	b.n	8004c3e <UART_SetConfig+0x346>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e097      	b.n	8004c3e <UART_SetConfig+0x346>
 8004b0e:	2310      	movs	r3, #16
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e094      	b.n	8004c3e <UART_SetConfig+0x346>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a30      	ldr	r2, [pc, #192]	; (8004bdc <UART_SetConfig+0x2e4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d125      	bne.n	8004b6a <UART_SetConfig+0x272>
 8004b1e:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <UART_SetConfig+0x2d0>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b2c:	d017      	beq.n	8004b5e <UART_SetConfig+0x266>
 8004b2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b32:	d817      	bhi.n	8004b64 <UART_SetConfig+0x26c>
 8004b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b38:	d00b      	beq.n	8004b52 <UART_SetConfig+0x25a>
 8004b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3e:	d811      	bhi.n	8004b64 <UART_SetConfig+0x26c>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <UART_SetConfig+0x254>
 8004b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b48:	d006      	beq.n	8004b58 <UART_SetConfig+0x260>
 8004b4a:	e00b      	b.n	8004b64 <UART_SetConfig+0x26c>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e075      	b.n	8004c3e <UART_SetConfig+0x346>
 8004b52:	2302      	movs	r3, #2
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e072      	b.n	8004c3e <UART_SetConfig+0x346>
 8004b58:	2304      	movs	r3, #4
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e06f      	b.n	8004c3e <UART_SetConfig+0x346>
 8004b5e:	2308      	movs	r3, #8
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e06c      	b.n	8004c3e <UART_SetConfig+0x346>
 8004b64:	2310      	movs	r3, #16
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e069      	b.n	8004c3e <UART_SetConfig+0x346>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1c      	ldr	r2, [pc, #112]	; (8004be0 <UART_SetConfig+0x2e8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d137      	bne.n	8004be4 <UART_SetConfig+0x2ec>
 8004b74:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <UART_SetConfig+0x2d0>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b82:	d017      	beq.n	8004bb4 <UART_SetConfig+0x2bc>
 8004b84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b88:	d817      	bhi.n	8004bba <UART_SetConfig+0x2c2>
 8004b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b8e:	d00b      	beq.n	8004ba8 <UART_SetConfig+0x2b0>
 8004b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b94:	d811      	bhi.n	8004bba <UART_SetConfig+0x2c2>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <UART_SetConfig+0x2aa>
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9e:	d006      	beq.n	8004bae <UART_SetConfig+0x2b6>
 8004ba0:	e00b      	b.n	8004bba <UART_SetConfig+0x2c2>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e04a      	b.n	8004c3e <UART_SetConfig+0x346>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e047      	b.n	8004c3e <UART_SetConfig+0x346>
 8004bae:	2304      	movs	r3, #4
 8004bb0:	77fb      	strb	r3, [r7, #31]
 8004bb2:	e044      	b.n	8004c3e <UART_SetConfig+0x346>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e041      	b.n	8004c3e <UART_SetConfig+0x346>
 8004bba:	2310      	movs	r3, #16
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e03e      	b.n	8004c3e <UART_SetConfig+0x346>
 8004bc0:	efff69f3 	.word	0xefff69f3
 8004bc4:	40011000 	.word	0x40011000
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40004400 	.word	0x40004400
 8004bd0:	40004800 	.word	0x40004800
 8004bd4:	40004c00 	.word	0x40004c00
 8004bd8:	40005000 	.word	0x40005000
 8004bdc:	40011400 	.word	0x40011400
 8004be0:	40007800 	.word	0x40007800
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a71      	ldr	r2, [pc, #452]	; (8004db0 <UART_SetConfig+0x4b8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d125      	bne.n	8004c3a <UART_SetConfig+0x342>
 8004bee:	4b71      	ldr	r3, [pc, #452]	; (8004db4 <UART_SetConfig+0x4bc>)
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bf8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bfc:	d017      	beq.n	8004c2e <UART_SetConfig+0x336>
 8004bfe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c02:	d817      	bhi.n	8004c34 <UART_SetConfig+0x33c>
 8004c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c08:	d00b      	beq.n	8004c22 <UART_SetConfig+0x32a>
 8004c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0e:	d811      	bhi.n	8004c34 <UART_SetConfig+0x33c>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <UART_SetConfig+0x324>
 8004c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c18:	d006      	beq.n	8004c28 <UART_SetConfig+0x330>
 8004c1a:	e00b      	b.n	8004c34 <UART_SetConfig+0x33c>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e00d      	b.n	8004c3e <UART_SetConfig+0x346>
 8004c22:	2302      	movs	r3, #2
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	e00a      	b.n	8004c3e <UART_SetConfig+0x346>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e007      	b.n	8004c3e <UART_SetConfig+0x346>
 8004c2e:	2308      	movs	r3, #8
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e004      	b.n	8004c3e <UART_SetConfig+0x346>
 8004c34:	2310      	movs	r3, #16
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e001      	b.n	8004c3e <UART_SetConfig+0x346>
 8004c3a:	2310      	movs	r3, #16
 8004c3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c46:	d15a      	bne.n	8004cfe <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004c48:	7ffb      	ldrb	r3, [r7, #31]
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d827      	bhi.n	8004c9e <UART_SetConfig+0x3a6>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <UART_SetConfig+0x35c>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004c81 	.word	0x08004c81
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	08004c9f 	.word	0x08004c9f
 8004c64:	08004c8f 	.word	0x08004c8f
 8004c68:	08004c9f 	.word	0x08004c9f
 8004c6c:	08004c9f 	.word	0x08004c9f
 8004c70:	08004c9f 	.word	0x08004c9f
 8004c74:	08004c97 	.word	0x08004c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c78:	f7fe f93a 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004c7c:	61b8      	str	r0, [r7, #24]
        break;
 8004c7e:	e013      	b.n	8004ca8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c80:	f7fe f94a 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004c84:	61b8      	str	r0, [r7, #24]
        break;
 8004c86:	e00f      	b.n	8004ca8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c88:	4b4b      	ldr	r3, [pc, #300]	; (8004db8 <UART_SetConfig+0x4c0>)
 8004c8a:	61bb      	str	r3, [r7, #24]
        break;
 8004c8c:	e00c      	b.n	8004ca8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c8e:	f7fe f841 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8004c92:	61b8      	str	r0, [r7, #24]
        break;
 8004c94:	e008      	b.n	8004ca8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c9a:	61bb      	str	r3, [r7, #24]
        break;
 8004c9c:	e004      	b.n	8004ca8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ca6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d074      	beq.n	8004d98 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	005a      	lsls	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	441a      	add	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b0f      	cmp	r3, #15
 8004cc8:	d916      	bls.n	8004cf8 <UART_SetConfig+0x400>
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd0:	d212      	bcs.n	8004cf8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f023 030f 	bic.w	r3, r3, #15
 8004cda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	89fb      	ldrh	r3, [r7, #14]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	89fa      	ldrh	r2, [r7, #14]
 8004cf4:	60da      	str	r2, [r3, #12]
 8004cf6:	e04f      	b.n	8004d98 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	77bb      	strb	r3, [r7, #30]
 8004cfc:	e04c      	b.n	8004d98 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cfe:	7ffb      	ldrb	r3, [r7, #31]
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d828      	bhi.n	8004d56 <UART_SetConfig+0x45e>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <UART_SetConfig+0x414>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d31 	.word	0x08004d31
 8004d10:	08004d39 	.word	0x08004d39
 8004d14:	08004d41 	.word	0x08004d41
 8004d18:	08004d57 	.word	0x08004d57
 8004d1c:	08004d47 	.word	0x08004d47
 8004d20:	08004d57 	.word	0x08004d57
 8004d24:	08004d57 	.word	0x08004d57
 8004d28:	08004d57 	.word	0x08004d57
 8004d2c:	08004d4f 	.word	0x08004d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d30:	f7fe f8de 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004d34:	61b8      	str	r0, [r7, #24]
        break;
 8004d36:	e013      	b.n	8004d60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d38:	f7fe f8ee 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004d3c:	61b8      	str	r0, [r7, #24]
        break;
 8004d3e:	e00f      	b.n	8004d60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d40:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <UART_SetConfig+0x4c0>)
 8004d42:	61bb      	str	r3, [r7, #24]
        break;
 8004d44:	e00c      	b.n	8004d60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d46:	f7fd ffe5 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8004d4a:	61b8      	str	r0, [r7, #24]
        break;
 8004d4c:	e008      	b.n	8004d60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d52:	61bb      	str	r3, [r7, #24]
        break;
 8004d54:	e004      	b.n	8004d60 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d018      	beq.n	8004d98 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	085a      	lsrs	r2, r3, #1
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	441a      	add	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b0f      	cmp	r3, #15
 8004d7e:	d909      	bls.n	8004d94 <UART_SetConfig+0x49c>
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d86:	d205      	bcs.n	8004d94 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	e001      	b.n	8004d98 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004da4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40007c00 	.word	0x40007c00
 8004db4:	40023800 	.word	0x40023800
 8004db8:	00f42400 	.word	0x00f42400

08004dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01a      	beq.n	8004ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eba:	d10a      	bne.n	8004ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]
  }
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f10:	f7fc f97c 	bl	800120c <HAL_GetTick>
 8004f14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d10e      	bne.n	8004f42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f82d 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e023      	b.n	8004f8a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d10e      	bne.n	8004f6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f817 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e00d      	b.n	8004f8a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b09c      	sub	sp, #112	; 0x70
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa2:	e0a5      	b.n	80050f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	f000 80a1 	beq.w	80050f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fc f92d 	bl	800120c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d13e      	bne.n	8005042 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fd8:	667b      	str	r3, [r7, #100]	; 0x64
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fe4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e6      	bne.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	f023 0301 	bic.w	r3, r3, #1
 800500c:	663b      	str	r3, [r7, #96]	; 0x60
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3308      	adds	r3, #8
 8005014:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005016:	64ba      	str	r2, [r7, #72]	; 0x48
 8005018:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800501c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e5      	bne.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2220      	movs	r2, #32
 800502e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e067      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d04f      	beq.n	80050f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505e:	d147      	bne.n	80050f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005068:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800507e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
 800508a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800508e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	613b      	str	r3, [r7, #16]
   return(result);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3308      	adds	r3, #8
 80050ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050bc:	623a      	str	r2, [r7, #32]
 80050be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	69f9      	ldr	r1, [r7, #28]
 80050c2:	6a3a      	ldr	r2, [r7, #32]
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e5      	bne.n	800509c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e010      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4013      	ands	r3, r2
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	429a      	cmp	r2, r3
 800510c:	f43f af4a 	beq.w	8004fa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3770      	adds	r7, #112	; 0x70
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800511a:	b480      	push	{r7}
 800511c:	b095      	sub	sp, #84	; 0x54
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005140:	643b      	str	r3, [r7, #64]	; 0x40
 8005142:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	61fb      	str	r3, [r7, #28]
   return(result);
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	64bb      	str	r3, [r7, #72]	; 0x48
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3308      	adds	r3, #8
 8005172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005174:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800517a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e5      	bne.n	8005154 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518c:	2b01      	cmp	r3, #1
 800518e:	d118      	bne.n	80051c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	60bb      	str	r3, [r7, #8]
   return(result);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f023 0310 	bic.w	r3, r3, #16
 80051a4:	647b      	str	r3, [r7, #68]	; 0x44
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	6979      	ldr	r1, [r7, #20]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	613b      	str	r3, [r7, #16]
   return(result);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e6      	bne.n	8005190 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80051d4:	bf00      	nop
 80051d6:	3754      	adds	r7, #84	; 0x54
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7ff fb5a 	bl	80048b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	60bb      	str	r3, [r7, #8]
   return(result);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005236:	6979      	ldr	r1, [r7, #20]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	e841 2300 	strex	r3, r2, [r1]
 800523e:	613b      	str	r3, [r7, #16]
   return(result);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1e6      	bne.n	8005214 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff fb26 	bl	80048a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005258:	bf00      	nop
 800525a:	3720      	adds	r7, #32
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005260:	b084      	sub	sp, #16
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	f107 001c 	add.w	r0, r7, #28
 800526e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	2b01      	cmp	r3, #1
 8005276:	d120      	bne.n	80052ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	4b20      	ldr	r3, [pc, #128]	; (800530c <USB_CoreInit+0xac>)
 800528a:	4013      	ands	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800529c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d105      	bne.n	80052ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa92 	bl	80057d8 <USB_CoreReset>
 80052b4:	4603      	mov	r3, r0
 80052b6:	73fb      	strb	r3, [r7, #15]
 80052b8:	e010      	b.n	80052dc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa86 	bl	80057d8 <USB_CoreReset>
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d10b      	bne.n	80052fa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f043 0206 	orr.w	r2, r3, #6
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f043 0220 	orr.w	r2, r3, #32
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005306:	b004      	add	sp, #16
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	ffbdffbf 	.word	0xffbdffbf

08005310 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f023 0201 	bic.w	r2, r3, #1
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d115      	bne.n	8005380 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005360:	2001      	movs	r0, #1
 8005362:	f7fb ff5f 	bl	8001224 <HAL_Delay>
      ms++;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3301      	adds	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fa25 	bl	80057bc <USB_GetMode>
 8005372:	4603      	mov	r3, r0
 8005374:	2b01      	cmp	r3, #1
 8005376:	d01e      	beq.n	80053b6 <USB_SetCurrentMode+0x84>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b31      	cmp	r3, #49	; 0x31
 800537c:	d9f0      	bls.n	8005360 <USB_SetCurrentMode+0x2e>
 800537e:	e01a      	b.n	80053b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d115      	bne.n	80053b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005392:	2001      	movs	r0, #1
 8005394:	f7fb ff46 	bl	8001224 <HAL_Delay>
      ms++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3301      	adds	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fa0c 	bl	80057bc <USB_GetMode>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <USB_SetCurrentMode+0x84>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b31      	cmp	r3, #49	; 0x31
 80053ae:	d9f0      	bls.n	8005392 <USB_SetCurrentMode+0x60>
 80053b0:	e001      	b.n	80053b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e005      	b.n	80053c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b32      	cmp	r3, #50	; 0x32
 80053ba:	d101      	bne.n	80053c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053cc:	b084      	sub	sp, #16
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	e009      	b.n	8005400 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	3340      	adds	r3, #64	; 0x40
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	3301      	adds	r3, #1
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b0e      	cmp	r3, #14
 8005404:	d9f2      	bls.n	80053ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d11c      	bne.n	8005446 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e005      	b.n	8005452 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005458:	461a      	mov	r2, r3
 800545a:	2300      	movs	r3, #0
 800545c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005464:	4619      	mov	r1, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546c:	461a      	mov	r2, r3
 800546e:	680b      	ldr	r3, [r1, #0]
 8005470:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	2b01      	cmp	r3, #1
 8005476:	d10c      	bne.n	8005492 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d104      	bne.n	8005488 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800547e:	2100      	movs	r1, #0
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f961 	bl	8005748 <USB_SetDevSpeed>
 8005486:	e008      	b.n	800549a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005488:	2101      	movs	r1, #1
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f95c 	bl	8005748 <USB_SetDevSpeed>
 8005490:	e003      	b.n	800549a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005492:	2103      	movs	r1, #3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f957 	bl	8005748 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800549a:	2110      	movs	r1, #16
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f8f3 	bl	8005688 <USB_FlushTxFifo>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f91d 	bl	80056ec <USB_FlushRxFifo>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c2:	461a      	mov	r2, r3
 80054c4:	2300      	movs	r3, #0
 80054c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	461a      	mov	r2, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054da:	461a      	mov	r2, r3
 80054dc:	2300      	movs	r3, #0
 80054de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	e043      	b.n	800556e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054fc:	d118      	bne.n	8005530 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	461a      	mov	r2, r3
 8005512:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	e013      	b.n	8005542 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005526:	461a      	mov	r2, r3
 8005528:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	e008      	b.n	8005542 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	461a      	mov	r2, r3
 800553e:	2300      	movs	r3, #0
 8005540:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	461a      	mov	r2, r3
 8005550:	2300      	movs	r3, #0
 8005552:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	461a      	mov	r2, r3
 8005562:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005566:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	3301      	adds	r3, #1
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	429a      	cmp	r2, r3
 8005574:	d3b7      	bcc.n	80054e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005576:	2300      	movs	r3, #0
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	e043      	b.n	8005604 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800558e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005592:	d118      	bne.n	80055c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	461a      	mov	r2, r3
 80055a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e013      	b.n	80055d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	461a      	mov	r2, r3
 80055be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e008      	b.n	80055d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	461a      	mov	r2, r3
 80055d4:	2300      	movs	r3, #0
 80055d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	461a      	mov	r2, r3
 80055e6:	2300      	movs	r3, #0
 80055e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	3301      	adds	r3, #1
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	429a      	cmp	r2, r3
 800560a:	d3b7      	bcc.n	800557c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800561a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800561e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800562c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	f043 0210 	orr.w	r2, r3, #16
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <USB_DevInit+0x2b4>)
 8005646:	4313      	orrs	r3, r2
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800564c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f043 0208 	orr.w	r2, r3, #8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800565e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d105      	bne.n	8005670 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699a      	ldr	r2, [r3, #24]
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <USB_DevInit+0x2b8>)
 800566a:	4313      	orrs	r3, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005670:	7dfb      	ldrb	r3, [r7, #23]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800567c:	b004      	add	sp, #16
 800567e:	4770      	bx	lr
 8005680:	803c3800 	.word	0x803c3800
 8005684:	40000004 	.word	0x40000004

08005688 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3301      	adds	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	4a12      	ldr	r2, [pc, #72]	; (80056e8 <USB_FlushTxFifo+0x60>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e01a      	b.n	80056dc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	daf3      	bge.n	8005696 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	019b      	lsls	r3, r3, #6
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3301      	adds	r3, #1
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	4a08      	ldr	r2, [pc, #32]	; (80056e8 <USB_FlushTxFifo+0x60>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e006      	b.n	80056dc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d0f1      	beq.n	80056be <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	00030d40 	.word	0x00030d40

080056ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	4a11      	ldr	r2, [pc, #68]	; (8005744 <USB_FlushRxFifo+0x58>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e017      	b.n	8005738 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	daf3      	bge.n	80056f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2210      	movs	r2, #16
 8005718:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3301      	adds	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <USB_FlushRxFifo+0x58>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e006      	b.n	8005738 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b10      	cmp	r3, #16
 8005734:	d0f1      	beq.n	800571a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	00030d40 	.word	0x00030d40

08005748 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005794:	f023 0303 	bic.w	r3, r3, #3
 8005798:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057a8:	f043 0302 	orr.w	r3, r3, #2
 80057ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f003 0301 	and.w	r3, r3, #1
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	4a13      	ldr	r2, [pc, #76]	; (8005838 <USB_CoreReset+0x60>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d901      	bls.n	80057f4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e01a      	b.n	800582a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	daf3      	bge.n	80057e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f043 0201 	orr.w	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3301      	adds	r3, #1
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	4a09      	ldr	r2, [pc, #36]	; (8005838 <USB_CoreReset+0x60>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e006      	b.n	800582a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d0f1      	beq.n	800580c <USB_CoreReset+0x34>

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	00030d40 	.word	0x00030d40

0800583c <__errno>:
 800583c:	4b01      	ldr	r3, [pc, #4]	; (8005844 <__errno+0x8>)
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000000c 	.word	0x2000000c

08005848 <__libc_init_array>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4d0d      	ldr	r5, [pc, #52]	; (8005880 <__libc_init_array+0x38>)
 800584c:	4c0d      	ldr	r4, [pc, #52]	; (8005884 <__libc_init_array+0x3c>)
 800584e:	1b64      	subs	r4, r4, r5
 8005850:	10a4      	asrs	r4, r4, #2
 8005852:	2600      	movs	r6, #0
 8005854:	42a6      	cmp	r6, r4
 8005856:	d109      	bne.n	800586c <__libc_init_array+0x24>
 8005858:	4d0b      	ldr	r5, [pc, #44]	; (8005888 <__libc_init_array+0x40>)
 800585a:	4c0c      	ldr	r4, [pc, #48]	; (800588c <__libc_init_array+0x44>)
 800585c:	f000 fc4e 	bl	80060fc <_init>
 8005860:	1b64      	subs	r4, r4, r5
 8005862:	10a4      	asrs	r4, r4, #2
 8005864:	2600      	movs	r6, #0
 8005866:	42a6      	cmp	r6, r4
 8005868:	d105      	bne.n	8005876 <__libc_init_array+0x2e>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005870:	4798      	blx	r3
 8005872:	3601      	adds	r6, #1
 8005874:	e7ee      	b.n	8005854 <__libc_init_array+0xc>
 8005876:	f855 3b04 	ldr.w	r3, [r5], #4
 800587a:	4798      	blx	r3
 800587c:	3601      	adds	r6, #1
 800587e:	e7f2      	b.n	8005866 <__libc_init_array+0x1e>
 8005880:	08006180 	.word	0x08006180
 8005884:	08006180 	.word	0x08006180
 8005888:	08006180 	.word	0x08006180
 800588c:	08006184 	.word	0x08006184

08005890 <memset>:
 8005890:	4402      	add	r2, r0
 8005892:	4603      	mov	r3, r0
 8005894:	4293      	cmp	r3, r2
 8005896:	d100      	bne.n	800589a <memset+0xa>
 8005898:	4770      	bx	lr
 800589a:	f803 1b01 	strb.w	r1, [r3], #1
 800589e:	e7f9      	b.n	8005894 <memset+0x4>

080058a0 <siprintf>:
 80058a0:	b40e      	push	{r1, r2, r3}
 80058a2:	b500      	push	{lr}
 80058a4:	b09c      	sub	sp, #112	; 0x70
 80058a6:	ab1d      	add	r3, sp, #116	; 0x74
 80058a8:	9002      	str	r0, [sp, #8]
 80058aa:	9006      	str	r0, [sp, #24]
 80058ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058b0:	4809      	ldr	r0, [pc, #36]	; (80058d8 <siprintf+0x38>)
 80058b2:	9107      	str	r1, [sp, #28]
 80058b4:	9104      	str	r1, [sp, #16]
 80058b6:	4909      	ldr	r1, [pc, #36]	; (80058dc <siprintf+0x3c>)
 80058b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058bc:	9105      	str	r1, [sp, #20]
 80058be:	6800      	ldr	r0, [r0, #0]
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	a902      	add	r1, sp, #8
 80058c4:	f000 f868 	bl	8005998 <_svfiprintf_r>
 80058c8:	9b02      	ldr	r3, [sp, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	b01c      	add	sp, #112	; 0x70
 80058d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d4:	b003      	add	sp, #12
 80058d6:	4770      	bx	lr
 80058d8:	2000000c 	.word	0x2000000c
 80058dc:	ffff0208 	.word	0xffff0208

080058e0 <__ssputs_r>:
 80058e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	688e      	ldr	r6, [r1, #8]
 80058e6:	429e      	cmp	r6, r3
 80058e8:	4682      	mov	sl, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	4690      	mov	r8, r2
 80058ee:	461f      	mov	r7, r3
 80058f0:	d838      	bhi.n	8005964 <__ssputs_r+0x84>
 80058f2:	898a      	ldrh	r2, [r1, #12]
 80058f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058f8:	d032      	beq.n	8005960 <__ssputs_r+0x80>
 80058fa:	6825      	ldr	r5, [r4, #0]
 80058fc:	6909      	ldr	r1, [r1, #16]
 80058fe:	eba5 0901 	sub.w	r9, r5, r1
 8005902:	6965      	ldr	r5, [r4, #20]
 8005904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005908:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800590c:	3301      	adds	r3, #1
 800590e:	444b      	add	r3, r9
 8005910:	106d      	asrs	r5, r5, #1
 8005912:	429d      	cmp	r5, r3
 8005914:	bf38      	it	cc
 8005916:	461d      	movcc	r5, r3
 8005918:	0553      	lsls	r3, r2, #21
 800591a:	d531      	bpl.n	8005980 <__ssputs_r+0xa0>
 800591c:	4629      	mov	r1, r5
 800591e:	f000 fb47 	bl	8005fb0 <_malloc_r>
 8005922:	4606      	mov	r6, r0
 8005924:	b950      	cbnz	r0, 800593c <__ssputs_r+0x5c>
 8005926:	230c      	movs	r3, #12
 8005928:	f8ca 3000 	str.w	r3, [sl]
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005932:	81a3      	strh	r3, [r4, #12]
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593c:	6921      	ldr	r1, [r4, #16]
 800593e:	464a      	mov	r2, r9
 8005940:	f000 fabe 	bl	8005ec0 <memcpy>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800594a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	6126      	str	r6, [r4, #16]
 8005952:	6165      	str	r5, [r4, #20]
 8005954:	444e      	add	r6, r9
 8005956:	eba5 0509 	sub.w	r5, r5, r9
 800595a:	6026      	str	r6, [r4, #0]
 800595c:	60a5      	str	r5, [r4, #8]
 800595e:	463e      	mov	r6, r7
 8005960:	42be      	cmp	r6, r7
 8005962:	d900      	bls.n	8005966 <__ssputs_r+0x86>
 8005964:	463e      	mov	r6, r7
 8005966:	4632      	mov	r2, r6
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	4641      	mov	r1, r8
 800596c:	f000 fab6 	bl	8005edc <memmove>
 8005970:	68a3      	ldr	r3, [r4, #8]
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	1b9b      	subs	r3, r3, r6
 8005976:	4432      	add	r2, r6
 8005978:	60a3      	str	r3, [r4, #8]
 800597a:	6022      	str	r2, [r4, #0]
 800597c:	2000      	movs	r0, #0
 800597e:	e7db      	b.n	8005938 <__ssputs_r+0x58>
 8005980:	462a      	mov	r2, r5
 8005982:	f000 fb6f 	bl	8006064 <_realloc_r>
 8005986:	4606      	mov	r6, r0
 8005988:	2800      	cmp	r0, #0
 800598a:	d1e1      	bne.n	8005950 <__ssputs_r+0x70>
 800598c:	6921      	ldr	r1, [r4, #16]
 800598e:	4650      	mov	r0, sl
 8005990:	f000 fabe 	bl	8005f10 <_free_r>
 8005994:	e7c7      	b.n	8005926 <__ssputs_r+0x46>
	...

08005998 <_svfiprintf_r>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	4698      	mov	r8, r3
 800599e:	898b      	ldrh	r3, [r1, #12]
 80059a0:	061b      	lsls	r3, r3, #24
 80059a2:	b09d      	sub	sp, #116	; 0x74
 80059a4:	4607      	mov	r7, r0
 80059a6:	460d      	mov	r5, r1
 80059a8:	4614      	mov	r4, r2
 80059aa:	d50e      	bpl.n	80059ca <_svfiprintf_r+0x32>
 80059ac:	690b      	ldr	r3, [r1, #16]
 80059ae:	b963      	cbnz	r3, 80059ca <_svfiprintf_r+0x32>
 80059b0:	2140      	movs	r1, #64	; 0x40
 80059b2:	f000 fafd 	bl	8005fb0 <_malloc_r>
 80059b6:	6028      	str	r0, [r5, #0]
 80059b8:	6128      	str	r0, [r5, #16]
 80059ba:	b920      	cbnz	r0, 80059c6 <_svfiprintf_r+0x2e>
 80059bc:	230c      	movs	r3, #12
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	e0d1      	b.n	8005b6a <_svfiprintf_r+0x1d2>
 80059c6:	2340      	movs	r3, #64	; 0x40
 80059c8:	616b      	str	r3, [r5, #20]
 80059ca:	2300      	movs	r3, #0
 80059cc:	9309      	str	r3, [sp, #36]	; 0x24
 80059ce:	2320      	movs	r3, #32
 80059d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059d8:	2330      	movs	r3, #48	; 0x30
 80059da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b84 <_svfiprintf_r+0x1ec>
 80059de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059e2:	f04f 0901 	mov.w	r9, #1
 80059e6:	4623      	mov	r3, r4
 80059e8:	469a      	mov	sl, r3
 80059ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059ee:	b10a      	cbz	r2, 80059f4 <_svfiprintf_r+0x5c>
 80059f0:	2a25      	cmp	r2, #37	; 0x25
 80059f2:	d1f9      	bne.n	80059e8 <_svfiprintf_r+0x50>
 80059f4:	ebba 0b04 	subs.w	fp, sl, r4
 80059f8:	d00b      	beq.n	8005a12 <_svfiprintf_r+0x7a>
 80059fa:	465b      	mov	r3, fp
 80059fc:	4622      	mov	r2, r4
 80059fe:	4629      	mov	r1, r5
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff ff6d 	bl	80058e0 <__ssputs_r>
 8005a06:	3001      	adds	r0, #1
 8005a08:	f000 80aa 	beq.w	8005b60 <_svfiprintf_r+0x1c8>
 8005a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a0e:	445a      	add	r2, fp
 8005a10:	9209      	str	r2, [sp, #36]	; 0x24
 8005a12:	f89a 3000 	ldrb.w	r3, [sl]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 80a2 	beq.w	8005b60 <_svfiprintf_r+0x1c8>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a26:	f10a 0a01 	add.w	sl, sl, #1
 8005a2a:	9304      	str	r3, [sp, #16]
 8005a2c:	9307      	str	r3, [sp, #28]
 8005a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a32:	931a      	str	r3, [sp, #104]	; 0x68
 8005a34:	4654      	mov	r4, sl
 8005a36:	2205      	movs	r2, #5
 8005a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a3c:	4851      	ldr	r0, [pc, #324]	; (8005b84 <_svfiprintf_r+0x1ec>)
 8005a3e:	f7fa fbff 	bl	8000240 <memchr>
 8005a42:	9a04      	ldr	r2, [sp, #16]
 8005a44:	b9d8      	cbnz	r0, 8005a7e <_svfiprintf_r+0xe6>
 8005a46:	06d0      	lsls	r0, r2, #27
 8005a48:	bf44      	itt	mi
 8005a4a:	2320      	movmi	r3, #32
 8005a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a50:	0711      	lsls	r1, r2, #28
 8005a52:	bf44      	itt	mi
 8005a54:	232b      	movmi	r3, #43	; 0x2b
 8005a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a60:	d015      	beq.n	8005a8e <_svfiprintf_r+0xf6>
 8005a62:	9a07      	ldr	r2, [sp, #28]
 8005a64:	4654      	mov	r4, sl
 8005a66:	2000      	movs	r0, #0
 8005a68:	f04f 0c0a 	mov.w	ip, #10
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a72:	3b30      	subs	r3, #48	; 0x30
 8005a74:	2b09      	cmp	r3, #9
 8005a76:	d94e      	bls.n	8005b16 <_svfiprintf_r+0x17e>
 8005a78:	b1b0      	cbz	r0, 8005aa8 <_svfiprintf_r+0x110>
 8005a7a:	9207      	str	r2, [sp, #28]
 8005a7c:	e014      	b.n	8005aa8 <_svfiprintf_r+0x110>
 8005a7e:	eba0 0308 	sub.w	r3, r0, r8
 8005a82:	fa09 f303 	lsl.w	r3, r9, r3
 8005a86:	4313      	orrs	r3, r2
 8005a88:	9304      	str	r3, [sp, #16]
 8005a8a:	46a2      	mov	sl, r4
 8005a8c:	e7d2      	b.n	8005a34 <_svfiprintf_r+0x9c>
 8005a8e:	9b03      	ldr	r3, [sp, #12]
 8005a90:	1d19      	adds	r1, r3, #4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	9103      	str	r1, [sp, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bfbb      	ittet	lt
 8005a9a:	425b      	neglt	r3, r3
 8005a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa0:	9307      	strge	r3, [sp, #28]
 8005aa2:	9307      	strlt	r3, [sp, #28]
 8005aa4:	bfb8      	it	lt
 8005aa6:	9204      	strlt	r2, [sp, #16]
 8005aa8:	7823      	ldrb	r3, [r4, #0]
 8005aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8005aac:	d10c      	bne.n	8005ac8 <_svfiprintf_r+0x130>
 8005aae:	7863      	ldrb	r3, [r4, #1]
 8005ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab2:	d135      	bne.n	8005b20 <_svfiprintf_r+0x188>
 8005ab4:	9b03      	ldr	r3, [sp, #12]
 8005ab6:	1d1a      	adds	r2, r3, #4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	9203      	str	r2, [sp, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	bfb8      	it	lt
 8005ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ac4:	3402      	adds	r4, #2
 8005ac6:	9305      	str	r3, [sp, #20]
 8005ac8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b94 <_svfiprintf_r+0x1fc>
 8005acc:	7821      	ldrb	r1, [r4, #0]
 8005ace:	2203      	movs	r2, #3
 8005ad0:	4650      	mov	r0, sl
 8005ad2:	f7fa fbb5 	bl	8000240 <memchr>
 8005ad6:	b140      	cbz	r0, 8005aea <_svfiprintf_r+0x152>
 8005ad8:	2340      	movs	r3, #64	; 0x40
 8005ada:	eba0 000a 	sub.w	r0, r0, sl
 8005ade:	fa03 f000 	lsl.w	r0, r3, r0
 8005ae2:	9b04      	ldr	r3, [sp, #16]
 8005ae4:	4303      	orrs	r3, r0
 8005ae6:	3401      	adds	r4, #1
 8005ae8:	9304      	str	r3, [sp, #16]
 8005aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aee:	4826      	ldr	r0, [pc, #152]	; (8005b88 <_svfiprintf_r+0x1f0>)
 8005af0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005af4:	2206      	movs	r2, #6
 8005af6:	f7fa fba3 	bl	8000240 <memchr>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	d038      	beq.n	8005b70 <_svfiprintf_r+0x1d8>
 8005afe:	4b23      	ldr	r3, [pc, #140]	; (8005b8c <_svfiprintf_r+0x1f4>)
 8005b00:	bb1b      	cbnz	r3, 8005b4a <_svfiprintf_r+0x1b2>
 8005b02:	9b03      	ldr	r3, [sp, #12]
 8005b04:	3307      	adds	r3, #7
 8005b06:	f023 0307 	bic.w	r3, r3, #7
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	9303      	str	r3, [sp, #12]
 8005b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b10:	4433      	add	r3, r6
 8005b12:	9309      	str	r3, [sp, #36]	; 0x24
 8005b14:	e767      	b.n	80059e6 <_svfiprintf_r+0x4e>
 8005b16:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	e7a5      	b.n	8005a6c <_svfiprintf_r+0xd4>
 8005b20:	2300      	movs	r3, #0
 8005b22:	3401      	adds	r4, #1
 8005b24:	9305      	str	r3, [sp, #20]
 8005b26:	4619      	mov	r1, r3
 8005b28:	f04f 0c0a 	mov.w	ip, #10
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b32:	3a30      	subs	r2, #48	; 0x30
 8005b34:	2a09      	cmp	r2, #9
 8005b36:	d903      	bls.n	8005b40 <_svfiprintf_r+0x1a8>
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0c5      	beq.n	8005ac8 <_svfiprintf_r+0x130>
 8005b3c:	9105      	str	r1, [sp, #20]
 8005b3e:	e7c3      	b.n	8005ac8 <_svfiprintf_r+0x130>
 8005b40:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b44:	4604      	mov	r4, r0
 8005b46:	2301      	movs	r3, #1
 8005b48:	e7f0      	b.n	8005b2c <_svfiprintf_r+0x194>
 8005b4a:	ab03      	add	r3, sp, #12
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	462a      	mov	r2, r5
 8005b50:	4b0f      	ldr	r3, [pc, #60]	; (8005b90 <_svfiprintf_r+0x1f8>)
 8005b52:	a904      	add	r1, sp, #16
 8005b54:	4638      	mov	r0, r7
 8005b56:	f3af 8000 	nop.w
 8005b5a:	1c42      	adds	r2, r0, #1
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	d1d6      	bne.n	8005b0e <_svfiprintf_r+0x176>
 8005b60:	89ab      	ldrh	r3, [r5, #12]
 8005b62:	065b      	lsls	r3, r3, #25
 8005b64:	f53f af2c 	bmi.w	80059c0 <_svfiprintf_r+0x28>
 8005b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b6a:	b01d      	add	sp, #116	; 0x74
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b70:	ab03      	add	r3, sp, #12
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	462a      	mov	r2, r5
 8005b76:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <_svfiprintf_r+0x1f8>)
 8005b78:	a904      	add	r1, sp, #16
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	f000 f87a 	bl	8005c74 <_printf_i>
 8005b80:	e7eb      	b.n	8005b5a <_svfiprintf_r+0x1c2>
 8005b82:	bf00      	nop
 8005b84:	08006144 	.word	0x08006144
 8005b88:	0800614e 	.word	0x0800614e
 8005b8c:	00000000 	.word	0x00000000
 8005b90:	080058e1 	.word	0x080058e1
 8005b94:	0800614a 	.word	0x0800614a

08005b98 <_printf_common>:
 8005b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b9c:	4616      	mov	r6, r2
 8005b9e:	4699      	mov	r9, r3
 8005ba0:	688a      	ldr	r2, [r1, #8]
 8005ba2:	690b      	ldr	r3, [r1, #16]
 8005ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	bfb8      	it	lt
 8005bac:	4613      	movlt	r3, r2
 8005bae:	6033      	str	r3, [r6, #0]
 8005bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bb4:	4607      	mov	r7, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	b10a      	cbz	r2, 8005bbe <_printf_common+0x26>
 8005bba:	3301      	adds	r3, #1
 8005bbc:	6033      	str	r3, [r6, #0]
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	0699      	lsls	r1, r3, #26
 8005bc2:	bf42      	ittt	mi
 8005bc4:	6833      	ldrmi	r3, [r6, #0]
 8005bc6:	3302      	addmi	r3, #2
 8005bc8:	6033      	strmi	r3, [r6, #0]
 8005bca:	6825      	ldr	r5, [r4, #0]
 8005bcc:	f015 0506 	ands.w	r5, r5, #6
 8005bd0:	d106      	bne.n	8005be0 <_printf_common+0x48>
 8005bd2:	f104 0a19 	add.w	sl, r4, #25
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	6832      	ldr	r2, [r6, #0]
 8005bda:	1a9b      	subs	r3, r3, r2
 8005bdc:	42ab      	cmp	r3, r5
 8005bde:	dc26      	bgt.n	8005c2e <_printf_common+0x96>
 8005be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005be4:	1e13      	subs	r3, r2, #0
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	bf18      	it	ne
 8005bea:	2301      	movne	r3, #1
 8005bec:	0692      	lsls	r2, r2, #26
 8005bee:	d42b      	bmi.n	8005c48 <_printf_common+0xb0>
 8005bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	47c0      	blx	r8
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d01e      	beq.n	8005c3c <_printf_common+0xa4>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	68e5      	ldr	r5, [r4, #12]
 8005c02:	6832      	ldr	r2, [r6, #0]
 8005c04:	f003 0306 	and.w	r3, r3, #6
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	bf08      	it	eq
 8005c0c:	1aad      	subeq	r5, r5, r2
 8005c0e:	68a3      	ldr	r3, [r4, #8]
 8005c10:	6922      	ldr	r2, [r4, #16]
 8005c12:	bf0c      	ite	eq
 8005c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c18:	2500      	movne	r5, #0
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	bfc4      	itt	gt
 8005c1e:	1a9b      	subgt	r3, r3, r2
 8005c20:	18ed      	addgt	r5, r5, r3
 8005c22:	2600      	movs	r6, #0
 8005c24:	341a      	adds	r4, #26
 8005c26:	42b5      	cmp	r5, r6
 8005c28:	d11a      	bne.n	8005c60 <_printf_common+0xc8>
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	e008      	b.n	8005c40 <_printf_common+0xa8>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	4652      	mov	r2, sl
 8005c32:	4649      	mov	r1, r9
 8005c34:	4638      	mov	r0, r7
 8005c36:	47c0      	blx	r8
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d103      	bne.n	8005c44 <_printf_common+0xac>
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c44:	3501      	adds	r5, #1
 8005c46:	e7c6      	b.n	8005bd6 <_printf_common+0x3e>
 8005c48:	18e1      	adds	r1, r4, r3
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	2030      	movs	r0, #48	; 0x30
 8005c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c52:	4422      	add	r2, r4
 8005c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	e7c7      	b.n	8005bf0 <_printf_common+0x58>
 8005c60:	2301      	movs	r3, #1
 8005c62:	4622      	mov	r2, r4
 8005c64:	4649      	mov	r1, r9
 8005c66:	4638      	mov	r0, r7
 8005c68:	47c0      	blx	r8
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d0e6      	beq.n	8005c3c <_printf_common+0xa4>
 8005c6e:	3601      	adds	r6, #1
 8005c70:	e7d9      	b.n	8005c26 <_printf_common+0x8e>
	...

08005c74 <_printf_i>:
 8005c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c78:	460c      	mov	r4, r1
 8005c7a:	4691      	mov	r9, r2
 8005c7c:	7e27      	ldrb	r7, [r4, #24]
 8005c7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c80:	2f78      	cmp	r7, #120	; 0x78
 8005c82:	4680      	mov	r8, r0
 8005c84:	469a      	mov	sl, r3
 8005c86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c8a:	d807      	bhi.n	8005c9c <_printf_i+0x28>
 8005c8c:	2f62      	cmp	r7, #98	; 0x62
 8005c8e:	d80a      	bhi.n	8005ca6 <_printf_i+0x32>
 8005c90:	2f00      	cmp	r7, #0
 8005c92:	f000 80d8 	beq.w	8005e46 <_printf_i+0x1d2>
 8005c96:	2f58      	cmp	r7, #88	; 0x58
 8005c98:	f000 80a3 	beq.w	8005de2 <_printf_i+0x16e>
 8005c9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ca4:	e03a      	b.n	8005d1c <_printf_i+0xa8>
 8005ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005caa:	2b15      	cmp	r3, #21
 8005cac:	d8f6      	bhi.n	8005c9c <_printf_i+0x28>
 8005cae:	a001      	add	r0, pc, #4	; (adr r0, 8005cb4 <_printf_i+0x40>)
 8005cb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005cb4:	08005d0d 	.word	0x08005d0d
 8005cb8:	08005d21 	.word	0x08005d21
 8005cbc:	08005c9d 	.word	0x08005c9d
 8005cc0:	08005c9d 	.word	0x08005c9d
 8005cc4:	08005c9d 	.word	0x08005c9d
 8005cc8:	08005c9d 	.word	0x08005c9d
 8005ccc:	08005d21 	.word	0x08005d21
 8005cd0:	08005c9d 	.word	0x08005c9d
 8005cd4:	08005c9d 	.word	0x08005c9d
 8005cd8:	08005c9d 	.word	0x08005c9d
 8005cdc:	08005c9d 	.word	0x08005c9d
 8005ce0:	08005e2d 	.word	0x08005e2d
 8005ce4:	08005d51 	.word	0x08005d51
 8005ce8:	08005e0f 	.word	0x08005e0f
 8005cec:	08005c9d 	.word	0x08005c9d
 8005cf0:	08005c9d 	.word	0x08005c9d
 8005cf4:	08005e4f 	.word	0x08005e4f
 8005cf8:	08005c9d 	.word	0x08005c9d
 8005cfc:	08005d51 	.word	0x08005d51
 8005d00:	08005c9d 	.word	0x08005c9d
 8005d04:	08005c9d 	.word	0x08005c9d
 8005d08:	08005e17 	.word	0x08005e17
 8005d0c:	680b      	ldr	r3, [r1, #0]
 8005d0e:	1d1a      	adds	r2, r3, #4
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	600a      	str	r2, [r1, #0]
 8005d14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0a3      	b.n	8005e68 <_printf_i+0x1f4>
 8005d20:	6825      	ldr	r5, [r4, #0]
 8005d22:	6808      	ldr	r0, [r1, #0]
 8005d24:	062e      	lsls	r6, r5, #24
 8005d26:	f100 0304 	add.w	r3, r0, #4
 8005d2a:	d50a      	bpl.n	8005d42 <_printf_i+0xce>
 8005d2c:	6805      	ldr	r5, [r0, #0]
 8005d2e:	600b      	str	r3, [r1, #0]
 8005d30:	2d00      	cmp	r5, #0
 8005d32:	da03      	bge.n	8005d3c <_printf_i+0xc8>
 8005d34:	232d      	movs	r3, #45	; 0x2d
 8005d36:	426d      	negs	r5, r5
 8005d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d3c:	485e      	ldr	r0, [pc, #376]	; (8005eb8 <_printf_i+0x244>)
 8005d3e:	230a      	movs	r3, #10
 8005d40:	e019      	b.n	8005d76 <_printf_i+0x102>
 8005d42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d46:	6805      	ldr	r5, [r0, #0]
 8005d48:	600b      	str	r3, [r1, #0]
 8005d4a:	bf18      	it	ne
 8005d4c:	b22d      	sxthne	r5, r5
 8005d4e:	e7ef      	b.n	8005d30 <_printf_i+0xbc>
 8005d50:	680b      	ldr	r3, [r1, #0]
 8005d52:	6825      	ldr	r5, [r4, #0]
 8005d54:	1d18      	adds	r0, r3, #4
 8005d56:	6008      	str	r0, [r1, #0]
 8005d58:	0628      	lsls	r0, r5, #24
 8005d5a:	d501      	bpl.n	8005d60 <_printf_i+0xec>
 8005d5c:	681d      	ldr	r5, [r3, #0]
 8005d5e:	e002      	b.n	8005d66 <_printf_i+0xf2>
 8005d60:	0669      	lsls	r1, r5, #25
 8005d62:	d5fb      	bpl.n	8005d5c <_printf_i+0xe8>
 8005d64:	881d      	ldrh	r5, [r3, #0]
 8005d66:	4854      	ldr	r0, [pc, #336]	; (8005eb8 <_printf_i+0x244>)
 8005d68:	2f6f      	cmp	r7, #111	; 0x6f
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2308      	moveq	r3, #8
 8005d6e:	230a      	movne	r3, #10
 8005d70:	2100      	movs	r1, #0
 8005d72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d76:	6866      	ldr	r6, [r4, #4]
 8005d78:	60a6      	str	r6, [r4, #8]
 8005d7a:	2e00      	cmp	r6, #0
 8005d7c:	bfa2      	ittt	ge
 8005d7e:	6821      	ldrge	r1, [r4, #0]
 8005d80:	f021 0104 	bicge.w	r1, r1, #4
 8005d84:	6021      	strge	r1, [r4, #0]
 8005d86:	b90d      	cbnz	r5, 8005d8c <_printf_i+0x118>
 8005d88:	2e00      	cmp	r6, #0
 8005d8a:	d04d      	beq.n	8005e28 <_printf_i+0x1b4>
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d92:	fb03 5711 	mls	r7, r3, r1, r5
 8005d96:	5dc7      	ldrb	r7, [r0, r7]
 8005d98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d9c:	462f      	mov	r7, r5
 8005d9e:	42bb      	cmp	r3, r7
 8005da0:	460d      	mov	r5, r1
 8005da2:	d9f4      	bls.n	8005d8e <_printf_i+0x11a>
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d10b      	bne.n	8005dc0 <_printf_i+0x14c>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	07df      	lsls	r7, r3, #31
 8005dac:	d508      	bpl.n	8005dc0 <_printf_i+0x14c>
 8005dae:	6923      	ldr	r3, [r4, #16]
 8005db0:	6861      	ldr	r1, [r4, #4]
 8005db2:	4299      	cmp	r1, r3
 8005db4:	bfde      	ittt	le
 8005db6:	2330      	movle	r3, #48	; 0x30
 8005db8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dc0:	1b92      	subs	r2, r2, r6
 8005dc2:	6122      	str	r2, [r4, #16]
 8005dc4:	f8cd a000 	str.w	sl, [sp]
 8005dc8:	464b      	mov	r3, r9
 8005dca:	aa03      	add	r2, sp, #12
 8005dcc:	4621      	mov	r1, r4
 8005dce:	4640      	mov	r0, r8
 8005dd0:	f7ff fee2 	bl	8005b98 <_printf_common>
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d14c      	bne.n	8005e72 <_printf_i+0x1fe>
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	b004      	add	sp, #16
 8005dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de2:	4835      	ldr	r0, [pc, #212]	; (8005eb8 <_printf_i+0x244>)
 8005de4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	680e      	ldr	r6, [r1, #0]
 8005dec:	061f      	lsls	r7, r3, #24
 8005dee:	f856 5b04 	ldr.w	r5, [r6], #4
 8005df2:	600e      	str	r6, [r1, #0]
 8005df4:	d514      	bpl.n	8005e20 <_printf_i+0x1ac>
 8005df6:	07d9      	lsls	r1, r3, #31
 8005df8:	bf44      	itt	mi
 8005dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8005dfe:	6023      	strmi	r3, [r4, #0]
 8005e00:	b91d      	cbnz	r5, 8005e0a <_printf_i+0x196>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	f023 0320 	bic.w	r3, r3, #32
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	2310      	movs	r3, #16
 8005e0c:	e7b0      	b.n	8005d70 <_printf_i+0xfc>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	f043 0320 	orr.w	r3, r3, #32
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	2378      	movs	r3, #120	; 0x78
 8005e18:	4828      	ldr	r0, [pc, #160]	; (8005ebc <_printf_i+0x248>)
 8005e1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e1e:	e7e3      	b.n	8005de8 <_printf_i+0x174>
 8005e20:	065e      	lsls	r6, r3, #25
 8005e22:	bf48      	it	mi
 8005e24:	b2ad      	uxthmi	r5, r5
 8005e26:	e7e6      	b.n	8005df6 <_printf_i+0x182>
 8005e28:	4616      	mov	r6, r2
 8005e2a:	e7bb      	b.n	8005da4 <_printf_i+0x130>
 8005e2c:	680b      	ldr	r3, [r1, #0]
 8005e2e:	6826      	ldr	r6, [r4, #0]
 8005e30:	6960      	ldr	r0, [r4, #20]
 8005e32:	1d1d      	adds	r5, r3, #4
 8005e34:	600d      	str	r5, [r1, #0]
 8005e36:	0635      	lsls	r5, r6, #24
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	d501      	bpl.n	8005e40 <_printf_i+0x1cc>
 8005e3c:	6018      	str	r0, [r3, #0]
 8005e3e:	e002      	b.n	8005e46 <_printf_i+0x1d2>
 8005e40:	0671      	lsls	r1, r6, #25
 8005e42:	d5fb      	bpl.n	8005e3c <_printf_i+0x1c8>
 8005e44:	8018      	strh	r0, [r3, #0]
 8005e46:	2300      	movs	r3, #0
 8005e48:	6123      	str	r3, [r4, #16]
 8005e4a:	4616      	mov	r6, r2
 8005e4c:	e7ba      	b.n	8005dc4 <_printf_i+0x150>
 8005e4e:	680b      	ldr	r3, [r1, #0]
 8005e50:	1d1a      	adds	r2, r3, #4
 8005e52:	600a      	str	r2, [r1, #0]
 8005e54:	681e      	ldr	r6, [r3, #0]
 8005e56:	6862      	ldr	r2, [r4, #4]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f7fa f9f0 	bl	8000240 <memchr>
 8005e60:	b108      	cbz	r0, 8005e66 <_printf_i+0x1f2>
 8005e62:	1b80      	subs	r0, r0, r6
 8005e64:	6060      	str	r0, [r4, #4]
 8005e66:	6863      	ldr	r3, [r4, #4]
 8005e68:	6123      	str	r3, [r4, #16]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e70:	e7a8      	b.n	8005dc4 <_printf_i+0x150>
 8005e72:	6923      	ldr	r3, [r4, #16]
 8005e74:	4632      	mov	r2, r6
 8005e76:	4649      	mov	r1, r9
 8005e78:	4640      	mov	r0, r8
 8005e7a:	47d0      	blx	sl
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d0ab      	beq.n	8005dd8 <_printf_i+0x164>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	079b      	lsls	r3, r3, #30
 8005e84:	d413      	bmi.n	8005eae <_printf_i+0x23a>
 8005e86:	68e0      	ldr	r0, [r4, #12]
 8005e88:	9b03      	ldr	r3, [sp, #12]
 8005e8a:	4298      	cmp	r0, r3
 8005e8c:	bfb8      	it	lt
 8005e8e:	4618      	movlt	r0, r3
 8005e90:	e7a4      	b.n	8005ddc <_printf_i+0x168>
 8005e92:	2301      	movs	r3, #1
 8005e94:	4632      	mov	r2, r6
 8005e96:	4649      	mov	r1, r9
 8005e98:	4640      	mov	r0, r8
 8005e9a:	47d0      	blx	sl
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d09b      	beq.n	8005dd8 <_printf_i+0x164>
 8005ea0:	3501      	adds	r5, #1
 8005ea2:	68e3      	ldr	r3, [r4, #12]
 8005ea4:	9903      	ldr	r1, [sp, #12]
 8005ea6:	1a5b      	subs	r3, r3, r1
 8005ea8:	42ab      	cmp	r3, r5
 8005eaa:	dcf2      	bgt.n	8005e92 <_printf_i+0x21e>
 8005eac:	e7eb      	b.n	8005e86 <_printf_i+0x212>
 8005eae:	2500      	movs	r5, #0
 8005eb0:	f104 0619 	add.w	r6, r4, #25
 8005eb4:	e7f5      	b.n	8005ea2 <_printf_i+0x22e>
 8005eb6:	bf00      	nop
 8005eb8:	08006155 	.word	0x08006155
 8005ebc:	08006166 	.word	0x08006166

08005ec0 <memcpy>:
 8005ec0:	440a      	add	r2, r1
 8005ec2:	4291      	cmp	r1, r2
 8005ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ec8:	d100      	bne.n	8005ecc <memcpy+0xc>
 8005eca:	4770      	bx	lr
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed6:	4291      	cmp	r1, r2
 8005ed8:	d1f9      	bne.n	8005ece <memcpy+0xe>
 8005eda:	bd10      	pop	{r4, pc}

08005edc <memmove>:
 8005edc:	4288      	cmp	r0, r1
 8005ede:	b510      	push	{r4, lr}
 8005ee0:	eb01 0402 	add.w	r4, r1, r2
 8005ee4:	d902      	bls.n	8005eec <memmove+0x10>
 8005ee6:	4284      	cmp	r4, r0
 8005ee8:	4623      	mov	r3, r4
 8005eea:	d807      	bhi.n	8005efc <memmove+0x20>
 8005eec:	1e43      	subs	r3, r0, #1
 8005eee:	42a1      	cmp	r1, r4
 8005ef0:	d008      	beq.n	8005f04 <memmove+0x28>
 8005ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005efa:	e7f8      	b.n	8005eee <memmove+0x12>
 8005efc:	4402      	add	r2, r0
 8005efe:	4601      	mov	r1, r0
 8005f00:	428a      	cmp	r2, r1
 8005f02:	d100      	bne.n	8005f06 <memmove+0x2a>
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f0e:	e7f7      	b.n	8005f00 <memmove+0x24>

08005f10 <_free_r>:
 8005f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f12:	2900      	cmp	r1, #0
 8005f14:	d048      	beq.n	8005fa8 <_free_r+0x98>
 8005f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f1a:	9001      	str	r0, [sp, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f22:	bfb8      	it	lt
 8005f24:	18e4      	addlt	r4, r4, r3
 8005f26:	f000 f8d3 	bl	80060d0 <__malloc_lock>
 8005f2a:	4a20      	ldr	r2, [pc, #128]	; (8005fac <_free_r+0x9c>)
 8005f2c:	9801      	ldr	r0, [sp, #4]
 8005f2e:	6813      	ldr	r3, [r2, #0]
 8005f30:	4615      	mov	r5, r2
 8005f32:	b933      	cbnz	r3, 8005f42 <_free_r+0x32>
 8005f34:	6063      	str	r3, [r4, #4]
 8005f36:	6014      	str	r4, [r2, #0]
 8005f38:	b003      	add	sp, #12
 8005f3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f3e:	f000 b8cd 	b.w	80060dc <__malloc_unlock>
 8005f42:	42a3      	cmp	r3, r4
 8005f44:	d90b      	bls.n	8005f5e <_free_r+0x4e>
 8005f46:	6821      	ldr	r1, [r4, #0]
 8005f48:	1862      	adds	r2, r4, r1
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	bf04      	itt	eq
 8005f4e:	681a      	ldreq	r2, [r3, #0]
 8005f50:	685b      	ldreq	r3, [r3, #4]
 8005f52:	6063      	str	r3, [r4, #4]
 8005f54:	bf04      	itt	eq
 8005f56:	1852      	addeq	r2, r2, r1
 8005f58:	6022      	streq	r2, [r4, #0]
 8005f5a:	602c      	str	r4, [r5, #0]
 8005f5c:	e7ec      	b.n	8005f38 <_free_r+0x28>
 8005f5e:	461a      	mov	r2, r3
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b10b      	cbz	r3, 8005f68 <_free_r+0x58>
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d9fa      	bls.n	8005f5e <_free_r+0x4e>
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	1855      	adds	r5, r2, r1
 8005f6c:	42a5      	cmp	r5, r4
 8005f6e:	d10b      	bne.n	8005f88 <_free_r+0x78>
 8005f70:	6824      	ldr	r4, [r4, #0]
 8005f72:	4421      	add	r1, r4
 8005f74:	1854      	adds	r4, r2, r1
 8005f76:	42a3      	cmp	r3, r4
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	d1dd      	bne.n	8005f38 <_free_r+0x28>
 8005f7c:	681c      	ldr	r4, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	6053      	str	r3, [r2, #4]
 8005f82:	4421      	add	r1, r4
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	e7d7      	b.n	8005f38 <_free_r+0x28>
 8005f88:	d902      	bls.n	8005f90 <_free_r+0x80>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	6003      	str	r3, [r0, #0]
 8005f8e:	e7d3      	b.n	8005f38 <_free_r+0x28>
 8005f90:	6825      	ldr	r5, [r4, #0]
 8005f92:	1961      	adds	r1, r4, r5
 8005f94:	428b      	cmp	r3, r1
 8005f96:	bf04      	itt	eq
 8005f98:	6819      	ldreq	r1, [r3, #0]
 8005f9a:	685b      	ldreq	r3, [r3, #4]
 8005f9c:	6063      	str	r3, [r4, #4]
 8005f9e:	bf04      	itt	eq
 8005fa0:	1949      	addeq	r1, r1, r5
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	6054      	str	r4, [r2, #4]
 8005fa6:	e7c7      	b.n	8005f38 <_free_r+0x28>
 8005fa8:	b003      	add	sp, #12
 8005faa:	bd30      	pop	{r4, r5, pc}
 8005fac:	20000090 	.word	0x20000090

08005fb0 <_malloc_r>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	1ccd      	adds	r5, r1, #3
 8005fb4:	f025 0503 	bic.w	r5, r5, #3
 8005fb8:	3508      	adds	r5, #8
 8005fba:	2d0c      	cmp	r5, #12
 8005fbc:	bf38      	it	cc
 8005fbe:	250c      	movcc	r5, #12
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	db01      	blt.n	8005fca <_malloc_r+0x1a>
 8005fc6:	42a9      	cmp	r1, r5
 8005fc8:	d903      	bls.n	8005fd2 <_malloc_r+0x22>
 8005fca:	230c      	movs	r3, #12
 8005fcc:	6033      	str	r3, [r6, #0]
 8005fce:	2000      	movs	r0, #0
 8005fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fd2:	f000 f87d 	bl	80060d0 <__malloc_lock>
 8005fd6:	4921      	ldr	r1, [pc, #132]	; (800605c <_malloc_r+0xac>)
 8005fd8:	680a      	ldr	r2, [r1, #0]
 8005fda:	4614      	mov	r4, r2
 8005fdc:	b99c      	cbnz	r4, 8006006 <_malloc_r+0x56>
 8005fde:	4f20      	ldr	r7, [pc, #128]	; (8006060 <_malloc_r+0xb0>)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	b923      	cbnz	r3, 8005fee <_malloc_r+0x3e>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f000 f862 	bl	80060b0 <_sbrk_r>
 8005fec:	6038      	str	r0, [r7, #0]
 8005fee:	4629      	mov	r1, r5
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f000 f85d 	bl	80060b0 <_sbrk_r>
 8005ff6:	1c43      	adds	r3, r0, #1
 8005ff8:	d123      	bne.n	8006042 <_malloc_r+0x92>
 8005ffa:	230c      	movs	r3, #12
 8005ffc:	6033      	str	r3, [r6, #0]
 8005ffe:	4630      	mov	r0, r6
 8006000:	f000 f86c 	bl	80060dc <__malloc_unlock>
 8006004:	e7e3      	b.n	8005fce <_malloc_r+0x1e>
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	1b5b      	subs	r3, r3, r5
 800600a:	d417      	bmi.n	800603c <_malloc_r+0x8c>
 800600c:	2b0b      	cmp	r3, #11
 800600e:	d903      	bls.n	8006018 <_malloc_r+0x68>
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	441c      	add	r4, r3
 8006014:	6025      	str	r5, [r4, #0]
 8006016:	e004      	b.n	8006022 <_malloc_r+0x72>
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	42a2      	cmp	r2, r4
 800601c:	bf0c      	ite	eq
 800601e:	600b      	streq	r3, [r1, #0]
 8006020:	6053      	strne	r3, [r2, #4]
 8006022:	4630      	mov	r0, r6
 8006024:	f000 f85a 	bl	80060dc <__malloc_unlock>
 8006028:	f104 000b 	add.w	r0, r4, #11
 800602c:	1d23      	adds	r3, r4, #4
 800602e:	f020 0007 	bic.w	r0, r0, #7
 8006032:	1ac2      	subs	r2, r0, r3
 8006034:	d0cc      	beq.n	8005fd0 <_malloc_r+0x20>
 8006036:	1a1b      	subs	r3, r3, r0
 8006038:	50a3      	str	r3, [r4, r2]
 800603a:	e7c9      	b.n	8005fd0 <_malloc_r+0x20>
 800603c:	4622      	mov	r2, r4
 800603e:	6864      	ldr	r4, [r4, #4]
 8006040:	e7cc      	b.n	8005fdc <_malloc_r+0x2c>
 8006042:	1cc4      	adds	r4, r0, #3
 8006044:	f024 0403 	bic.w	r4, r4, #3
 8006048:	42a0      	cmp	r0, r4
 800604a:	d0e3      	beq.n	8006014 <_malloc_r+0x64>
 800604c:	1a21      	subs	r1, r4, r0
 800604e:	4630      	mov	r0, r6
 8006050:	f000 f82e 	bl	80060b0 <_sbrk_r>
 8006054:	3001      	adds	r0, #1
 8006056:	d1dd      	bne.n	8006014 <_malloc_r+0x64>
 8006058:	e7cf      	b.n	8005ffa <_malloc_r+0x4a>
 800605a:	bf00      	nop
 800605c:	20000090 	.word	0x20000090
 8006060:	20000094 	.word	0x20000094

08006064 <_realloc_r>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	4607      	mov	r7, r0
 8006068:	4614      	mov	r4, r2
 800606a:	460e      	mov	r6, r1
 800606c:	b921      	cbnz	r1, 8006078 <_realloc_r+0x14>
 800606e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006072:	4611      	mov	r1, r2
 8006074:	f7ff bf9c 	b.w	8005fb0 <_malloc_r>
 8006078:	b922      	cbnz	r2, 8006084 <_realloc_r+0x20>
 800607a:	f7ff ff49 	bl	8005f10 <_free_r>
 800607e:	4625      	mov	r5, r4
 8006080:	4628      	mov	r0, r5
 8006082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006084:	f000 f830 	bl	80060e8 <_malloc_usable_size_r>
 8006088:	42a0      	cmp	r0, r4
 800608a:	d20f      	bcs.n	80060ac <_realloc_r+0x48>
 800608c:	4621      	mov	r1, r4
 800608e:	4638      	mov	r0, r7
 8006090:	f7ff ff8e 	bl	8005fb0 <_malloc_r>
 8006094:	4605      	mov	r5, r0
 8006096:	2800      	cmp	r0, #0
 8006098:	d0f2      	beq.n	8006080 <_realloc_r+0x1c>
 800609a:	4631      	mov	r1, r6
 800609c:	4622      	mov	r2, r4
 800609e:	f7ff ff0f 	bl	8005ec0 <memcpy>
 80060a2:	4631      	mov	r1, r6
 80060a4:	4638      	mov	r0, r7
 80060a6:	f7ff ff33 	bl	8005f10 <_free_r>
 80060aa:	e7e9      	b.n	8006080 <_realloc_r+0x1c>
 80060ac:	4635      	mov	r5, r6
 80060ae:	e7e7      	b.n	8006080 <_realloc_r+0x1c>

080060b0 <_sbrk_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d06      	ldr	r5, [pc, #24]	; (80060cc <_sbrk_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	f7fa fdfe 	bl	8000cbc <_sbrk>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_sbrk_r+0x1a>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_sbrk_r+0x1a>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20000608 	.word	0x20000608

080060d0 <__malloc_lock>:
 80060d0:	4801      	ldr	r0, [pc, #4]	; (80060d8 <__malloc_lock+0x8>)
 80060d2:	f000 b811 	b.w	80060f8 <__retarget_lock_acquire_recursive>
 80060d6:	bf00      	nop
 80060d8:	20000610 	.word	0x20000610

080060dc <__malloc_unlock>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__malloc_unlock+0x8>)
 80060de:	f000 b80c 	b.w	80060fa <__retarget_lock_release_recursive>
 80060e2:	bf00      	nop
 80060e4:	20000610 	.word	0x20000610

080060e8 <_malloc_usable_size_r>:
 80060e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ec:	1f18      	subs	r0, r3, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	bfbc      	itt	lt
 80060f2:	580b      	ldrlt	r3, [r1, r0]
 80060f4:	18c0      	addlt	r0, r0, r3
 80060f6:	4770      	bx	lr

080060f8 <__retarget_lock_acquire_recursive>:
 80060f8:	4770      	bx	lr

080060fa <__retarget_lock_release_recursive>:
 80060fa:	4770      	bx	lr

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
