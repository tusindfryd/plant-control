
plant-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dbc  08007dbc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007dbc  08007dbc  00017dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dc4  08007dc4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dc4  08007dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  2000007c  08007e48  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad0  08007e48  00020ad0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000239d7  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004748  00000000  00000000  00043a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  000481d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  000499f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8ff  00000000  00000000  0004b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002129e  00000000  00000000  000778ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001064f4  00000000  00000000  00098b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019f091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006710  00000000  00000000  0019f0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	080075b0 	.word	0x080075b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	080075b0 	.word	0x080075b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <lerp>:
#include "WS9527.h"

uint16_t WS9527_Reading_ADC;
uint16_t WS9527_Reading;

float lerp(uint16_t v0, uint32_t v1, float t) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005e6:	81fb      	strh	r3, [r7, #14]
	return (1 - t) * v0 + t * v1;
 80005e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80005f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f4:	89fb      	ldrh	r3, [r7, #14]
 80005f6:	ee07 3a90 	vmov	s15, r3
 80005fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800060c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000614:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000618:	eeb0 0a67 	vmov.f32	s0, s15
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <WS9527_Initialize>:

void WS9527_Initialize() {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <WS9527_Initialize+0x10>)
 800062e:	f001 faa1 	bl	8001b74 <HAL_ADC_Start_IT>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200004b8 	.word	0x200004b8

0800063c <WS9527_StartReadings>:

void WS9527_StartReadings() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <WS9527_StartReadings+0x10>)
 8000642:	f001 fa97 	bl	8001b74 <HAL_ADC_Start_IT>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200004b8 	.word	0x200004b8

08000650 <WS9527_GetReadings>:

void WS9527_GetReadings(ADC_HandleTypeDef *hadc) {
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	/* first we lerp everything out and then scale the result by 18  *
	 * that's because maximally moist soil gives the reading of 1800 *
	 * so 1% is the reading divided by 18                            */
	if (hadc->Instance == ADC1) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <WS9527_GetReadings+0x58>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d11d      	bne.n	800069e <WS9527_GetReadings+0x4e>
		WS9527_Reading_ADC = (int) lerp(WS9527_Reading_ADC,
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <WS9527_GetReadings+0x5c>)
 8000664:	881c      	ldrh	r4, [r3, #0]
 8000666:	4812      	ldr	r0, [pc, #72]	; (80006b0 <WS9527_GetReadings+0x60>)
 8000668:	f001 fc6c 	bl	8001f44 <HAL_ADC_GetValue>
 800066c:	4603      	mov	r3, r0
 800066e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80006b4 <WS9527_GetReadings+0x64>
 8000672:	4619      	mov	r1, r3
 8000674:	4620      	mov	r0, r4
 8000676:	f7ff ffaf 	bl	80005d8 <lerp>
 800067a:	eef0 7a40 	vmov.f32	s15, s0
 800067e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000682:	ee17 3a90 	vmov	r3, s15
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <WS9527_GetReadings+0x5c>)
 800068a:	801a      	strh	r2, [r3, #0]
				HAL_ADC_GetValue(&hadc1), 0.001);
		WS9527_Reading = WS9527_Reading_ADC / 18;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <WS9527_GetReadings+0x5c>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <WS9527_GetReadings+0x68>)
 8000692:	fba2 2303 	umull	r2, r3, r2, r3
 8000696:	089b      	lsrs	r3, r3, #2
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <WS9527_GetReadings+0x6c>)
 800069c:	801a      	strh	r2, [r3, #0]
	}
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40012000 	.word	0x40012000
 80006ac:	200004b4 	.word	0x200004b4
 80006b0:	200004b8 	.word	0x200004b8
 80006b4:	3a83126f 	.word	0x3a83126f
 80006b8:	38e38e39 	.word	0x38e38e39
 80006bc:	200004b6 	.word	0x200004b6

080006c0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_ADC1_Init+0x98>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_ADC1_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_ADC1_Init+0x98>)
 8000722:	f001 f9e3 	bl	8001aec <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800072c:	f000 fb82 	bl	8000e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000734:	2301      	movs	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_ADC1_Init+0x98>)
 8000742:	f001 fc21 	bl	8001f88 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800074c:	f000 fb72 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200004b8 	.word	0x200004b8
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <HAL_ADC_MspInit+0x84>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d12b      	bne.n	80007de <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_ADC_MspInit+0x88>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <HAL_ADC_MspInit+0x88>)
 800078c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <HAL_ADC_MspInit+0x88>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_ADC_MspInit+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b6:	2301      	movs	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_ADC_MspInit+0x8c>)
 80007ca:	f001 ffdb 	bl	8002784 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2012      	movs	r0, #18
 80007d4:	f001 ff0d 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007d8:	2012      	movs	r0, #18
 80007da:	f001 ff26 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40012000 	.word	0x40012000
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000

080007f4 <splash>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

void splash() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80007f8:	f000 fb78 	bl	8000eec <ssd1306_Init>
	ssd1306_Fill(White);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f000 fbdf 	bl	8000fc0 <ssd1306_Fill>
//	    ssd1306_DrawBitmap(0, 0, garfield1_128x64, 128, 64, White);
	ssd1306_SetCursor(30, 30);
 8000802:	211e      	movs	r1, #30
 8000804:	201e      	movs	r0, #30
 8000806:	f000 fd29 	bl	800125c <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 800080a:	2000      	movs	r0, #0
 800080c:	f000 fbd8 	bl	8000fc0 <ssd1306_Fill>
	ssd1306_WriteString("plant control", Font_7x10, White);
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <splash+0x30>)
 8000812:	2301      	movs	r3, #1
 8000814:	ca06      	ldmia	r2, {r1, r2}
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <splash+0x34>)
 8000818:	f000 fcfa 	bl	8001210 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800081c:	f000 fbf4 	bl	8001008 <ssd1306_UpdateScreen>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000004 	.word	0x20000004
 8000828:	080075c8 	.word	0x080075c8

0800082c <display_measurements>:

void display_measurements(uint16_t moisture) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
	char moisture_data[15];
	sprintf(moisture_data, "moisture: %03d", moisture);
 8000836:	88fa      	ldrh	r2, [r7, #6]
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	490b      	ldr	r1, [pc, #44]	; (800086c <display_measurements+0x40>)
 800083e:	4618      	mov	r0, r3
 8000840:	f006 fab0 	bl	8006da4 <siprintf>
	ssd1306_SetCursor(30, 30);
 8000844:	211e      	movs	r1, #30
 8000846:	201e      	movs	r0, #30
 8000848:	f000 fd08 	bl	800125c <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fbb7 	bl	8000fc0 <ssd1306_Fill>
	ssd1306_WriteString(moisture_data, Font_7x10, White);
 8000852:	4a07      	ldr	r2, [pc, #28]	; (8000870 <display_measurements+0x44>)
 8000854:	f107 0008 	add.w	r0, r7, #8
 8000858:	2301      	movs	r3, #1
 800085a:	ca06      	ldmia	r2, {r1, r2}
 800085c:	f000 fcd8 	bl	8001210 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000860:	f000 fbd2 	bl	8001008 <ssd1306_UpdateScreen>
}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	080075d8 	.word	0x080075d8
 8000870:	20000004 	.word	0x20000004

08000874 <QE_Initialize>:

uint32_t lastPress = 0;
uint8_t debounce = 20;
uint8_t button = 0;

void QE_Initialize() {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000878:	213c      	movs	r1, #60	; 0x3c
 800087a:	4802      	ldr	r0, [pc, #8]	; (8000884 <QE_Initialize+0x10>)
 800087c:	f004 f9fe 	bl	8004c7c <HAL_TIM_Encoder_Start>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200005e8 	.word	0x200005e8

08000888 <QE_CheckPosition>:

void QE_CheckPosition() {
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	pulse_count = TIM1->CNT;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <QE_CheckPosition+0x28>)
 800088e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <QE_CheckPosition+0x2c>)
 8000894:	801a      	strh	r2, [r3, #0]
	positions = pulse_count / 4;
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <QE_CheckPosition+0x2c>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b29b      	uxth	r3, r3
 800089c:	089b      	lsrs	r3, r3, #2
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <QE_CheckPosition+0x30>)
 80008a2:	801a      	strh	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40010000 	.word	0x40010000
 80008b4:	2000054c 	.word	0x2000054c
 80008b8:	2000054e 	.word	0x2000054e

080008bc <switchHandler>:

void switchHandler() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - lastPress > debounce) {
 80008c0:	f001 f8e4 	bl	8001a8c <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <switchHandler+0x34>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <switchHandler+0x38>)
 80008ce:	7812      	ldrb	r2, [r2, #0]
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d90a      	bls.n	80008ea <switchHandler+0x2e>
		button++;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <switchHandler+0x3c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <switchHandler+0x3c>)
 80008de:	701a      	strb	r2, [r3, #0]
		lastPress = HAL_GetTick();
 80008e0:	f001 f8d4 	bl	8001a8c <HAL_GetTick>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4a02      	ldr	r2, [pc, #8]	; (80008f0 <switchHandler+0x34>)
 80008e8:	6013      	str	r3, [r2, #0]
	}
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000098 	.word	0x20000098
 80008f4:	20000000 	.word	0x20000000
 80008f8:	2000009c 	.word	0x2000009c

080008fc <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08e      	sub	sp, #56	; 0x38
 8000900:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b78      	ldr	r3, [pc, #480]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a77      	ldr	r2, [pc, #476]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b75      	ldr	r3, [pc, #468]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	623b      	str	r3, [r7, #32]
 8000928:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b72      	ldr	r3, [pc, #456]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a71      	ldr	r2, [pc, #452]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b6f      	ldr	r3, [pc, #444]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b6c      	ldr	r3, [pc, #432]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a6b      	ldr	r2, [pc, #428]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b69      	ldr	r3, [pc, #420]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b66      	ldr	r3, [pc, #408]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a65      	ldr	r2, [pc, #404]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b63      	ldr	r3, [pc, #396]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000972:	4b60      	ldr	r3, [pc, #384]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a5f      	ldr	r2, [pc, #380]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b5d      	ldr	r3, [pc, #372]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0320 	and.w	r3, r3, #32
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	4b5a      	ldr	r3, [pc, #360]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a59      	ldr	r2, [pc, #356]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b57      	ldr	r3, [pc, #348]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	4b54      	ldr	r3, [pc, #336]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a53      	ldr	r2, [pc, #332]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b51      	ldr	r3, [pc, #324]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ba:	4b4e      	ldr	r3, [pc, #312]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a4d      	ldr	r2, [pc, #308]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 80009c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <MX_GPIO_Init+0x1f8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009d8:	4847      	ldr	r0, [pc, #284]	; (8000af8 <MX_GPIO_Init+0x1fc>)
 80009da:	f002 f87f 	bl	8002adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2140      	movs	r1, #64	; 0x40
 80009e2:	4846      	ldr	r0, [pc, #280]	; (8000afc <MX_GPIO_Init+0x200>)
 80009e4:	f002 f87a 	bl	8002adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009e8:	2332      	movs	r3, #50	; 0x32
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f8:	230b      	movs	r3, #11
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a00:	4619      	mov	r1, r3
 8000a02:	483f      	ldr	r0, [pc, #252]	; (8000b00 <MX_GPIO_Init+0x204>)
 8000a04:	f001 febe 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a08:	2386      	movs	r3, #134	; 0x86
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a18:	230b      	movs	r3, #11
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4838      	ldr	r0, [pc, #224]	; (8000b04 <MX_GPIO_Init+0x208>)
 8000a24:	f001 feae 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a28:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	482d      	ldr	r0, [pc, #180]	; (8000af8 <MX_GPIO_Init+0x1fc>)
 8000a42:	f001 fe9f 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	482a      	ldr	r0, [pc, #168]	; (8000b08 <MX_GPIO_Init+0x20c>)
 8000a5e:	f001 fe91 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a74:	230b      	movs	r3, #11
 8000a76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481e      	ldr	r0, [pc, #120]	; (8000af8 <MX_GPIO_Init+0x1fc>)
 8000a80:	f001 fe80 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a84:	2340      	movs	r3, #64	; 0x40
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4818      	ldr	r0, [pc, #96]	; (8000afc <MX_GPIO_Init+0x200>)
 8000a9c:	f001 fe72 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4812      	ldr	r0, [pc, #72]	; (8000afc <MX_GPIO_Init+0x200>)
 8000ab4:	f001 fe66 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ab8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aca:	230b      	movs	r3, #11
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4809      	ldr	r0, [pc, #36]	; (8000afc <MX_GPIO_Init+0x200>)
 8000ad6:	f001 fe55 	bl	8002784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2028      	movs	r0, #40	; 0x28
 8000ae0:	f001 fd87 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae4:	2028      	movs	r0, #40	; 0x28
 8000ae6:	f001 fda0 	bl	800262a <HAL_NVIC_EnableIRQ>

}
 8000aea:	bf00      	nop
 8000aec:	3738      	adds	r7, #56	; 0x38
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40021800 	.word	0x40021800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40021400 	.word	0x40021400

08000b0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b12:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <MX_I2C1_Init+0x78>)
 8000b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b18:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <MX_I2C1_Init+0x7c>)
 8000b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b46:	480e      	ldr	r0, [pc, #56]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b48:	f001 fffa 	bl	8002b40 <HAL_I2C_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b52:	f000 f96f 	bl	8000e34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b5a:	f002 fc01 	bl	8003360 <HAL_I2CEx_ConfigAnalogFilter>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b64:	f000 f966 	bl	8000e34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b6c:	f002 fc43 	bl	80033f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b76:	f000 f95d 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000500 	.word	0x20000500
 8000b84:	40005400 	.word	0x40005400
 8000b88:	20303e5d 	.word	0x20303e5d

08000b8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <HAL_I2C_MspInit+0x8c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d130      	bne.n	8000c10 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_I2C_MspInit+0x90>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a1a      	ldr	r2, [pc, #104]	; (8000c1c <HAL_I2C_MspInit+0x90>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_I2C_MspInit+0x90>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000bc6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bcc:	2312      	movs	r3, #18
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	480f      	ldr	r0, [pc, #60]	; (8000c20 <HAL_I2C_MspInit+0x94>)
 8000be4:	f001 fdce 	bl	8002784 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_I2C_MspInit+0x90>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <HAL_I2C_MspInit+0x90>)
 8000bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_I2C_MspInit+0x90>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	201f      	movs	r0, #31
 8000c06:	f001 fcf4 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c0a:	201f      	movs	r0, #31
 8000c0c:	f001 fd0d 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */
extern uint16_t WS9527_Reading;
extern uint16_t positions;
extern uint8_t button;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	WS9527_GetReadings(hadc);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fd0f 	bl	8000650 <WS9527_GetReadings>
	QE_CheckPosition();
 8000c32:	f7ff fe29 	bl	8000888 <QE_CheckPosition>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d102      	bne.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0x18>
		/* TIM3 is set with the frequency of 1000 Hz (period of 1 ms) */
		WS9527_StartReadings();
 8000c52:	f7ff fcf3 	bl	800063c <WS9527_StartReadings>
	else if (htim->Instance == TIM4) {
			/* TIM4 is set with the frequency of 1 Hz (period of 1 s) */
			UART_TransmitData(WS9527_Reading);
			display_measurements(WS9527_Reading);
	}
}
 8000c56:	e00e      	b.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim->Instance == TIM4) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d109      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x36>
			UART_TransmitData(WS9527_Reading);
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f8ea 	bl	8000e40 <UART_TransmitData>
			display_measurements(WS9527_Reading);
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fddb 	bl	800082c <display_measurements>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40000400 	.word	0x40000400
 8000c84:	40000800 	.word	0x40000800
 8000c88:	200004b6 	.word	0x200004b6

08000c8c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c9c:	d101      	bne.n	8000ca2 <HAL_GPIO_EXTI_Callback+0x16>
		switchHandler();
 8000c9e:	f7ff fe0d 	bl	80008bc <switchHandler>
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb0:	f000 fe9b 	bl	80019ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb4:	f000 f822 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 8000cb8:	f000 fc44 	bl	8001544 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cbc:	f000 fc90 	bl	80015e0 <MX_TIM4_Init>
  MX_GPIO_Init();
 8000cc0:	f7ff fe1c 	bl	80008fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cc4:	f000 fd62 	bl	800178c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000cc8:	f7ff fcfa 	bl	80006c0 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ccc:	f000 fdda 	bl	8001884 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000cd0:	f7ff ff1c 	bl	8000b0c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000cd4:	f000 fbdc 	bl	8001490 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	splash();
 8000cd8:	f7ff fd8c 	bl	80007f4 <splash>
	HAL_TIM_Base_Start_IT(&htim3);
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <main+0x48>)
 8000cde:	f003 feaf 	bl	8004a40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <main+0x4c>)
 8000ce4:	f003 feac 	bl	8004a40 <HAL_TIM_Base_Start_IT>
	WS9527_Initialize();
 8000ce8:	f7ff fc9e 	bl	8000628 <WS9527_Initialize>
	QE_Initialize();
 8000cec:	f7ff fdc2 	bl	8000874 <QE_Initialize>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000cf0:	e7fe      	b.n	8000cf0 <main+0x44>
 8000cf2:	bf00      	nop
 8000cf4:	2000059c 	.word	0x2000059c
 8000cf8:	20000550 	.word	0x20000550

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0b8      	sub	sp, #224	; 0xe0
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d06:	2234      	movs	r2, #52	; 0x34
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f006 f842 	bl	8006d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	2290      	movs	r2, #144	; 0x90
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f006 f833 	bl	8006d94 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d2e:	f002 fcf7 	bl	8003720 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <SystemClock_Config+0x12c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a3c      	ldr	r2, [pc, #240]	; (8000e28 <SystemClock_Config+0x12c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	; (8000e28 <SystemClock_Config+0x12c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d4a:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <SystemClock_Config+0x130>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d52:	4a36      	ldr	r2, [pc, #216]	; (8000e2c <SystemClock_Config+0x130>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <SystemClock_Config+0x130>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d82:	2304      	movs	r3, #4
 8000d84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d88:	2360      	movs	r3, #96	; 0x60
 8000d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d94:	2304      	movs	r3, #4
 8000d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fd1b 	bl	80037e0 <HAL_RCC_OscConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000db0:	f000 f840 	bl	8000e34 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000db4:	f002 fcc4 	bl	8003740 <HAL_PWREx_EnableOverDrive>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000dbe:	f000 f839 	bl	8000e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000de2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000de6:	2103      	movs	r1, #3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 ffa7 	bl	8003d3c <HAL_RCC_ClockConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000df4:	f000 f81e 	bl	8000e34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <SystemClock_Config+0x134>)
 8000dfa:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 f996 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000e1a:	f000 f80b 	bl	8000e34 <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	37e0      	adds	r7, #224	; 0xe0
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000
 8000e30:	00204100 	.word	0x00204100

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <UART_TransmitData>:
/* the UART port is hardcoded as UART3 for simplicity */

#include "messages.h"

void UART_TransmitData(uint16_t reading) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
	char json_data[25];
	sprintf(json_data, "{ \"moisture\" : \"%03d\" }\r\n", reading);
 8000e4a:	88fa      	ldrh	r2, [r7, #6]
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <UART_TransmitData+0x30>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f005 ffa6 	bl	8006da4 <siprintf>

	HAL_UART_Transmit(&huart3, (uint8_t*) json_data, sizeof(json_data) - 1,
 8000e58:	f107 010c 	add.w	r1, r7, #12
 8000e5c:	2364      	movs	r3, #100	; 0x64
 8000e5e:	2218      	movs	r2, #24
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <UART_TransmitData+0x34>)
 8000e62:	f004 fc05 	bl	8005670 <HAL_UART_Transmit>
			100);
}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	; 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	080075e8 	.word	0x080075e8
 8000e74:	20000634 	.word	0x20000634

08000e78 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2178      	movs	r1, #120	; 0x78
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <ssd1306_WriteCommand+0x2c>)
 8000ea8:	f001 feda 	bl	8002c60 <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000500 	.word	0x20000500

08000eb8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eca:	9202      	str	r2, [sp, #8]
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2240      	movs	r2, #64	; 0x40
 8000ed6:	2178      	movs	r1, #120	; 0x78
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <ssd1306_WriteData+0x30>)
 8000eda:	f001 fec1 	bl	8002c60 <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000500 	.word	0x20000500

08000eec <ssd1306_Init>:
	}
	return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000ef0:	f7ff ffc2 	bl	8000e78 <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f000 fdd5 	bl	8001aa4 <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f9da 	bl	80012b4 <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f00:	2020      	movs	r0, #32
 8000f02:	f7ff ffc1 	bl	8000e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff ffbe 	bl	8000e88 <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f0c:	20b0      	movs	r0, #176	; 0xb0
 8000f0e:	f7ff ffbb 	bl	8000e88 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000f12:	20c8      	movs	r0, #200	; 0xc8
 8000f14:	f7ff ffb8 	bl	8000e88 <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff ffb5 	bl	8000e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000f1e:	2010      	movs	r0, #16
 8000f20:	f7ff ffb2 	bl	8000e88 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000f24:	2040      	movs	r0, #64	; 0x40
 8000f26:	f7ff ffaf 	bl	8000e88 <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 8000f2a:	20ff      	movs	r0, #255	; 0xff
 8000f2c:	f000 f9ae 	bl	800128c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f30:	20a1      	movs	r0, #161	; 0xa1
 8000f32:	f7ff ffa9 	bl	8000e88 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 8000f36:	20a6      	movs	r0, #166	; 0xa6
 8000f38:	f7ff ffa6 	bl	8000e88 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f3c:	20a8      	movs	r0, #168	; 0xa8
 8000f3e:	f7ff ffa3 	bl	8000e88 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 8000f42:	203f      	movs	r0, #63	; 0x3f
 8000f44:	f7ff ffa0 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f48:	20a4      	movs	r0, #164	; 0xa4
 8000f4a:	f7ff ff9d 	bl	8000e88 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000f4e:	20d3      	movs	r0, #211	; 0xd3
 8000f50:	f7ff ff9a 	bl	8000e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff ff97 	bl	8000e88 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f5a:	20d5      	movs	r0, #213	; 0xd5
 8000f5c:	f7ff ff94 	bl	8000e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000f60:	20f0      	movs	r0, #240	; 0xf0
 8000f62:	f7ff ff91 	bl	8000e88 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000f66:	20d9      	movs	r0, #217	; 0xd9
 8000f68:	f7ff ff8e 	bl	8000e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000f6c:	2022      	movs	r0, #34	; 0x22
 8000f6e:	f7ff ff8b 	bl	8000e88 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000f72:	20da      	movs	r0, #218	; 0xda
 8000f74:	f7ff ff88 	bl	8000e88 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 8000f78:	2012      	movs	r0, #18
 8000f7a:	f7ff ff85 	bl	8000e88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000f7e:	20db      	movs	r0, #219	; 0xdb
 8000f80:	f7ff ff82 	bl	8000e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000f84:	2020      	movs	r0, #32
 8000f86:	f7ff ff7f 	bl	8000e88 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000f8a:	208d      	movs	r0, #141	; 0x8d
 8000f8c:	f7ff ff7c 	bl	8000e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000f90:	2014      	movs	r0, #20
 8000f92:	f7ff ff79 	bl	8000e88 <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000f96:	2001      	movs	r0, #1
 8000f98:	f000 f98c 	bl	80012b4 <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 f80f 	bl	8000fc0 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000fa2:	f000 f831 	bl	8001008 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <ssd1306_Init+0xd0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <ssd1306_Init+0xd0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000fb2:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <ssd1306_Init+0xd0>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	711a      	strb	r2, [r3, #4]
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200004a0 	.word	0x200004a0

08000fc0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e00d      	b.n	8000fec <ssd1306_Fill+0x2c>
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <ssd1306_Fill+0x1a>
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	e000      	b.n	8000fdc <ssd1306_Fill+0x1c>
 8000fda:	21ff      	movs	r1, #255	; 0xff
 8000fdc:	4a09      	ldr	r2, [pc, #36]	; (8001004 <ssd1306_Fill+0x44>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	460a      	mov	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff2:	d3ed      	bcc.n	8000fd0 <ssd1306_Fill+0x10>
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200000a0 	.word	0x200000a0

08001008 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e016      	b.n	8001042 <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	3b50      	subs	r3, #80	; 0x50
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff34 	bl	8000e88 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff ff31 	bl	8000e88 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001026:	2010      	movs	r0, #16
 8001028:	f7ff ff2e 	bl	8000e88 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	01db      	lsls	r3, r3, #7
 8001030:	4a08      	ldr	r2, [pc, #32]	; (8001054 <ssd1306_UpdateScreen+0x4c>)
 8001032:	4413      	add	r3, r2
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff3e 	bl	8000eb8 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	3301      	adds	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b07      	cmp	r3, #7
 8001046:	d9e5      	bls.n	8001014 <ssd1306_UpdateScreen+0xc>
	}
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000a0 	.word	0x200000a0

08001058 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	460b      	mov	r3, r1
 8001064:	71bb      	strb	r3, [r7, #6]
 8001066:	4613      	mov	r3, r2
 8001068:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db3d      	blt.n	80010ee <ssd1306_DrawPixel+0x96>
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	2b3f      	cmp	r3, #63	; 0x3f
 8001076:	d83a      	bhi.n	80010ee <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 8001078:	797b      	ldrb	r3, [r7, #5]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d11a      	bne.n	80010b4 <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	b2d8      	uxtb	r0, r3
 8001086:	4603      	mov	r3, r0
 8001088:	01db      	lsls	r3, r3, #7
 800108a:	4413      	add	r3, r2
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <ssd1306_DrawPixel+0xa4>)
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	b25a      	sxtb	r2, r3
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	2101      	movs	r1, #1
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b259      	sxtb	r1, r3
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	4603      	mov	r3, r0
 80010a8:	01db      	lsls	r3, r3, #7
 80010aa:	4413      	add	r3, r2
 80010ac:	b2c9      	uxtb	r1, r1
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <ssd1306_DrawPixel+0xa4>)
 80010b0:	54d1      	strb	r1, [r2, r3]
 80010b2:	e01d      	b.n	80010f0 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	b2d8      	uxtb	r0, r3
 80010bc:	4603      	mov	r3, r0
 80010be:	01db      	lsls	r3, r3, #7
 80010c0:	4413      	add	r3, r2
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <ssd1306_DrawPixel+0xa4>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	4013      	ands	r3, r2
 80010dc:	b259      	sxtb	r1, r3
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	4603      	mov	r3, r0
 80010e2:	01db      	lsls	r3, r3, #7
 80010e4:	4413      	add	r3, r2
 80010e6:	b2c9      	uxtb	r1, r1
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <ssd1306_DrawPixel+0xa4>)
 80010ea:	54d1      	strb	r1, [r2, r3]
 80010ec:	e000      	b.n	80010f0 <ssd1306_DrawPixel+0x98>
		return;
 80010ee:	bf00      	nop
	}
}
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200000a0 	.word	0x200000a0

08001100 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	4604      	mov	r4, r0
 8001108:	1d38      	adds	r0, r7, #4
 800110a:	e880 0006 	stmia.w	r0, {r1, r2}
 800110e:	461a      	mov	r2, r3
 8001110:	4623      	mov	r3, r4
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	4613      	mov	r3, r2
 8001116:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b1f      	cmp	r3, #31
 800111c:	d902      	bls.n	8001124 <ssd1306_WriteChar+0x24>
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b7e      	cmp	r3, #126	; 0x7e
 8001122:	d901      	bls.n	8001128 <ssd1306_WriteChar+0x28>
		return 0;
 8001124:	2300      	movs	r3, #0
 8001126:	e06d      	b.n	8001204 <ssd1306_WriteChar+0x104>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <ssd1306_WriteChar+0x10c>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	793b      	ldrb	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	2b80      	cmp	r3, #128	; 0x80
 8001134:	dc06      	bgt.n	8001144 <ssd1306_WriteChar+0x44>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight)) {
 8001136:	4b35      	ldr	r3, [pc, #212]	; (800120c <ssd1306_WriteChar+0x10c>)
 8001138:	885b      	ldrh	r3, [r3, #2]
 800113a:	461a      	mov	r2, r3
 800113c:	797b      	ldrb	r3, [r7, #5]
 800113e:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001140:	2b40      	cmp	r3, #64	; 0x40
 8001142:	dd01      	ble.n	8001148 <ssd1306_WriteChar+0x48>
		// Not enough space on current line
		return 0;
 8001144:	2300      	movs	r3, #0
 8001146:	e05d      	b.n	8001204 <ssd1306_WriteChar+0x104>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++) {
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	e04c      	b.n	80011e8 <ssd1306_WriteChar+0xe8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	3b20      	subs	r3, #32
 8001154:	7979      	ldrb	r1, [r7, #5]
 8001156:	fb01 f303 	mul.w	r3, r1, r3
 800115a:	4619      	mov	r1, r3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	440b      	add	r3, r1
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	e034      	b.n	80011d8 <ssd1306_WriteChar+0xd8>
			if ((b << j) & 0x8000) {
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d012      	beq.n	80011a4 <ssd1306_WriteChar+0xa4>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <ssd1306_WriteChar+0x10c>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4413      	add	r3, r2
 800118a:	b2d8      	uxtb	r0, r3
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <ssd1306_WriteChar+0x10c>)
 800118e:	885b      	ldrh	r3, [r3, #2]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4413      	add	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	7bba      	ldrb	r2, [r7, #14]
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff ff5b 	bl	8001058 <ssd1306_DrawPixel>
 80011a2:	e016      	b.n	80011d2 <ssd1306_WriteChar+0xd2>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <ssd1306_WriteChar+0x10c>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <ssd1306_WriteChar+0x10c>)
 80011b4:	885b      	ldrh	r3, [r3, #2]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	b2d9      	uxtb	r1, r3
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf0c      	ite	eq
 80011c6:	2301      	moveq	r3, #1
 80011c8:	2300      	movne	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	f7ff ff43 	bl	8001058 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	793b      	ldrb	r3, [r7, #4]
 80011da:	461a      	mov	r2, r3
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	4293      	cmp	r3, r2
 80011e0:	d3c5      	bcc.n	800116e <ssd1306_WriteChar+0x6e>
	for (i = 0; i < Font.FontHeight; i++) {
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	797b      	ldrb	r3, [r7, #5]
 80011ea:	461a      	mov	r2, r3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d3ad      	bcc.n	800114e <ssd1306_WriteChar+0x4e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <ssd1306_WriteChar+0x10c>)
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	793b      	ldrb	r3, [r7, #4]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	4b03      	ldr	r3, [pc, #12]	; (800120c <ssd1306_WriteChar+0x10c>)
 8001200:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3724      	adds	r7, #36	; 0x24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	200004a0 	.word	0x200004a0

08001210 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	1d38      	adds	r0, r7, #4
 800121a:	e880 0006 	stmia.w	r0, {r1, r2}
 800121e:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) {
 8001220:	e012      	b.n	8001248 <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	7818      	ldrb	r0, [r3, #0]
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	1d3a      	adds	r2, r7, #4
 800122a:	ca06      	ldmia	r2, {r1, r2}
 800122c:	f7ff ff68 	bl	8001100 <ssd1306_WriteChar>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d002      	beq.n	8001242 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	e008      	b.n	8001254 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3301      	adds	r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e8      	bne.n	8001222 <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	781b      	ldrb	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <ssd1306_SetCursor+0x2c>)
 8001272:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <ssd1306_SetCursor+0x2c>)
 800127a:	805a      	strh	r2, [r3, #2]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	200004a0 	.word	0x200004a0

0800128c <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 8001296:	2381      	movs	r3, #129	; 0x81
 8001298:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fdf3 	bl	8000e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fdef 	bl	8000e88 <ssd1306_WriteCommand>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 80012c4:	23af      	movs	r3, #175	; 0xaf
 80012c6:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <ssd1306_SetDisplayOn+0x38>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	715a      	strb	r2, [r3, #5]
 80012ce:	e004      	b.n	80012da <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 80012d0:	23ae      	movs	r3, #174	; 0xae
 80012d2:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <ssd1306_SetDisplayOn+0x38>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fdd3 	bl	8000e88 <ssd1306_WriteCommand>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200004a0 	.word	0x200004a0

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_MspInit+0x44>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_MspInit+0x44>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_MspInit+0x44>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_MspInit+0x44>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_MspInit+0x44>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x44>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 fb6e 	bl	8001a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <ADC_IRQHandler+0x10>)
 8001392:	f000 fcc7 	bl	8001d24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200004b8 	.word	0x200004b8

080013a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <TIM3_IRQHandler+0x10>)
 80013a6:	f003 fcf7 	bl	8004d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000059c 	.word	0x2000059c

080013b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM4_IRQHandler+0x10>)
 80013ba:	f003 fced 	bl	8004d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000550 	.word	0x20000550

080013c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <I2C1_EV_IRQHandler+0x10>)
 80013ce:	f001 fd5b 	bl	8002e88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000500 	.word	0x20000500

080013dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <USART3_IRQHandler+0x10>)
 80013e2:	f004 f9d9 	bl	8005798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000634 	.word	0x20000634

080013f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013f8:	f001 fb8a 	bl	8002b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
		errno = ENOMEM;
 8001430:	f005 fc5e 	bl	8006cf0 <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20080000 	.word	0x20080000
 8001460:	00000400 	.word	0x00000400
 8001464:	200004a8 	.word	0x200004a8
 8001468:	20000ad0 	.word	0x20000ad0

0800146c <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f005 fc78 	bl	8006d94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	463b      	mov	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <MX_TIM1_Init+0xac>)
 80014b0:	4a23      	ldr	r2, [pc, #140]	; (8001540 <MX_TIM1_Init+0xb0>)
 80014b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014b4:	4b21      	ldr	r3, [pc, #132]	; (800153c <MX_TIM1_Init+0xac>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <MX_TIM1_Init+0xac>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 403;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_TIM1_Init+0xac>)
 80014c2:	f240 1293 	movw	r2, #403	; 0x193
 80014c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <MX_TIM1_Init+0xac>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_TIM1_Init+0xac>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_TIM1_Init+0xac>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014da:	2303      	movs	r3, #3
 80014dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014e2:	2301      	movs	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014f2:	2301      	movs	r3, #1
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	4619      	mov	r1, r3
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_TIM1_Init+0xac>)
 8001506:	f003 fb13 	bl	8004b30 <HAL_TIM_Encoder_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001510:	f7ff fc90 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_TIM1_Init+0xac>)
 8001526:	f003 ffa9 	bl	800547c <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001530:	f7ff fc80 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3730      	adds	r7, #48	; 0x30
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200005e8 	.word	0x200005e8
 8001540:	40010000 	.word	0x40010000

08001544 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_TIM3_Init+0x94>)
 8001564:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <MX_TIM3_Init+0x98>)
 8001566:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <MX_TIM3_Init+0x94>)
 800156a:	225f      	movs	r2, #95	; 0x5f
 800156c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_TIM3_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <MX_TIM3_Init+0x94>)
 8001576:	f240 32e7 	movw	r2, #999	; 0x3e7
 800157a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_TIM3_Init+0x94>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <MX_TIM3_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <MX_TIM3_Init+0x94>)
 800158a:	f003 fa01 	bl	8004990 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001594:	f7ff fc4e 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	4619      	mov	r1, r3
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <MX_TIM3_Init+0x94>)
 80015a6:	f003 fd17 	bl	8004fd8 <HAL_TIM_ConfigClockSource>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015b0:	f7ff fc40 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_TIM3_Init+0x94>)
 80015c2:	f003 ff5b 	bl	800547c <HAL_TIMEx_MasterConfigSynchronization>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015cc:	f7ff fc32 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000059c 	.word	0x2000059c
 80015dc:	40000400 	.word	0x40000400

080015e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <MX_TIM4_Init+0x98>)
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <MX_TIM4_Init+0x9c>)
 8001602:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9599;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_TIM4_Init+0x98>)
 8001606:	f242 527f 	movw	r2, #9599	; 0x257f
 800160a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_TIM4_Init+0x98>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_TIM4_Init+0x98>)
 8001614:	f242 720f 	movw	r2, #9999	; 0x270f
 8001618:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_TIM4_Init+0x98>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_TIM4_Init+0x98>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001626:	4814      	ldr	r0, [pc, #80]	; (8001678 <MX_TIM4_Init+0x98>)
 8001628:	f003 f9b2 	bl	8004990 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001632:	f7ff fbff 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_TIM4_Init+0x98>)
 8001644:	f003 fcc8 	bl	8004fd8 <HAL_TIM_ConfigClockSource>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800164e:	f7ff fbf1 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <MX_TIM4_Init+0x98>)
 8001660:	f003 ff0c 	bl	800547c <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800166a:	f7ff fbe3 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3720      	adds	r7, #32
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000550 	.word	0x20000550
 800167c:	40000800 	.word	0x40000800

08001680 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_TIM_Encoder_MspInit+0x7c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d128      	bne.n	80016f4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_TIM_Encoder_MspInit+0x80>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <HAL_TIM_Encoder_MspInit+0x80>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_TIM_Encoder_MspInit+0x80>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_TIM_Encoder_MspInit+0x80>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_TIM_Encoder_MspInit+0x80>)
 80016c0:	f043 0310 	orr.w	r3, r3, #16
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_TIM_Encoder_MspInit+0x80>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80016d2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <HAL_TIM_Encoder_MspInit+0x84>)
 80016f0:	f001 f848 	bl	8002784 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40010000 	.word	0x40010000
 8001700:	40023800 	.word	0x40023800
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <HAL_TIM_Base_MspInit+0x78>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d114      	bne.n	8001744 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_TIM_Base_MspInit+0x7c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_TIM_Base_MspInit+0x7c>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <HAL_TIM_Base_MspInit+0x7c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	201d      	movs	r0, #29
 8001738:	f000 ff5b 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800173c:	201d      	movs	r0, #29
 800173e:	f000 ff74 	bl	800262a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001742:	e018      	b.n	8001776 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <HAL_TIM_Base_MspInit+0x80>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d113      	bne.n	8001776 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_TIM_Base_MspInit+0x7c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <HAL_TIM_Base_MspInit+0x7c>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_TIM_Base_MspInit+0x7c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	201e      	movs	r0, #30
 800176c:	f000 ff41 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001770:	201e      	movs	r0, #30
 8001772:	f000 ff5a 	bl	800262a <HAL_NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40000400 	.word	0x40000400
 8001784:	40023800 	.word	0x40023800
 8001788:	40000800 	.word	0x40000800

0800178c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_USART3_UART_Init+0x58>)
 8001792:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <MX_USART3_UART_Init+0x5c>)
 8001794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <MX_USART3_UART_Init+0x58>)
 8001798:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800179c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_USART3_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_USART3_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_USART3_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_USART3_UART_Init+0x58>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <MX_USART3_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_USART3_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <MX_USART3_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_USART3_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_USART3_UART_Init+0x58>)
 80017d0:	f003 ff00 	bl	80055d4 <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017da:	f7ff fb2b 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000634 	.word	0x20000634
 80017e8:	40004800 	.word	0x40004800

080017ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <HAL_UART_MspInit+0x8c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d130      	bne.n	8001870 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_UART_MspInit+0x90>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a1a      	ldr	r2, [pc, #104]	; (800187c <HAL_UART_MspInit+0x90>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_UART_MspInit+0x90>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_UART_MspInit+0x90>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a14      	ldr	r2, [pc, #80]	; (800187c <HAL_UART_MspInit+0x90>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_UART_MspInit+0x90>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800183e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001850:	2307      	movs	r3, #7
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4809      	ldr	r0, [pc, #36]	; (8001880 <HAL_UART_MspInit+0x94>)
 800185c:	f000 ff92 	bl	8002784 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2027      	movs	r0, #39	; 0x27
 8001866:	f000 fec4 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800186a:	2027      	movs	r0, #39	; 0x27
 800186c:	f000 fedd 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40004800 	.word	0x40004800
 800187c:	40023800 	.word	0x40023800
 8001880:	40020c00 	.word	0x40020c00

08001884 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800188a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800188e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001892:	2206      	movs	r2, #6
 8001894:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001898:	2202      	movs	r2, #2
 800189a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018a4:	2202      	movs	r2, #2
 80018a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018bc:	2201      	movs	r2, #1
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018c8:	f001 fde1 	bl	800348e <HAL_PCD_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80018d2:	f7ff faaf 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200006b8 	.word	0x200006b8

080018e0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001900:	d141      	bne.n	8001986 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_PCD_MspInit+0xb0>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_PCD_MspInit+0xb0>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_PCD_MspInit+0xb0>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800191a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800192c:	230a      	movs	r3, #10
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4817      	ldr	r0, [pc, #92]	; (8001994 <HAL_PCD_MspInit+0xb4>)
 8001938:	f000 ff24 	bl	8002784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800193c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4810      	ldr	r0, [pc, #64]	; (8001994 <HAL_PCD_MspInit+0xb4>)
 8001952:	f000 ff17 	bl	8002784 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_PCD_MspInit+0xb0>)
 8001958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195a:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_PCD_MspInit+0xb0>)
 800195c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001960:	6353      	str	r3, [r2, #52]	; 0x34
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_PCD_MspInit+0xb0>)
 8001964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_PCD_MspInit+0xb0>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_PCD_MspInit+0xb0>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_PCD_MspInit+0xb0>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000

08001998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199e:	490e      	ldr	r1, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b4:	4c0b      	ldr	r4, [pc, #44]	; (80019e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019c2:	f7ff fd53 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c6:	f005 f999 	bl	8006cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ca:	f7ff f96f 	bl	8000cac <main>
  bx  lr    
 80019ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80019dc:	08007dcc 	.word	0x08007dcc
  ldr r2, =_sbss
 80019e0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80019e4:	20000ad0 	.word	0x20000ad0

080019e8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <CAN1_RX0_IRQHandler>

080019ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ee:	2003      	movs	r0, #3
 80019f0:	f000 fdf4 	bl	80025dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f4:	2000      	movs	r0, #0
 80019f6:	f000 f805 	bl	8001a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fa:	f7ff fc79 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_InitTick+0x54>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_InitTick+0x58>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fe0f 	bl	8002646 <HAL_SYSTICK_Config>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00e      	b.n	8001a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b0f      	cmp	r3, #15
 8001a36:	d80a      	bhi.n	8001a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f000 fdd7 	bl	80025f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a44:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <HAL_InitTick+0x5c>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2000000c 	.word	0x2000000c
 8001a5c:	20000014 	.word	0x20000014
 8001a60:	20000010 	.word	0x20000010

08001a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x20>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x24>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_IncTick+0x24>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000014 	.word	0x20000014
 8001a88:	20000abc 	.word	0x20000abc

08001a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_GetTick+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000abc 	.word	0x20000abc

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff ffee 	bl	8001a8c <HAL_GetTick>
 8001ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d005      	beq.n	8001aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_Delay+0x44>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aca:	bf00      	nop
 8001acc:	f7ff ffde 	bl	8001a8c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d8f7      	bhi.n	8001acc <HAL_Delay+0x28>
  {
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000014 	.word	0x20000014

08001aec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e031      	b.n	8001b66 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe fe2a 	bl	8000764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d116      	bne.n	8001b58 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_ADC_Init+0x84>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	f043 0202 	orr.w	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fb7a 	bl	8002234 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
 8001b56:	e001      	b.n	8001b5c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	ffffeefd 	.word	0xffffeefd

08001b74 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_Start_IT+0x1a>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e0b5      	b.n	8001cfa <HAL_ADC_Start_IT+0x186>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d018      	beq.n	8001bd6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001bb4:	4b54      	ldr	r3, [pc, #336]	; (8001d08 <HAL_ADC_Start_IT+0x194>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <HAL_ADC_Start_IT+0x198>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0c9a      	lsrs	r2, r3, #18
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d17d      	bne.n	8001ce0 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be8:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <HAL_ADC_Start_IT+0x19c>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c1e:	d106      	bne.n	8001c2e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	f023 0206 	bic.w	r2, r3, #6
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	645a      	str	r2, [r3, #68]	; 0x44
 8001c2c:	e002      	b.n	8001c34 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c44:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_ADC_Start_IT+0x1a0>)
 8001c52:	430b      	orrs	r3, r1
 8001c54:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c56:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <HAL_ADC_Start_IT+0x1a4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10f      	bne.n	8001c82 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d143      	bne.n	8001cf8 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	e03a      	b.n	8001cf8 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a25      	ldr	r2, [pc, #148]	; (8001d1c <HAL_ADC_Start_IT+0x1a8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d10e      	bne.n	8001caa <HAL_ADC_Start_IT+0x136>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d107      	bne.n	8001caa <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ca8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_ADC_Start_IT+0x1a4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d120      	bne.n	8001cf8 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_ADC_Start_IT+0x1ac>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_ADC_Start_IT+0x184>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d114      	bne.n	8001cf8 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	e00b      	b.n	8001cf8 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f043 0210 	orr.w	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	2000000c 	.word	0x2000000c
 8001d0c:	431bde83 	.word	0x431bde83
 8001d10:	fffff8fe 	.word	0xfffff8fe
 8001d14:	04000020 	.word	0x04000020
 8001d18:	40012300 	.word	0x40012300
 8001d1c:	40012000 	.word	0x40012000
 8001d20:	40012200 	.word	0x40012200

08001d24 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d049      	beq.n	8001dee <HAL_ADC_IRQHandler+0xca>
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d046      	beq.n	8001dee <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d12b      	bne.n	8001dde <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d127      	bne.n	8001dde <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d119      	bne.n	8001dde <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0220 	bic.w	r2, r2, #32
 8001db8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f043 0201 	orr.w	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe ff20 	bl	8000c24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0212 	mvn.w	r2, #18
 8001dec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d057      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x190>
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d054      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d105      	bne.n	8001e22 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d139      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d12b      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d124      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d11d      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d119      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d105      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fabf 	bl	8002428 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f06f 020c 	mvn.w	r2, #12
 8001eb2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d017      	beq.n	8001efa <HAL_ADC_IRQHandler+0x1d6>
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d014      	beq.n	8001efa <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10d      	bne.n	8001efa <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f837 	bl	8001f5e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0201 	mvn.w	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f08:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x218>
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d012      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f043 0202 	orr.w	r2, r3, #2
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f06f 0220 	mvn.w	r2, #32
 8001f2a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f820 	bl	8001f72 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f06f 0220 	mvn.w	r2, #32
 8001f3a:	601a      	str	r2, [r3, #0]
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1c>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e136      	b.n	8002212 <HAL_ADC_ConfigChannel+0x28a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b09      	cmp	r3, #9
 8001fb2:	d93a      	bls.n	800202a <HAL_ADC_ConfigChannel+0xa2>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fbc:	d035      	beq.n	800202a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68d9      	ldr	r1, [r3, #12]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3b1e      	subs	r3, #30
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a8d      	ldr	r2, [pc, #564]	; (8002220 <HAL_ADC_ConfigChannel+0x298>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d10a      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68d9      	ldr	r1, [r3, #12]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	061a      	lsls	r2, r3, #24
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002002:	e035      	b.n	8002070 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68d9      	ldr	r1, [r3, #12]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	4618      	mov	r0, r3
 8002016:	4603      	mov	r3, r0
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4403      	add	r3, r0
 800201c:	3b1e      	subs	r3, #30
 800201e:	409a      	lsls	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002028:	e022      	b.n	8002070 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6919      	ldr	r1, [r3, #16]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	2207      	movs	r2, #7
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43da      	mvns	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	400a      	ands	r2, r1
 800204c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6919      	ldr	r1, [r3, #16]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	4618      	mov	r0, r3
 8002060:	4603      	mov	r3, r0
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4403      	add	r3, r0
 8002066:	409a      	lsls	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b06      	cmp	r3, #6
 8002076:	d824      	bhi.n	80020c2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	3b05      	subs	r3, #5
 800208a:	221f      	movs	r2, #31
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43da      	mvns	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	400a      	ands	r2, r1
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	3b05      	subs	r3, #5
 80020b4:	fa00 f203 	lsl.w	r2, r0, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	635a      	str	r2, [r3, #52]	; 0x34
 80020c0:	e04c      	b.n	800215c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d824      	bhi.n	8002114 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	3b23      	subs	r3, #35	; 0x23
 80020dc:	221f      	movs	r2, #31
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	400a      	ands	r2, r1
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3b23      	subs	r3, #35	; 0x23
 8002106:	fa00 f203 	lsl.w	r2, r0, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
 8002112:	e023      	b.n	800215c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	3b41      	subs	r3, #65	; 0x41
 8002126:	221f      	movs	r2, #31
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43da      	mvns	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	400a      	ands	r2, r1
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b29b      	uxth	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	3b41      	subs	r3, #65	; 0x41
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a30      	ldr	r2, [pc, #192]	; (8002224 <HAL_ADC_ConfigChannel+0x29c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10a      	bne.n	800217c <HAL_ADC_ConfigChannel+0x1f4>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800216e:	d105      	bne.n	800217c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_ADC_ConfigChannel+0x2a0>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <HAL_ADC_ConfigChannel+0x2a0>)
 8002176:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800217a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a28      	ldr	r2, [pc, #160]	; (8002224 <HAL_ADC_ConfigChannel+0x29c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10f      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x21e>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b12      	cmp	r3, #18
 800218c:	d10b      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800218e:	4b26      	ldr	r3, [pc, #152]	; (8002228 <HAL_ADC_ConfigChannel+0x2a0>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a25      	ldr	r2, [pc, #148]	; (8002228 <HAL_ADC_ConfigChannel+0x2a0>)
 8002194:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002198:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <HAL_ADC_ConfigChannel+0x2a0>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4a22      	ldr	r2, [pc, #136]	; (8002228 <HAL_ADC_ConfigChannel+0x2a0>)
 80021a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <HAL_ADC_ConfigChannel+0x29c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d12b      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x280>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1a      	ldr	r2, [pc, #104]	; (8002220 <HAL_ADC_ConfigChannel+0x298>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d003      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x23a>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b11      	cmp	r3, #17
 80021c0:	d122      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_ADC_ConfigChannel+0x2a0>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_ADC_ConfigChannel+0x2a0>)
 80021c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80021cc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_ADC_ConfigChannel+0x2a0>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4a15      	ldr	r2, [pc, #84]	; (8002228 <HAL_ADC_ConfigChannel+0x2a0>)
 80021d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <HAL_ADC_ConfigChannel+0x298>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d111      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_ADC_ConfigChannel+0x2a4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a11      	ldr	r2, [pc, #68]	; (8002230 <HAL_ADC_ConfigChannel+0x2a8>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0c9a      	lsrs	r2, r3, #18
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80021fa:	e002      	b.n	8002202 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3b01      	subs	r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f9      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	10000012 	.word	0x10000012
 8002224:	40012000 	.word	0x40012000
 8002228:	40012300 	.word	0x40012300
 800222c:	2000000c 	.word	0x2000000c
 8002230:	431bde83 	.word	0x431bde83

08002234 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800223c:	4b78      	ldr	r3, [pc, #480]	; (8002420 <ADC_Init+0x1ec>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a77      	ldr	r2, [pc, #476]	; (8002420 <ADC_Init+0x1ec>)
 8002242:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002246:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002248:	4b75      	ldr	r3, [pc, #468]	; (8002420 <ADC_Init+0x1ec>)
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4973      	ldr	r1, [pc, #460]	; (8002420 <ADC_Init+0x1ec>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	021a      	lsls	r2, r3, #8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002288:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	4a58      	ldr	r2, [pc, #352]	; (8002424 <ADC_Init+0x1f0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d022      	beq.n	800230e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6899      	ldr	r1, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6899      	ldr	r1, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	e00f      	b.n	800232e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800231c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800232c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0202 	bic.w	r2, r2, #2
 800233c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6899      	ldr	r1, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	005a      	lsls	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01b      	beq.n	8002394 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800237a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	3b01      	subs	r3, #1
 8002388:	035a      	lsls	r2, r3, #13
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	e007      	b.n	80023a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	3b01      	subs	r3, #1
 80023c0:	051a      	lsls	r2, r3, #20
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6899      	ldr	r1, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e6:	025a      	lsls	r2, r3, #9
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	029a      	lsls	r2, r3, #10
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	609a      	str	r2, [r3, #8]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40012300 	.word	0x40012300
 8002424:	0f000001 	.word	0x0f000001

08002428 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <__NVIC_SetPriorityGrouping+0x40>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002458:	4013      	ands	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <__NVIC_SetPriorityGrouping+0x44>)
 8002466:	4313      	orrs	r3, r2
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <__NVIC_SetPriorityGrouping+0x40>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00
 8002480:	05fa0000 	.word	0x05fa0000

08002484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <__NVIC_GetPriorityGrouping+0x18>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 0307 	and.w	r3, r3, #7
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	db0b      	blt.n	80024ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	f003 021f 	and.w	r2, r3, #31
 80024b8:	4907      	ldr	r1, [pc, #28]	; (80024d8 <__NVIC_EnableIRQ+0x38>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	2001      	movs	r0, #1
 80024c2:	fa00 f202 	lsl.w	r2, r0, r2
 80024c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000e100 	.word	0xe000e100

080024dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	db0a      	blt.n	8002506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	490c      	ldr	r1, [pc, #48]	; (8002528 <__NVIC_SetPriority+0x4c>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	440b      	add	r3, r1
 8002500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002504:	e00a      	b.n	800251c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4908      	ldr	r1, [pc, #32]	; (800252c <__NVIC_SetPriority+0x50>)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	3b04      	subs	r3, #4
 8002514:	0112      	lsls	r2, r2, #4
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	440b      	add	r3, r1
 800251a:	761a      	strb	r2, [r3, #24]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000e100 	.word	0xe000e100
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f1c3 0307 	rsb	r3, r3, #7
 800254a:	2b04      	cmp	r3, #4
 800254c:	bf28      	it	cs
 800254e:	2304      	movcs	r3, #4
 8002550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3304      	adds	r3, #4
 8002556:	2b06      	cmp	r3, #6
 8002558:	d902      	bls.n	8002560 <NVIC_EncodePriority+0x30>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3b03      	subs	r3, #3
 800255e:	e000      	b.n	8002562 <NVIC_EncodePriority+0x32>
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	401a      	ands	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43d9      	mvns	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	4313      	orrs	r3, r2
         );
}
 800258a:	4618      	mov	r0, r3
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a8:	d301      	bcc.n	80025ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00f      	b.n	80025ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <SysTick_Config+0x40>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b6:	210f      	movs	r1, #15
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
 80025bc:	f7ff ff8e 	bl	80024dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <SysTick_Config+0x40>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <SysTick_Config+0x40>)
 80025c8:	2207      	movs	r2, #7
 80025ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	e000e010 	.word	0xe000e010

080025dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ff29 	bl	800243c <__NVIC_SetPriorityGrouping>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002604:	f7ff ff3e 	bl	8002484 <__NVIC_GetPriorityGrouping>
 8002608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f7ff ff8e 	bl	8002530 <NVIC_EncodePriority>
 8002614:	4602      	mov	r2, r0
 8002616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff5d 	bl	80024dc <__NVIC_SetPriority>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff31 	bl	80024a0 <__NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffa2 	bl	8002598 <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800266c:	f7ff fa0e 	bl	8001a8c <HAL_GetTick>
 8002670:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d008      	beq.n	8002690 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e052      	b.n	8002736 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0216 	bic.w	r2, r2, #22
 800269e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <HAL_DMA_Abort+0x62>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0208 	bic.w	r2, r2, #8
 80026ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e0:	e013      	b.n	800270a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026e2:	f7ff f9d3 	bl	8001a8c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d90c      	bls.n	800270a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2203      	movs	r2, #3
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e015      	b.n	8002736 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e4      	bne.n	80026e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	223f      	movs	r2, #63	; 0x3f
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d004      	beq.n	800275c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e00c      	b.n	8002776 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2205      	movs	r2, #5
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	e175      	b.n	8002a90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027a4:	2201      	movs	r2, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	f040 8164 	bne.w	8002a8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d005      	beq.n	80027da <HAL_GPIO_Init+0x56>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d130      	bne.n	800283c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	2203      	movs	r2, #3
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 0201 	and.w	r2, r3, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b03      	cmp	r3, #3
 8002846:	d017      	beq.n	8002878 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d123      	bne.n	80028cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	08da      	lsrs	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3208      	adds	r2, #8
 800288c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	220f      	movs	r2, #15
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	08da      	lsrs	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3208      	adds	r2, #8
 80028c6:	69b9      	ldr	r1, [r7, #24]
 80028c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0203 	and.w	r2, r3, #3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80be 	beq.w	8002a8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_GPIO_Init+0x324>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	4a65      	ldr	r2, [pc, #404]	; (8002aa8 <HAL_GPIO_Init+0x324>)
 8002914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <HAL_GPIO_Init+0x324>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002926:	4a61      	ldr	r2, [pc, #388]	; (8002aac <HAL_GPIO_Init+0x328>)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a58      	ldr	r2, [pc, #352]	; (8002ab0 <HAL_GPIO_Init+0x32c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d037      	beq.n	80029c2 <HAL_GPIO_Init+0x23e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a57      	ldr	r2, [pc, #348]	; (8002ab4 <HAL_GPIO_Init+0x330>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d031      	beq.n	80029be <HAL_GPIO_Init+0x23a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a56      	ldr	r2, [pc, #344]	; (8002ab8 <HAL_GPIO_Init+0x334>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d02b      	beq.n	80029ba <HAL_GPIO_Init+0x236>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a55      	ldr	r2, [pc, #340]	; (8002abc <HAL_GPIO_Init+0x338>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d025      	beq.n	80029b6 <HAL_GPIO_Init+0x232>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a54      	ldr	r2, [pc, #336]	; (8002ac0 <HAL_GPIO_Init+0x33c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01f      	beq.n	80029b2 <HAL_GPIO_Init+0x22e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a53      	ldr	r2, [pc, #332]	; (8002ac4 <HAL_GPIO_Init+0x340>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d019      	beq.n	80029ae <HAL_GPIO_Init+0x22a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_GPIO_Init+0x344>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_GPIO_Init+0x226>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a51      	ldr	r2, [pc, #324]	; (8002acc <HAL_GPIO_Init+0x348>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00d      	beq.n	80029a6 <HAL_GPIO_Init+0x222>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a50      	ldr	r2, [pc, #320]	; (8002ad0 <HAL_GPIO_Init+0x34c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <HAL_GPIO_Init+0x21e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4f      	ldr	r2, [pc, #316]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_GPIO_Init+0x21a>
 800299a:	2309      	movs	r3, #9
 800299c:	e012      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 800299e:	230a      	movs	r3, #10
 80029a0:	e010      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029a2:	2308      	movs	r3, #8
 80029a4:	e00e      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029a6:	2307      	movs	r3, #7
 80029a8:	e00c      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029aa:	2306      	movs	r3, #6
 80029ac:	e00a      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029ae:	2305      	movs	r3, #5
 80029b0:	e008      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029b2:	2304      	movs	r3, #4
 80029b4:	e006      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029b6:	2303      	movs	r3, #3
 80029b8:	e004      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e002      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029c2:	2300      	movs	r3, #0
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	f002 0203 	and.w	r2, r2, #3
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	4093      	lsls	r3, r2
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029d4:	4935      	ldr	r1, [pc, #212]	; (8002aac <HAL_GPIO_Init+0x328>)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a06:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a0c:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a30:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a36:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	f67f ae86 	bls.w	80027a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40020800 	.word	0x40020800
 8002abc:	40020c00 	.word	0x40020c00
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40021400 	.word	0x40021400
 8002ac8:	40021800 	.word	0x40021800
 8002acc:	40021c00 	.word	0x40021c00
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40022400 	.word	0x40022400
 8002ad8:	40013c00 	.word	0x40013c00

08002adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	807b      	strh	r3, [r7, #2]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aec:	787b      	ldrb	r3, [r7, #1]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002af8:	e003      	b.n	8002b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002afa:	887b      	ldrh	r3, [r7, #2]
 8002afc:	041a      	lsls	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	619a      	str	r2, [r3, #24]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe f8ac 	bl	8000c8c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40013c00 	.word	0x40013c00

08002b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e07f      	b.n	8002c52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe f810 	bl	8000b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	e006      	b.n	8002bc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d104      	bne.n	8002bda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_I2C_Init+0x11c>)
 8002be6:	430b      	orrs	r3, r1
 8002be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69d9      	ldr	r1, [r3, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	02008000 	.word	0x02008000

08002c60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	4608      	mov	r0, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	817b      	strh	r3, [r7, #10]
 8002c72:	460b      	mov	r3, r1
 8002c74:	813b      	strh	r3, [r7, #8]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	f040 80f9 	bne.w	8002e7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_I2C_Mem_Write+0x34>
 8002c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0ed      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_I2C_Mem_Write+0x4e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e0e6      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cb6:	f7fe fee9 	bl	8001a8c <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2319      	movs	r3, #25
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f96f 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0d1      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2221      	movs	r2, #33	; 0x21
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2240      	movs	r2, #64	; 0x40
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d00:	88f8      	ldrh	r0, [r7, #6]
 8002d02:	893a      	ldrh	r2, [r7, #8]
 8002d04:	8979      	ldrh	r1, [r7, #10]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	4603      	mov	r3, r0
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f8d3 	bl	8002ebc <I2C_RequestMemoryWrite>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0a9      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2bff      	cmp	r3, #255	; 0xff
 8002d30:	d90e      	bls.n	8002d50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	22ff      	movs	r2, #255	; 0xff
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	2300      	movs	r3, #0
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fad7 	bl	80032fc <I2C_TransferConfig>
 8002d4e:	e00f      	b.n	8002d70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	8979      	ldrh	r1, [r7, #10]
 8002d62:	2300      	movs	r3, #0
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fac6 	bl	80032fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f959 	bl	800302c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e07b      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d034      	beq.n	8002e28 <HAL_I2C_Mem_Write+0x1c8>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d130      	bne.n	8002e28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f8eb 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e04d      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2bff      	cmp	r3, #255	; 0xff
 8002de8:	d90e      	bls.n	8002e08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	8979      	ldrh	r1, [r7, #10]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fa7b 	bl	80032fc <I2C_TransferConfig>
 8002e06:	e00f      	b.n	8002e28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	8979      	ldrh	r1, [r7, #10]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fa6a 	bl	80032fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d19e      	bne.n	8002d70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f938 	bl	80030ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e01a      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_I2C_Mem_Write+0x224>)
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e000      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
  }
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	fe00e800 	.word	0xfe00e800

08002e88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	68f9      	ldr	r1, [r7, #12]
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	817b      	strh	r3, [r7, #10]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	813b      	strh	r3, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	8979      	ldrh	r1, [r7, #10]
 8002edc:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <I2C_RequestMemoryWrite+0xa4>)
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fa09 	bl	80032fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	69b9      	ldr	r1, [r7, #24]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f89c 	bl	800302c <I2C_WaitOnTXISFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e02c      	b.n	8002f58 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d105      	bne.n	8002f10 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f04:	893b      	ldrh	r3, [r7, #8]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f0e:	e015      	b.n	8002f3c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f10:	893b      	ldrh	r3, [r7, #8]
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	69b9      	ldr	r1, [r7, #24]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f882 	bl	800302c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e012      	b.n	8002f58 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f32:	893b      	ldrh	r3, [r7, #8]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2200      	movs	r2, #0
 8002f44:	2180      	movs	r1, #128	; 0x80
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f830 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	80002000 	.word	0x80002000

08002f64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d103      	bne.n	8002f82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d007      	beq.n	8002fa0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	619a      	str	r2, [r3, #24]
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbc:	e022      	b.n	8003004 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d01e      	beq.n	8003004 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc6:	f7fe fd61 	bl	8001a8c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d113      	bne.n	8003004 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e00f      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	429a      	cmp	r2, r3
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	429a      	cmp	r2, r3
 8003020:	d0cd      	beq.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003038:	e02c      	b.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f870 	bl	8003124 <I2C_IsErrorOccurred>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e02a      	b.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d01e      	beq.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003056:	f7fe fd19 	bl	8001a8c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	429a      	cmp	r2, r3
 8003064:	d302      	bcc.n	800306c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d113      	bne.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e007      	b.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d1cb      	bne.n	800303a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b8:	e028      	b.n	800310c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f830 	bl	8003124 <I2C_IsErrorOccurred>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e026      	b.n	800311c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fe fcdd 	bl	8001a8c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d113      	bne.n	800310c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b20      	cmp	r3, #32
 8003118:	d1cf      	bne.n	80030ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d075      	beq.n	800323c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2210      	movs	r2, #16
 8003156:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003158:	e056      	b.n	8003208 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d052      	beq.n	8003208 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fe fc93 	bl	8001a8c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <I2C_IsErrorOccurred+0x54>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d147      	bne.n	8003208 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003182:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800318a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319a:	d12e      	bne.n	80031fa <I2C_IsErrorOccurred+0xd6>
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a2:	d02a      	beq.n	80031fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d027      	beq.n	80031fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031ba:	f7fe fc67 	bl	8001a8c <HAL_GetTick>
 80031be:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c0:	e01b      	b.n	80031fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031c2:	f7fe fc63 	bl	8001a8c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b19      	cmp	r3, #25
 80031ce:	d914      	bls.n	80031fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b20      	cmp	r3, #32
 8003206:	d1dc      	bne.n	80031c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b20      	cmp	r3, #32
 8003214:	d003      	beq.n	800321e <I2C_IsErrorOccurred+0xfa>
 8003216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800321a:	2b00      	cmp	r3, #0
 800321c:	d09d      	beq.n	800315a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800321e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2220      	movs	r2, #32
 800322c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800325e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	f043 0308 	orr.w	r3, r3, #8
 8003276:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003280:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	f043 0302 	orr.w	r3, r3, #2
 8003298:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80032aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01c      	beq.n	80032ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff fe56 	bl	8002f64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <I2C_IsErrorOccurred+0x1d4>)
 80032c4:	400b      	ands	r3, r1
 80032c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	fe00e800 	.word	0xfe00e800

080032fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	817b      	strh	r3, [r7, #10]
 800330a:	4613      	mov	r3, r2
 800330c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800330e:	897b      	ldrh	r3, [r7, #10]
 8003310:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003314:	7a7b      	ldrb	r3, [r7, #9]
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800331c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	4313      	orrs	r3, r2
 8003326:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800332a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	0d5b      	lsrs	r3, r3, #21
 8003336:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <I2C_TransferConfig+0x60>)
 800333c:	430b      	orrs	r3, r1
 800333e:	43db      	mvns	r3, r3
 8003340:	ea02 0103 	and.w	r1, r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	03ff63ff 	.word	0x03ff63ff

08003360 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b20      	cmp	r3, #32
 8003374:	d138      	bne.n	80033e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003380:	2302      	movs	r3, #2
 8003382:	e032      	b.n	80033ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2224      	movs	r2, #36	; 0x24
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	d139      	bne.n	8003480 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003416:	2302      	movs	r3, #2
 8003418:	e033      	b.n	8003482 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2224      	movs	r2, #36	; 0x24
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003448:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800348e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003490:	b08f      	sub	sp, #60	; 0x3c
 8003492:	af0a      	add	r7, sp, #40	; 0x28
 8003494:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e116      	b.n	80036ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fe fa10 	bl	80018e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2203      	movs	r2, #3
 80034c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 f970 	bl	80067c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	687e      	ldr	r6, [r7, #4]
 80034ec:	466d      	mov	r5, sp
 80034ee:	f106 0410 	add.w	r4, r6, #16
 80034f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003502:	1d33      	adds	r3, r6, #4
 8003504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003506:	6838      	ldr	r0, [r7, #0]
 8003508:	f003 f904 	bl	8006714 <USB_CoreInit>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e0d7      	b.n	80036ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f003 f95e 	bl	80067e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	e04a      	b.n	80035c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	333d      	adds	r3, #61	; 0x3d
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	333c      	adds	r3, #60	; 0x3c
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	b298      	uxth	r0, r3
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3342      	adds	r3, #66	; 0x42
 800356c:	4602      	mov	r2, r0
 800356e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	333f      	adds	r3, #63	; 0x3f
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	3344      	adds	r3, #68	; 0x44
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	3348      	adds	r3, #72	; 0x48
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	3350      	adds	r3, #80	; 0x50
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	3301      	adds	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d3af      	bcc.n	8003530 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e044      	b.n	8003660 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	3301      	adds	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	429a      	cmp	r2, r3
 8003668:	d3b5      	bcc.n	80035d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	687e      	ldr	r6, [r7, #4]
 8003672:	466d      	mov	r5, sp
 8003674:	f106 0410 	add.w	r4, r6, #16
 8003678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800367a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800367e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003680:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003684:	e885 0003 	stmia.w	r5, {r0, r1}
 8003688:	1d33      	adds	r3, r6, #4
 800368a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800368c:	6838      	ldr	r0, [r7, #0]
 800368e:	f003 f8f7 	bl	8006880 <USB_DevInit>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e014      	b.n	80036ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d102      	bne.n	80036c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f80b 	bl	80036d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 fab1 	bl	8006c2e <USB_DevDisconnect>

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080036d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_PCDEx_ActivateLPM+0x44>)
 8003708:	4313      	orrs	r3, r2
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	10000003 	.word	0x10000003

08003720 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800372a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40007000 	.word	0x40007000

08003740 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003754:	6413      	str	r3, [r2, #64]	; 0x40
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003762:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800376e:	f7fe f98d 	bl	8001a8c <HAL_GetTick>
 8003772:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003774:	e009      	b.n	800378a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003776:	f7fe f989 	bl	8001a8c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003784:	d901      	bls.n	800378a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e022      	b.n	80037d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003796:	d1ee      	bne.n	8003776 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003798:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0f      	ldr	r2, [pc, #60]	; (80037dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037a4:	f7fe f972 	bl	8001a8c <HAL_GetTick>
 80037a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037aa:	e009      	b.n	80037c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037ac:	f7fe f96e 	bl	8001a8c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ba:	d901      	bls.n	80037c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e007      	b.n	80037d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037cc:	d1ee      	bne.n	80037ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40007000 	.word	0x40007000

080037e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037e8:	2300      	movs	r3, #0
 80037ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e29b      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8087 	beq.w	8003912 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003804:	4b96      	ldr	r3, [pc, #600]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b04      	cmp	r3, #4
 800380e:	d00c      	beq.n	800382a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003810:	4b93      	ldr	r3, [pc, #588]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d112      	bne.n	8003842 <HAL_RCC_OscConfig+0x62>
 800381c:	4b90      	ldr	r3, [pc, #576]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003828:	d10b      	bne.n	8003842 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382a:	4b8d      	ldr	r3, [pc, #564]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d06c      	beq.n	8003910 <HAL_RCC_OscConfig+0x130>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d168      	bne.n	8003910 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e275      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x7a>
 800384c:	4b84      	ldr	r3, [pc, #528]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a83      	ldr	r2, [pc, #524]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	e02e      	b.n	80038b8 <HAL_RCC_OscConfig+0xd8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x9c>
 8003862:	4b7f      	ldr	r3, [pc, #508]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a7e      	ldr	r2, [pc, #504]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b7c      	ldr	r3, [pc, #496]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a7b      	ldr	r2, [pc, #492]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e01d      	b.n	80038b8 <HAL_RCC_OscConfig+0xd8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0xc0>
 8003886:	4b76      	ldr	r3, [pc, #472]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a75      	ldr	r2, [pc, #468]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 800388c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b73      	ldr	r3, [pc, #460]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a72      	ldr	r2, [pc, #456]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e00b      	b.n	80038b8 <HAL_RCC_OscConfig+0xd8>
 80038a0:	4b6f      	ldr	r3, [pc, #444]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a6e      	ldr	r2, [pc, #440]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b6c      	ldr	r3, [pc, #432]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a6b      	ldr	r2, [pc, #428]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 80038b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fe f8e4 	bl	8001a8c <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fe f8e0 	bl	8001a8c <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e229      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b61      	ldr	r3, [pc, #388]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0xe8>
 80038e6:	e014      	b.n	8003912 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fe f8d0 	bl	8001a8c <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fe f8cc 	bl	8001a8c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e215      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003902:	4b57      	ldr	r3, [pc, #348]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x110>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d069      	beq.n	80039f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800391e:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392a:	4b4d      	ldr	r3, [pc, #308]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b08      	cmp	r3, #8
 8003934:	d11c      	bne.n	8003970 <HAL_RCC_OscConfig+0x190>
 8003936:	4b4a      	ldr	r3, [pc, #296]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d116      	bne.n	8003970 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_RCC_OscConfig+0x17a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e1e9      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395a:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	493d      	ldr	r1, [pc, #244]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	e040      	b.n	80039f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d023      	beq.n	80039c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003978:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe f882 	bl	8001a8c <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398c:	f7fe f87e 	bl	8001a8c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e1c7      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399e:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4929      	ldr	r1, [pc, #164]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
 80039be:	e018      	b.n	80039f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c0:	4b27      	ldr	r3, [pc, #156]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a26      	ldr	r2, [pc, #152]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fe f85e 	bl	8001a8c <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d4:	f7fe f85a 	bl	8001a8c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1a3      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e6:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d038      	beq.n	8003a70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d019      	beq.n	8003a3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a06:	4b16      	ldr	r3, [pc, #88]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a12:	f7fe f83b 	bl	8001a8c <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1a:	f7fe f837 	bl	8001a8c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e180      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x23a>
 8003a38:	e01a      	b.n	8003a70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3e:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <HAL_RCC_OscConfig+0x280>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a46:	f7fe f821 	bl	8001a8c <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4c:	e00a      	b.n	8003a64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4e:	f7fe f81d 	bl	8001a8c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d903      	bls.n	8003a64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e166      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
 8003a60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a64:	4b92      	ldr	r3, [pc, #584]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1ee      	bne.n	8003a4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80a4 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7e:	4b8c      	ldr	r3, [pc, #560]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10d      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	4b89      	ldr	r3, [pc, #548]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	4a88      	ldr	r2, [pc, #544]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	; 0x40
 8003a96:	4b86      	ldr	r3, [pc, #536]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa6:	4b83      	ldr	r3, [pc, #524]	; (8003cb4 <HAL_RCC_OscConfig+0x4d4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d118      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ab2:	4b80      	ldr	r3, [pc, #512]	; (8003cb4 <HAL_RCC_OscConfig+0x4d4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7f      	ldr	r2, [pc, #508]	; (8003cb4 <HAL_RCC_OscConfig+0x4d4>)
 8003ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003abe:	f7fd ffe5 	bl	8001a8c <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac6:	f7fd ffe1 	bl	8001a8c <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b64      	cmp	r3, #100	; 0x64
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e12a      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad8:	4b76      	ldr	r3, [pc, #472]	; (8003cb4 <HAL_RCC_OscConfig+0x4d4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x31a>
 8003aec:	4b70      	ldr	r3, [pc, #448]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	4a6f      	ldr	r2, [pc, #444]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6713      	str	r3, [r2, #112]	; 0x70
 8003af8:	e02d      	b.n	8003b56 <HAL_RCC_OscConfig+0x376>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x33c>
 8003b02:	4b6b      	ldr	r3, [pc, #428]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	4a6a      	ldr	r2, [pc, #424]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0e:	4b68      	ldr	r3, [pc, #416]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	4a67      	ldr	r2, [pc, #412]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b14:	f023 0304 	bic.w	r3, r3, #4
 8003b18:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1a:	e01c      	b.n	8003b56 <HAL_RCC_OscConfig+0x376>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b05      	cmp	r3, #5
 8003b22:	d10c      	bne.n	8003b3e <HAL_RCC_OscConfig+0x35e>
 8003b24:	4b62      	ldr	r3, [pc, #392]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a61      	ldr	r2, [pc, #388]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b2a:	f043 0304 	orr.w	r3, r3, #4
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b30:	4b5f      	ldr	r3, [pc, #380]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	4a5e      	ldr	r2, [pc, #376]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3c:	e00b      	b.n	8003b56 <HAL_RCC_OscConfig+0x376>
 8003b3e:	4b5c      	ldr	r3, [pc, #368]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	4a5b      	ldr	r2, [pc, #364]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4a:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b50:	f023 0304 	bic.w	r3, r3, #4
 8003b54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d015      	beq.n	8003b8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5e:	f7fd ff95 	bl	8001a8c <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fd ff91 	bl	8001a8c <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e0d8      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7c:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ee      	beq.n	8003b66 <HAL_RCC_OscConfig+0x386>
 8003b88:	e014      	b.n	8003bb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8a:	f7fd ff7f 	bl	8001a8c <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fd ff7b 	bl	8001a8c <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0c2      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba8:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1ee      	bne.n	8003b92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d105      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bba:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	4a3c      	ldr	r2, [pc, #240]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80ae 	beq.w	8003d2c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bd0:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d06d      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d14b      	bne.n	8003c7c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be4:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a31      	ldr	r2, [pc, #196]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fd ff4c 	bl	8001a8c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fd ff48 	bl	8001a8c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e091      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	041b      	lsls	r3, r3, #16
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	071b      	lsls	r3, r3, #28
 8003c42:	491b      	ldr	r1, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fd ff1a 	bl	8001a8c <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fd ff16 	bl	8001a8c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e05f      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x47c>
 8003c7a:	e057      	b.n	8003d2c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0b      	ldr	r2, [pc, #44]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd ff00 	bl	8001a8c <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd fefc 	bl	8001a8c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e045      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca2:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_RCC_OscConfig+0x4d0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4b0>
 8003cae:	e03d      	b.n	8003d2c <HAL_RCC_OscConfig+0x54c>
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cb8:	4b1f      	ldr	r3, [pc, #124]	; (8003d38 <HAL_RCC_OscConfig+0x558>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d030      	beq.n	8003d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d129      	bne.n	8003d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d122      	bne.n	8003d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ce8:	4013      	ands	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d119      	bne.n	8003d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	3b01      	subs	r3, #1
 8003d02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d10f      	bne.n	8003d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d107      	bne.n	8003d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800

08003d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0d0      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d54:	4b6a      	ldr	r3, [pc, #424]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d910      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b67      	ldr	r3, [pc, #412]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 020f 	bic.w	r2, r3, #15
 8003d6a:	4965      	ldr	r1, [pc, #404]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b63      	ldr	r3, [pc, #396]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0b8      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d020      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d9c:	4b59      	ldr	r3, [pc, #356]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a58      	ldr	r2, [pc, #352]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003da2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003da6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db4:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a52      	ldr	r2, [pc, #328]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003dba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc0:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	494d      	ldr	r1, [pc, #308]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d040      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	4b47      	ldr	r3, [pc, #284]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d115      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e07f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e073      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0e:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e06b      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e1e:	4b39      	ldr	r3, [pc, #228]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f023 0203 	bic.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4936      	ldr	r1, [pc, #216]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e30:	f7fd fe2c 	bl	8001a8c <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e38:	f7fd fe28 	bl	8001a8c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e053      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	4b2d      	ldr	r3, [pc, #180]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 020c 	and.w	r2, r3, #12
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d1eb      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e60:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d210      	bcs.n	8003e90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 020f 	bic.w	r2, r3, #15
 8003e76:	4922      	ldr	r1, [pc, #136]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e032      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4916      	ldr	r1, [pc, #88]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eba:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	490e      	ldr	r1, [pc, #56]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ece:	f000 f821 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	490a      	ldr	r1, [pc, #40]	; (8003f08 <HAL_RCC_ClockConfig+0x1cc>)
 8003ee0:	5ccb      	ldrb	r3, [r1, r3]
 8003ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee6:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <HAL_RCC_ClockConfig+0x1d0>)
 8003ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_RCC_ClockConfig+0x1d4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fd88 	bl	8001a04 <HAL_InitTick>

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40023c00 	.word	0x40023c00
 8003f04:	40023800 	.word	0x40023800
 8003f08:	08007d70 	.word	0x08007d70
 8003f0c:	2000000c 	.word	0x2000000c
 8003f10:	20000010 	.word	0x20000010

08003f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	607b      	str	r3, [r7, #4]
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	2300      	movs	r3, #0
 8003f26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f2c:	4b67      	ldr	r3, [pc, #412]	; (80040cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 030c 	and.w	r3, r3, #12
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d00d      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x40>
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	f200 80bd 	bhi.w	80040b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x34>
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f46:	e0b7      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f48:	4b61      	ldr	r3, [pc, #388]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f4a:	60bb      	str	r3, [r7, #8]
      break;
 8003f4c:	e0b7      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f4e:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003f50:	60bb      	str	r3, [r7, #8]
      break;
 8003f52:	e0b4      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f54:	4b5d      	ldr	r3, [pc, #372]	; (80040cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f5c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f5e:	4b5b      	ldr	r3, [pc, #364]	; (80040cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d04d      	beq.n	8004006 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6a:	4b58      	ldr	r3, [pc, #352]	; (80040cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	461a      	mov	r2, r3
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	ea02 0800 	and.w	r8, r2, r0
 8003f82:	ea03 0901 	and.w	r9, r3, r1
 8003f86:	4640      	mov	r0, r8
 8003f88:	4649      	mov	r1, r9
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	014b      	lsls	r3, r1, #5
 8003f94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f98:	0142      	lsls	r2, r0, #5
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	ebb0 0008 	subs.w	r0, r0, r8
 8003fa2:	eb61 0109 	sbc.w	r1, r1, r9
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	018b      	lsls	r3, r1, #6
 8003fb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fb4:	0182      	lsls	r2, r0, #6
 8003fb6:	1a12      	subs	r2, r2, r0
 8003fb8:	eb63 0301 	sbc.w	r3, r3, r1
 8003fbc:	f04f 0000 	mov.w	r0, #0
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	00d9      	lsls	r1, r3, #3
 8003fc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fca:	00d0      	lsls	r0, r2, #3
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	eb12 0208 	adds.w	r2, r2, r8
 8003fd4:	eb43 0309 	adc.w	r3, r3, r9
 8003fd8:	f04f 0000 	mov.w	r0, #0
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	0259      	lsls	r1, r3, #9
 8003fe2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fe6:	0250      	lsls	r0, r2, #9
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	f7fc f972 	bl	80002e0 <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4613      	mov	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	e04a      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004006:	4b31      	ldr	r3, [pc, #196]	; (80040cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	099b      	lsrs	r3, r3, #6
 800400c:	461a      	mov	r2, r3
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	ea02 0400 	and.w	r4, r2, r0
 800401e:	ea03 0501 	and.w	r5, r3, r1
 8004022:	4620      	mov	r0, r4
 8004024:	4629      	mov	r1, r5
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	f04f 0300 	mov.w	r3, #0
 800402e:	014b      	lsls	r3, r1, #5
 8004030:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004034:	0142      	lsls	r2, r0, #5
 8004036:	4610      	mov	r0, r2
 8004038:	4619      	mov	r1, r3
 800403a:	1b00      	subs	r0, r0, r4
 800403c:	eb61 0105 	sbc.w	r1, r1, r5
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	018b      	lsls	r3, r1, #6
 800404a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800404e:	0182      	lsls	r2, r0, #6
 8004050:	1a12      	subs	r2, r2, r0
 8004052:	eb63 0301 	sbc.w	r3, r3, r1
 8004056:	f04f 0000 	mov.w	r0, #0
 800405a:	f04f 0100 	mov.w	r1, #0
 800405e:	00d9      	lsls	r1, r3, #3
 8004060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004064:	00d0      	lsls	r0, r2, #3
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	1912      	adds	r2, r2, r4
 800406c:	eb45 0303 	adc.w	r3, r5, r3
 8004070:	f04f 0000 	mov.w	r0, #0
 8004074:	f04f 0100 	mov.w	r1, #0
 8004078:	0299      	lsls	r1, r3, #10
 800407a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800407e:	0290      	lsls	r0, r2, #10
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	461a      	mov	r2, r3
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	f7fc f926 	bl	80002e0 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4613      	mov	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	3301      	adds	r3, #1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	60bb      	str	r3, [r7, #8]
      break;
 80040b6:	e002      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040ba:	60bb      	str	r3, [r7, #8]
      break;
 80040bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040be:	68bb      	ldr	r3, [r7, #8]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	00f42400 	.word	0x00f42400
 80040d4:	007a1200 	.word	0x007a1200

080040d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_RCC_GetHCLKFreq+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	2000000c 	.word	0x2000000c

080040f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040f4:	f7ff fff0 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	0a9b      	lsrs	r3, r3, #10
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4903      	ldr	r1, [pc, #12]	; (8004114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004106:	5ccb      	ldrb	r3, [r1, r3]
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40023800 	.word	0x40023800
 8004114:	08007d80 	.word	0x08007d80

08004118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800411c:	f7ff ffdc 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 8004120:	4602      	mov	r2, r0
 8004122:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	0b5b      	lsrs	r3, r3, #13
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	4903      	ldr	r1, [pc, #12]	; (800413c <HAL_RCC_GetPCLK2Freq+0x24>)
 800412e:	5ccb      	ldrb	r3, [r1, r3]
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004134:	4618      	mov	r0, r3
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40023800 	.word	0x40023800
 800413c:	08007d80 	.word	0x08007d80

08004140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d012      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004168:	4b69      	ldr	r3, [pc, #420]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4a68      	ldr	r2, [pc, #416]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004172:	6093      	str	r3, [r2, #8]
 8004174:	4b66      	ldr	r3, [pc, #408]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417c:	4964      	ldr	r1, [pc, #400]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d017      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800419a:	4b5d      	ldr	r3, [pc, #372]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	4959      	ldr	r1, [pc, #356]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b8:	d101      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80041ba:	2301      	movs	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d017      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041d6:	4b4e      	ldr	r3, [pc, #312]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	494a      	ldr	r1, [pc, #296]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f4:	d101      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004212:	2301      	movs	r3, #1
 8004214:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 808b 	beq.w	800433a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004224:	4b3a      	ldr	r3, [pc, #232]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	4a39      	ldr	r2, [pc, #228]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422e:	6413      	str	r3, [r2, #64]	; 0x40
 8004230:	4b37      	ldr	r3, [pc, #220]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800423c:	4b35      	ldr	r3, [pc, #212]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a34      	ldr	r2, [pc, #208]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004248:	f7fd fc20 	bl	8001a8c <HAL_GetTick>
 800424c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004250:	f7fd fc1c 	bl	8001a8c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e38f      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004262:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800426e:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d035      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	429a      	cmp	r2, r3
 800428a:	d02e      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800428c:	4b20      	ldr	r3, [pc, #128]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004294:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004296:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042a2:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	4a1a      	ldr	r2, [pc, #104]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042ae:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042b4:	4b16      	ldr	r3, [pc, #88]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d114      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd fbe4 	bl	8001a8c <HAL_GetTick>
 80042c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	e00a      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fd fbe0 	bl	8001a8c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e351      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0ee      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f6:	d111      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004306:	400b      	ands	r3, r1
 8004308:	4901      	ldr	r1, [pc, #4]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
 800430e:	e00b      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004310:	40023800 	.word	0x40023800
 8004314:	40007000 	.word	0x40007000
 8004318:	0ffffcff 	.word	0x0ffffcff
 800431c:	4bb3      	ldr	r3, [pc, #716]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4ab2      	ldr	r2, [pc, #712]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004322:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004326:	6093      	str	r3, [r2, #8]
 8004328:	4bb0      	ldr	r3, [pc, #704]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800432a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004334:	49ad      	ldr	r1, [pc, #692]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004336:	4313      	orrs	r3, r2
 8004338:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b00      	cmp	r3, #0
 8004344:	d010      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004346:	4ba9      	ldr	r3, [pc, #676]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434c:	4aa7      	ldr	r2, [pc, #668]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800434e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004352:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004356:	4ba5      	ldr	r3, [pc, #660]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004358:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	49a2      	ldr	r1, [pc, #648]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004374:	4b9d      	ldr	r3, [pc, #628]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004382:	499a      	ldr	r1, [pc, #616]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004396:	4b95      	ldr	r3, [pc, #596]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043a4:	4991      	ldr	r1, [pc, #580]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043b8:	4b8c      	ldr	r3, [pc, #560]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c6:	4989      	ldr	r1, [pc, #548]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043da:	4b84      	ldr	r3, [pc, #528]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	4980      	ldr	r1, [pc, #512]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043fc:	4b7b      	ldr	r3, [pc, #492]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	4978      	ldr	r1, [pc, #480]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800441e:	4b73      	ldr	r3, [pc, #460]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004424:	f023 020c 	bic.w	r2, r3, #12
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442c:	496f      	ldr	r1, [pc, #444]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004440:	4b6a      	ldr	r3, [pc, #424]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	4967      	ldr	r1, [pc, #412]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004462:	4b62      	ldr	r3, [pc, #392]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004470:	495e      	ldr	r1, [pc, #376]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004484:	4b59      	ldr	r3, [pc, #356]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	4956      	ldr	r1, [pc, #344]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80044a6:	4b51      	ldr	r3, [pc, #324]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	494d      	ldr	r1, [pc, #308]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044c8:	4b48      	ldr	r3, [pc, #288]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d6:	4945      	ldr	r1, [pc, #276]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044ea:	4b40      	ldr	r3, [pc, #256]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f8:	493c      	ldr	r1, [pc, #240]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800450c:	4b37      	ldr	r3, [pc, #220]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004512:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800451a:	4934      	ldr	r1, [pc, #208]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d011      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800452e:	4b2f      	ldr	r3, [pc, #188]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800453c:	492b      	ldr	r1, [pc, #172]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454c:	d101      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800456e:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457c:	491b      	ldr	r1, [pc, #108]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004590:	4b16      	ldr	r3, [pc, #88]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a0:	4912      	ldr	r1, [pc, #72]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c4:	4909      	ldr	r1, [pc, #36]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00f      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045d8:	4b04      	ldr	r3, [pc, #16]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e8:	e002      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800
 80045f0:	4986      	ldr	r1, [pc, #536]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004604:	4b81      	ldr	r3, [pc, #516]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800460a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004614:	497d      	ldr	r1, [pc, #500]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d006      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80d6 	beq.w	80047dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004630:	4b76      	ldr	r3, [pc, #472]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a75      	ldr	r2, [pc, #468]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800463a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463c:	f7fd fa26 	bl	8001a8c <HAL_GetTick>
 8004640:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004644:	f7fd fa22 	bl	8001a8c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e195      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004656:	4b6d      	ldr	r3, [pc, #436]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d021      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	2b00      	cmp	r3, #0
 8004674:	d11d      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004676:	4b65      	ldr	r3, [pc, #404]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004684:	4b61      	ldr	r3, [pc, #388]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468a:	0e1b      	lsrs	r3, r3, #24
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	019a      	lsls	r2, r3, #6
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	071b      	lsls	r3, r3, #28
 80046aa:	4958      	ldr	r1, [pc, #352]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d02e      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046dc:	d129      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046de:	4b4b      	ldr	r3, [pc, #300]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e4:	0c1b      	lsrs	r3, r3, #16
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046ec:	4b47      	ldr	r3, [pc, #284]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f2:	0f1b      	lsrs	r3, r3, #28
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	019a      	lsls	r2, r3, #6
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	061b      	lsls	r3, r3, #24
 800470c:	431a      	orrs	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	071b      	lsls	r3, r3, #28
 8004712:	493e      	ldr	r1, [pc, #248]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800471a:	4b3c      	ldr	r3, [pc, #240]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800471c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004720:	f023 021f 	bic.w	r2, r3, #31
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	3b01      	subs	r3, #1
 800472a:	4938      	ldr	r1, [pc, #224]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01d      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800473e:	4b33      	ldr	r3, [pc, #204]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004744:	0e1b      	lsrs	r3, r3, #24
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800474c:	4b2f      	ldr	r3, [pc, #188]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800474e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004752:	0f1b      	lsrs	r3, r3, #28
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	019a      	lsls	r2, r3, #6
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	431a      	orrs	r2, r3
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	061b      	lsls	r3, r3, #24
 800476c:	431a      	orrs	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	071b      	lsls	r3, r3, #28
 8004772:	4926      	ldr	r1, [pc, #152]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d011      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	019a      	lsls	r2, r3, #6
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	041b      	lsls	r3, r3, #16
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	071b      	lsls	r3, r3, #28
 80047a2:	491a      	ldr	r1, [pc, #104]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047aa:	4b18      	ldr	r3, [pc, #96]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a17      	ldr	r2, [pc, #92]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b6:	f7fd f969 	bl	8001a8c <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047be:	f7fd f965 	bl	8001a8c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b64      	cmp	r3, #100	; 0x64
 80047ca:	d901      	bls.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e0d8      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047d0:	4b0e      	ldr	r3, [pc, #56]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	f040 80ce 	bne.w	8004980 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a08      	ldr	r2, [pc, #32]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f0:	f7fd f94c 	bl	8001a8c <HAL_GetTick>
 80047f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047f6:	e00b      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047f8:	f7fd f948 	bl	8001a8c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b64      	cmp	r3, #100	; 0x64
 8004804:	d904      	bls.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e0bb      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004810:	4b5e      	ldr	r3, [pc, #376]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800481c:	d0ec      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800483a:	2b00      	cmp	r3, #0
 800483c:	d02e      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d12a      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004846:	4b51      	ldr	r3, [pc, #324]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004854:	4b4d      	ldr	r3, [pc, #308]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	0f1b      	lsrs	r3, r3, #28
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	019a      	lsls	r2, r3, #6
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	061b      	lsls	r3, r3, #24
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	071b      	lsls	r3, r3, #28
 800487a:	4944      	ldr	r1, [pc, #272]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004882:	4b42      	ldr	r3, [pc, #264]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004888:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	3b01      	subs	r3, #1
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	493d      	ldr	r1, [pc, #244]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d022      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b0:	d11d      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048b2:	4b36      	ldr	r3, [pc, #216]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	0e1b      	lsrs	r3, r3, #24
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048c0:	4b32      	ldr	r3, [pc, #200]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	0f1b      	lsrs	r3, r3, #28
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	019a      	lsls	r2, r3, #6
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	041b      	lsls	r3, r3, #16
 80048da:	431a      	orrs	r2, r3
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	061b      	lsls	r3, r3, #24
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	071b      	lsls	r3, r3, #28
 80048e6:	4929      	ldr	r1, [pc, #164]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d028      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048fa:	4b24      	ldr	r3, [pc, #144]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	0e1b      	lsrs	r3, r3, #24
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004908:	4b20      	ldr	r3, [pc, #128]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	0c1b      	lsrs	r3, r3, #16
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	019a      	lsls	r2, r3, #6
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	431a      	orrs	r2, r3
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	4917      	ldr	r1, [pc, #92]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004936:	4b15      	ldr	r3, [pc, #84]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800493c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	4911      	ldr	r1, [pc, #68]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0e      	ldr	r2, [pc, #56]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004958:	f7fd f898 	bl	8001a8c <HAL_GetTick>
 800495c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004960:	f7fd f894 	bl	8001a8c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e007      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800497a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800497e:	d1ef      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800

08004990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e049      	b.n	8004a36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc fea6 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 fbf4 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d001      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e054      	b.n	8004b02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a26      	ldr	r2, [pc, #152]	; (8004b10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d022      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d01d      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a22      	ldr	r2, [pc, #136]	; (8004b14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d018      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a21      	ldr	r2, [pc, #132]	; (8004b18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_TIM_Base_Start_IT+0xe0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <HAL_TIM_Base_Start_IT+0xe8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d115      	bne.n	8004aec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_TIM_Base_Start_IT+0xec>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b06      	cmp	r3, #6
 8004ad0:	d015      	beq.n	8004afe <HAL_TIM_Base_Start_IT+0xbe>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d011      	beq.n	8004afe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aea:	e008      	b.n	8004afe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e000      	b.n	8004b00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40010000 	.word	0x40010000
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40010400 	.word	0x40010400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40001800 	.word	0x40001800
 8004b2c:	00010007 	.word	0x00010007

08004b30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e08f      	b.n	8004c64 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fc fd91 	bl	8001680 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6899      	ldr	r1, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b3e      	ldr	r3, [pc, #248]	; (8004c6c <HAL_TIM_Encoder_Init+0x13c>)
 8004b72:	400b      	ands	r3, r1
 8004b74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f000 fb1b 	bl	80051bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <HAL_TIM_Encoder_Init+0x140>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_TIM_Encoder_Init+0x144>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4b2a      	ldr	r3, [pc, #168]	; (8004c78 <HAL_TIM_Encoder_Init+0x148>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	011a      	lsls	r2, r3, #4
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	031b      	lsls	r3, r3, #12
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004bfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	4313      	orrs	r3, r2
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	fffebff8 	.word	0xfffebff8
 8004c70:	fffffcfc 	.word	0xfffffcfc
 8004c74:	fffff3f3 	.word	0xfffff3f3
 8004c78:	ffff0f0f 	.word	0xffff0f0f

08004c7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ca4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d110      	bne.n	8004cce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d102      	bne.n	8004cb8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cb2:	7b7b      	ldrb	r3, [r7, #13]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d001      	beq.n	8004cbc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e069      	b.n	8004d90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ccc:	e031      	b.n	8004d32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d110      	bne.n	8004cf6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd4:	7bbb      	ldrb	r3, [r7, #14]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d102      	bne.n	8004ce0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cda:	7b3b      	ldrb	r3, [r7, #12]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d001      	beq.n	8004ce4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e055      	b.n	8004d90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cf4:	e01d      	b.n	8004d32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d108      	bne.n	8004d0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cfc:	7bbb      	ldrb	r3, [r7, #14]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d105      	bne.n	8004d0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d02:	7b7b      	ldrb	r3, [r7, #13]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d102      	bne.n	8004d0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d08:	7b3b      	ldrb	r3, [r7, #12]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d001      	beq.n	8004d12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e03e      	b.n	8004d90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <HAL_TIM_Encoder_Start+0xc4>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d008      	beq.n	8004d50 <HAL_TIM_Encoder_Start+0xd4>
 8004d3e:	e00f      	b.n	8004d60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2201      	movs	r2, #1
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fb71 	bl	8005430 <TIM_CCxChannelCmd>
      break;
 8004d4e:	e016      	b.n	8004d7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2201      	movs	r2, #1
 8004d56:	2104      	movs	r1, #4
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fb69 	bl	8005430 <TIM_CCxChannelCmd>
      break;
 8004d5e:	e00e      	b.n	8004d7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fb61 	bl	8005430 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2201      	movs	r2, #1
 8004d74:	2104      	movs	r1, #4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fb5a 	bl	8005430 <TIM_CCxChannelCmd>
      break;
 8004d7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0201 	orr.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d122      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d11b      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0202 	mvn.w	r2, #2
 8004dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f9d0 	bl	8005180 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f9c2 	bl	800516c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f9d3 	bl	8005194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d122      	bne.n	8004e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d11b      	bne.n	8004e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0204 	mvn.w	r2, #4
 8004e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f9a6 	bl	8005180 <HAL_TIM_IC_CaptureCallback>
 8004e34:	e005      	b.n	8004e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f998 	bl	800516c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f9a9 	bl	8005194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d122      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d11b      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0208 	mvn.w	r2, #8
 8004e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2204      	movs	r2, #4
 8004e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f97c 	bl	8005180 <HAL_TIM_IC_CaptureCallback>
 8004e88:	e005      	b.n	8004e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f96e 	bl	800516c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f97f 	bl	8005194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d122      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d11b      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0210 	mvn.w	r2, #16
 8004ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f952 	bl	8005180 <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f944 	bl	800516c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f955 	bl	8005194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d10e      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d107      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0201 	mvn.w	r2, #1
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fb fe92 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b80      	cmp	r3, #128	; 0x80
 8004f28:	d10e      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b80      	cmp	r3, #128	; 0x80
 8004f36:	d107      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fb32 	bl	80055ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f56:	d10e      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d107      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fb25 	bl	80055c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	d10e      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d107      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f903 	bl	80051a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d10e      	bne.n	8004fce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d107      	bne.n	8004fce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f06f 0220 	mvn.w	r2, #32
 8004fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fae5 	bl	8005598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e0b4      	b.n	800515e <HAL_TIM_ConfigClockSource+0x186>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	4b56      	ldr	r3, [pc, #344]	; (8005168 <HAL_TIM_ConfigClockSource+0x190>)
 8005010:	4013      	ands	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800501a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502c:	d03e      	beq.n	80050ac <HAL_TIM_ConfigClockSource+0xd4>
 800502e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005032:	f200 8087 	bhi.w	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503a:	f000 8086 	beq.w	800514a <HAL_TIM_ConfigClockSource+0x172>
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005042:	d87f      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005044:	2b70      	cmp	r3, #112	; 0x70
 8005046:	d01a      	beq.n	800507e <HAL_TIM_ConfigClockSource+0xa6>
 8005048:	2b70      	cmp	r3, #112	; 0x70
 800504a:	d87b      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 800504c:	2b60      	cmp	r3, #96	; 0x60
 800504e:	d050      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005050:	2b60      	cmp	r3, #96	; 0x60
 8005052:	d877      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005054:	2b50      	cmp	r3, #80	; 0x50
 8005056:	d03c      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005058:	2b50      	cmp	r3, #80	; 0x50
 800505a:	d873      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d058      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x13a>
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d86f      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b30      	cmp	r3, #48	; 0x30
 8005066:	d064      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 8005068:	2b30      	cmp	r3, #48	; 0x30
 800506a:	d86b      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b20      	cmp	r3, #32
 800506e:	d060      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 8005070:	2b20      	cmp	r3, #32
 8005072:	d867      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d05c      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 8005078:	2b10      	cmp	r3, #16
 800507a:	d05a      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 800507c:	e062      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6899      	ldr	r1, [r3, #8]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f000 f9af 	bl	80053f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	609a      	str	r2, [r3, #8]
      break;
 80050aa:	e04f      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6899      	ldr	r1, [r3, #8]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f000 f998 	bl	80053f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ce:	609a      	str	r2, [r3, #8]
      break;
 80050d0:	e03c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6859      	ldr	r1, [r3, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	461a      	mov	r2, r3
 80050e0:	f000 f90c 	bl	80052fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2150      	movs	r1, #80	; 0x50
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 f965 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 80050f0:	e02c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6859      	ldr	r1, [r3, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	461a      	mov	r2, r3
 8005100:	f000 f92b 	bl	800535a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2160      	movs	r1, #96	; 0x60
 800510a:	4618      	mov	r0, r3
 800510c:	f000 f955 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 8005110:	e01c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	461a      	mov	r2, r3
 8005120:	f000 f8ec 	bl	80052fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2140      	movs	r1, #64	; 0x40
 800512a:	4618      	mov	r0, r3
 800512c:	f000 f945 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 8005130:	e00c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f000 f93c 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 8005142:	e003      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
      break;
 8005148:	e000      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800514a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	fffeff88 	.word	0xfffeff88

0800516c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a40      	ldr	r2, [pc, #256]	; (80052d0 <TIM_Base_SetConfig+0x114>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d013      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051da:	d00f      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3d      	ldr	r2, [pc, #244]	; (80052d4 <TIM_Base_SetConfig+0x118>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00b      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3c      	ldr	r2, [pc, #240]	; (80052d8 <TIM_Base_SetConfig+0x11c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3b      	ldr	r2, [pc, #236]	; (80052dc <TIM_Base_SetConfig+0x120>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a3a      	ldr	r2, [pc, #232]	; (80052e0 <TIM_Base_SetConfig+0x124>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d108      	bne.n	800520e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2f      	ldr	r2, [pc, #188]	; (80052d0 <TIM_Base_SetConfig+0x114>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d02b      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521c:	d027      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <TIM_Base_SetConfig+0x118>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d023      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2b      	ldr	r2, [pc, #172]	; (80052d8 <TIM_Base_SetConfig+0x11c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01f      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <TIM_Base_SetConfig+0x120>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01b      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <TIM_Base_SetConfig+0x124>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d017      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <TIM_Base_SetConfig+0x128>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <TIM_Base_SetConfig+0x12c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00f      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a26      	ldr	r2, [pc, #152]	; (80052ec <TIM_Base_SetConfig+0x130>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a25      	ldr	r2, [pc, #148]	; (80052f0 <TIM_Base_SetConfig+0x134>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a24      	ldr	r2, [pc, #144]	; (80052f4 <TIM_Base_SetConfig+0x138>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a23      	ldr	r2, [pc, #140]	; (80052f8 <TIM_Base_SetConfig+0x13c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a0a      	ldr	r2, [pc, #40]	; (80052d0 <TIM_Base_SetConfig+0x114>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_Base_SetConfig+0xf8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a0c      	ldr	r2, [pc, #48]	; (80052e0 <TIM_Base_SetConfig+0x124>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d103      	bne.n	80052bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	615a      	str	r2, [r3, #20]
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40010400 	.word	0x40010400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800
 80052f0:	40001800 	.word	0x40001800
 80052f4:	40001c00 	.word	0x40001c00
 80052f8:	40002000 	.word	0x40002000

080052fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f023 030a 	bic.w	r3, r3, #10
 8005338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535a:	b480      	push	{r7}
 800535c:	b087      	sub	sp, #28
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f023 0210 	bic.w	r2, r3, #16
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005384:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	031b      	lsls	r3, r3, #12
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005396:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f043 0307 	orr.w	r3, r3, #7
 80053dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800540a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	021a      	lsls	r2, r3, #8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	431a      	orrs	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4313      	orrs	r3, r2
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	2201      	movs	r2, #1
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	43db      	mvns	r3, r3
 8005452:	401a      	ands	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a1a      	ldr	r2, [r3, #32]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	fa01 f303 	lsl.w	r3, r1, r3
 8005468:	431a      	orrs	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005490:	2302      	movs	r3, #2
 8005492:	e06d      	b.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a30      	ldr	r2, [pc, #192]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2f      	ldr	r2, [pc, #188]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d108      	bne.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a20      	ldr	r2, [pc, #128]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d022      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005506:	d01d      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d018      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1a      	ldr	r2, [pc, #104]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00e      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a15      	ldr	r2, [pc, #84]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d009      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a16      	ldr	r2, [pc, #88]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a15      	ldr	r2, [pc, #84]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d10c      	bne.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800554a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40010000 	.word	0x40010000
 8005580:	40010400 	.word	0x40010400
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40014000 	.word	0x40014000
 8005594:	40001800 	.word	0x40001800

08005598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e040      	b.n	8005668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fc f8f8 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2224      	movs	r2, #36	; 0x24
 8005600:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fbca 	bl	8005dac <UART_SetConfig>
 8005618:	4603      	mov	r3, r0
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e022      	b.n	8005668 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fe20 	bl	8006270 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800563e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800564e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fea7 	bl	80063b4 <UART_CheckIdleState>
 8005666:	4603      	mov	r3, r0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	; 0x28
 8005674:	af02      	add	r7, sp, #8
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005684:	2b20      	cmp	r3, #32
 8005686:	f040 8081 	bne.w	800578c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_UART_Transmit+0x26>
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e079      	b.n	800578e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_UART_Transmit+0x38>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e072      	b.n	800578e <HAL_UART_Transmit+0x11e>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2221      	movs	r2, #33	; 0x21
 80056bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056be:	f7fc f9e5 	bl	8001a8c <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	88fa      	ldrh	r2, [r7, #6]
 80056d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056dc:	d108      	bne.n	80056f0 <HAL_UART_Transmit+0x80>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d104      	bne.n	80056f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e003      	b.n	80056f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005700:	e02c      	b.n	800575c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2200      	movs	r2, #0
 800570a:	2180      	movs	r1, #128	; 0x80
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fe9a 	bl	8006446 <UART_WaitOnFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e038      	b.n	800578e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10b      	bne.n	800573a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005730:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	3302      	adds	r3, #2
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	e007      	b.n	800574a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	781a      	ldrb	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	3301      	adds	r3, #1
 8005748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1cc      	bne.n	8005702 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2200      	movs	r2, #0
 8005770:	2140      	movs	r1, #64	; 0x40
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fe67 	bl	8006446 <UART_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e005      	b.n	800578e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	e000      	b.n	800578e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800578c:	2302      	movs	r3, #2
  }
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b0ba      	sub	sp, #232	; 0xe8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80057c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80057c6:	4013      	ands	r3, r2
 80057c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80057cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d115      	bne.n	8005800 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00f      	beq.n	8005800 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d009      	beq.n	8005800 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 82a4 	beq.w	8005d3e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	4798      	blx	r3
      }
      return;
 80057fe:	e29e      	b.n	8005d3e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 8117 	beq.w	8005a38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800580a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005816:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800581a:	4b85      	ldr	r3, [pc, #532]	; (8005a30 <HAL_UART_IRQHandler+0x298>)
 800581c:	4013      	ands	r3, r2
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 810a 	beq.w	8005a38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d011      	beq.n	8005854 <HAL_UART_IRQHandler+0xbc>
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2201      	movs	r2, #1
 8005842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800584a:	f043 0201 	orr.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d011      	beq.n	8005884 <HAL_UART_IRQHandler+0xec>
 8005860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2202      	movs	r2, #2
 8005872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800587a:	f043 0204 	orr.w	r2, r3, #4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d011      	beq.n	80058b4 <HAL_UART_IRQHandler+0x11c>
 8005890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2204      	movs	r2, #4
 80058a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058aa:	f043 0202 	orr.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d017      	beq.n	80058f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d105      	bne.n	80058d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2208      	movs	r2, #8
 80058de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e6:	f043 0208 	orr.w	r2, r3, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d012      	beq.n	8005922 <HAL_UART_IRQHandler+0x18a>
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00c      	beq.n	8005922 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005918:	f043 0220 	orr.w	r2, r3, #32
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 820a 	beq.w	8005d42 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800592e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00d      	beq.n	8005956 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800593a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800595c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b40      	cmp	r3, #64	; 0x40
 800596c:	d005      	beq.n	800597a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800596e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005972:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005976:	2b00      	cmp	r3, #0
 8005978:	d04f      	beq.n	8005a1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fe27 	bl	80065ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d141      	bne.n	8005a12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1d9      	bne.n	800598e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d013      	beq.n	8005a0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e6:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <HAL_UART_IRQHandler+0x29c>)
 80059e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fc fea5 	bl	800273e <HAL_DMA_Abort_IT>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a08:	e00f      	b.n	8005a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f9ae 	bl	8005d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a10:	e00b      	b.n	8005a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f9aa 	bl	8005d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a18:	e007      	b.n	8005a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f9a6 	bl	8005d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005a28:	e18b      	b.n	8005d42 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2a:	bf00      	nop
    return;
 8005a2c:	e189      	b.n	8005d42 <HAL_UART_IRQHandler+0x5aa>
 8005a2e:	bf00      	nop
 8005a30:	04000120 	.word	0x04000120
 8005a34:	08006695 	.word	0x08006695

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	f040 8144 	bne.w	8005cca <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 813d 	beq.w	8005cca <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8136 	beq.w	8005cca <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2210      	movs	r2, #16
 8005a64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	f040 80b2 	bne.w	8005bda <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 815d 	beq.w	8005d46 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a96:	429a      	cmp	r2, r3
 8005a98:	f080 8155 	bcs.w	8005d46 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab0:	f000 8085 	beq.w	8005bbe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ade:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ae2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1da      	bne.n	8005ab4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3308      	adds	r3, #8
 8005b04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b10:	f023 0301 	bic.w	r3, r3, #1
 8005b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e1      	bne.n	8005afe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3308      	adds	r3, #8
 8005b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e3      	bne.n	8005b3a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8e:	f023 0310 	bic.w	r3, r3, #16
 8005b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ba0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ba2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ba6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e4      	bne.n	8005b7e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fc fd50 	bl	800265e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f8d4 	bl	8005d80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bd8:	e0b5      	b.n	8005d46 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 80a7 	beq.w	8005d4a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80a2 	beq.w	8005d4a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c28:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e4      	bne.n	8005c06 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c60:	633a      	str	r2, [r7, #48]	; 0x30
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e3      	bne.n	8005c3c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0310 	bic.w	r3, r3, #16
 8005c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ca8:	61fb      	str	r3, [r7, #28]
 8005caa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	69b9      	ldr	r1, [r7, #24]
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e4      	bne.n	8005c86 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f85c 	bl	8005d80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cc8:	e03f      	b.n	8005d4a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00e      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x55c>
 8005cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d008      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005cea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f853 	bl	8005d98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cf2:	e02d      	b.n	8005d50 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00e      	beq.n	8005d1e <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01c      	beq.n	8005d4e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
    }
    return;
 8005d1c:	e017      	b.n	8005d4e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d012      	beq.n	8005d50 <HAL_UART_IRQHandler+0x5b8>
 8005d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00c      	beq.n	8005d50 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fcc2 	bl	80066c0 <UART_EndTransmit_IT>
    return;
 8005d3c:	e008      	b.n	8005d50 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005d3e:	bf00      	nop
 8005d40:	e006      	b.n	8005d50 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005d42:	bf00      	nop
 8005d44:	e004      	b.n	8005d50 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005d46:	bf00      	nop
 8005d48:	e002      	b.n	8005d50 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005d4e:	bf00      	nop
  }

}
 8005d50:	37e8      	adds	r7, #232	; 0xe8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop

08005d58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4ba7      	ldr	r3, [pc, #668]	; (8006074 <UART_SetConfig+0x2c8>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	6979      	ldr	r1, [r7, #20]
 8005de0:	430b      	orrs	r3, r1
 8005de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a95      	ldr	r2, [pc, #596]	; (8006078 <UART_SetConfig+0x2cc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d120      	bne.n	8005e6a <UART_SetConfig+0xbe>
 8005e28:	4b94      	ldr	r3, [pc, #592]	; (800607c <UART_SetConfig+0x2d0>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d816      	bhi.n	8005e64 <UART_SetConfig+0xb8>
 8005e36:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <UART_SetConfig+0x90>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e4d 	.word	0x08005e4d
 8005e40:	08005e59 	.word	0x08005e59
 8005e44:	08005e53 	.word	0x08005e53
 8005e48:	08005e5f 	.word	0x08005e5f
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e14f      	b.n	80060f2 <UART_SetConfig+0x346>
 8005e52:	2302      	movs	r3, #2
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e14c      	b.n	80060f2 <UART_SetConfig+0x346>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e149      	b.n	80060f2 <UART_SetConfig+0x346>
 8005e5e:	2308      	movs	r3, #8
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e146      	b.n	80060f2 <UART_SetConfig+0x346>
 8005e64:	2310      	movs	r3, #16
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e143      	b.n	80060f2 <UART_SetConfig+0x346>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a84      	ldr	r2, [pc, #528]	; (8006080 <UART_SetConfig+0x2d4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d132      	bne.n	8005eda <UART_SetConfig+0x12e>
 8005e74:	4b81      	ldr	r3, [pc, #516]	; (800607c <UART_SetConfig+0x2d0>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	2b0c      	cmp	r3, #12
 8005e80:	d828      	bhi.n	8005ed4 <UART_SetConfig+0x128>
 8005e82:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <UART_SetConfig+0xdc>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005ebd 	.word	0x08005ebd
 8005e8c:	08005ed5 	.word	0x08005ed5
 8005e90:	08005ed5 	.word	0x08005ed5
 8005e94:	08005ed5 	.word	0x08005ed5
 8005e98:	08005ec9 	.word	0x08005ec9
 8005e9c:	08005ed5 	.word	0x08005ed5
 8005ea0:	08005ed5 	.word	0x08005ed5
 8005ea4:	08005ed5 	.word	0x08005ed5
 8005ea8:	08005ec3 	.word	0x08005ec3
 8005eac:	08005ed5 	.word	0x08005ed5
 8005eb0:	08005ed5 	.word	0x08005ed5
 8005eb4:	08005ed5 	.word	0x08005ed5
 8005eb8:	08005ecf 	.word	0x08005ecf
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e117      	b.n	80060f2 <UART_SetConfig+0x346>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	77fb      	strb	r3, [r7, #31]
 8005ec6:	e114      	b.n	80060f2 <UART_SetConfig+0x346>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e111      	b.n	80060f2 <UART_SetConfig+0x346>
 8005ece:	2308      	movs	r3, #8
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e10e      	b.n	80060f2 <UART_SetConfig+0x346>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e10b      	b.n	80060f2 <UART_SetConfig+0x346>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a69      	ldr	r2, [pc, #420]	; (8006084 <UART_SetConfig+0x2d8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d120      	bne.n	8005f26 <UART_SetConfig+0x17a>
 8005ee4:	4b65      	ldr	r3, [pc, #404]	; (800607c <UART_SetConfig+0x2d0>)
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005eee:	2b30      	cmp	r3, #48	; 0x30
 8005ef0:	d013      	beq.n	8005f1a <UART_SetConfig+0x16e>
 8005ef2:	2b30      	cmp	r3, #48	; 0x30
 8005ef4:	d814      	bhi.n	8005f20 <UART_SetConfig+0x174>
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d009      	beq.n	8005f0e <UART_SetConfig+0x162>
 8005efa:	2b20      	cmp	r3, #32
 8005efc:	d810      	bhi.n	8005f20 <UART_SetConfig+0x174>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <UART_SetConfig+0x15c>
 8005f02:	2b10      	cmp	r3, #16
 8005f04:	d006      	beq.n	8005f14 <UART_SetConfig+0x168>
 8005f06:	e00b      	b.n	8005f20 <UART_SetConfig+0x174>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e0f1      	b.n	80060f2 <UART_SetConfig+0x346>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	77fb      	strb	r3, [r7, #31]
 8005f12:	e0ee      	b.n	80060f2 <UART_SetConfig+0x346>
 8005f14:	2304      	movs	r3, #4
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e0eb      	b.n	80060f2 <UART_SetConfig+0x346>
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	77fb      	strb	r3, [r7, #31]
 8005f1e:	e0e8      	b.n	80060f2 <UART_SetConfig+0x346>
 8005f20:	2310      	movs	r3, #16
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	e0e5      	b.n	80060f2 <UART_SetConfig+0x346>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a57      	ldr	r2, [pc, #348]	; (8006088 <UART_SetConfig+0x2dc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d120      	bne.n	8005f72 <UART_SetConfig+0x1c6>
 8005f30:	4b52      	ldr	r3, [pc, #328]	; (800607c <UART_SetConfig+0x2d0>)
 8005f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005f3c:	d013      	beq.n	8005f66 <UART_SetConfig+0x1ba>
 8005f3e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f40:	d814      	bhi.n	8005f6c <UART_SetConfig+0x1c0>
 8005f42:	2b80      	cmp	r3, #128	; 0x80
 8005f44:	d009      	beq.n	8005f5a <UART_SetConfig+0x1ae>
 8005f46:	2b80      	cmp	r3, #128	; 0x80
 8005f48:	d810      	bhi.n	8005f6c <UART_SetConfig+0x1c0>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <UART_SetConfig+0x1a8>
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	d006      	beq.n	8005f60 <UART_SetConfig+0x1b4>
 8005f52:	e00b      	b.n	8005f6c <UART_SetConfig+0x1c0>
 8005f54:	2300      	movs	r3, #0
 8005f56:	77fb      	strb	r3, [r7, #31]
 8005f58:	e0cb      	b.n	80060f2 <UART_SetConfig+0x346>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	77fb      	strb	r3, [r7, #31]
 8005f5e:	e0c8      	b.n	80060f2 <UART_SetConfig+0x346>
 8005f60:	2304      	movs	r3, #4
 8005f62:	77fb      	strb	r3, [r7, #31]
 8005f64:	e0c5      	b.n	80060f2 <UART_SetConfig+0x346>
 8005f66:	2308      	movs	r3, #8
 8005f68:	77fb      	strb	r3, [r7, #31]
 8005f6a:	e0c2      	b.n	80060f2 <UART_SetConfig+0x346>
 8005f6c:	2310      	movs	r3, #16
 8005f6e:	77fb      	strb	r3, [r7, #31]
 8005f70:	e0bf      	b.n	80060f2 <UART_SetConfig+0x346>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a45      	ldr	r2, [pc, #276]	; (800608c <UART_SetConfig+0x2e0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d125      	bne.n	8005fc8 <UART_SetConfig+0x21c>
 8005f7c:	4b3f      	ldr	r3, [pc, #252]	; (800607c <UART_SetConfig+0x2d0>)
 8005f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f8a:	d017      	beq.n	8005fbc <UART_SetConfig+0x210>
 8005f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f90:	d817      	bhi.n	8005fc2 <UART_SetConfig+0x216>
 8005f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f96:	d00b      	beq.n	8005fb0 <UART_SetConfig+0x204>
 8005f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f9c:	d811      	bhi.n	8005fc2 <UART_SetConfig+0x216>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <UART_SetConfig+0x1fe>
 8005fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa6:	d006      	beq.n	8005fb6 <UART_SetConfig+0x20a>
 8005fa8:	e00b      	b.n	8005fc2 <UART_SetConfig+0x216>
 8005faa:	2300      	movs	r3, #0
 8005fac:	77fb      	strb	r3, [r7, #31]
 8005fae:	e0a0      	b.n	80060f2 <UART_SetConfig+0x346>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e09d      	b.n	80060f2 <UART_SetConfig+0x346>
 8005fb6:	2304      	movs	r3, #4
 8005fb8:	77fb      	strb	r3, [r7, #31]
 8005fba:	e09a      	b.n	80060f2 <UART_SetConfig+0x346>
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	77fb      	strb	r3, [r7, #31]
 8005fc0:	e097      	b.n	80060f2 <UART_SetConfig+0x346>
 8005fc2:	2310      	movs	r3, #16
 8005fc4:	77fb      	strb	r3, [r7, #31]
 8005fc6:	e094      	b.n	80060f2 <UART_SetConfig+0x346>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a30      	ldr	r2, [pc, #192]	; (8006090 <UART_SetConfig+0x2e4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d125      	bne.n	800601e <UART_SetConfig+0x272>
 8005fd2:	4b2a      	ldr	r3, [pc, #168]	; (800607c <UART_SetConfig+0x2d0>)
 8005fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fe0:	d017      	beq.n	8006012 <UART_SetConfig+0x266>
 8005fe2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fe6:	d817      	bhi.n	8006018 <UART_SetConfig+0x26c>
 8005fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fec:	d00b      	beq.n	8006006 <UART_SetConfig+0x25a>
 8005fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff2:	d811      	bhi.n	8006018 <UART_SetConfig+0x26c>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <UART_SetConfig+0x254>
 8005ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ffc:	d006      	beq.n	800600c <UART_SetConfig+0x260>
 8005ffe:	e00b      	b.n	8006018 <UART_SetConfig+0x26c>
 8006000:	2301      	movs	r3, #1
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e075      	b.n	80060f2 <UART_SetConfig+0x346>
 8006006:	2302      	movs	r3, #2
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e072      	b.n	80060f2 <UART_SetConfig+0x346>
 800600c:	2304      	movs	r3, #4
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e06f      	b.n	80060f2 <UART_SetConfig+0x346>
 8006012:	2308      	movs	r3, #8
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e06c      	b.n	80060f2 <UART_SetConfig+0x346>
 8006018:	2310      	movs	r3, #16
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e069      	b.n	80060f2 <UART_SetConfig+0x346>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1c      	ldr	r2, [pc, #112]	; (8006094 <UART_SetConfig+0x2e8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d137      	bne.n	8006098 <UART_SetConfig+0x2ec>
 8006028:	4b14      	ldr	r3, [pc, #80]	; (800607c <UART_SetConfig+0x2d0>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006036:	d017      	beq.n	8006068 <UART_SetConfig+0x2bc>
 8006038:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800603c:	d817      	bhi.n	800606e <UART_SetConfig+0x2c2>
 800603e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006042:	d00b      	beq.n	800605c <UART_SetConfig+0x2b0>
 8006044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006048:	d811      	bhi.n	800606e <UART_SetConfig+0x2c2>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <UART_SetConfig+0x2aa>
 800604e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006052:	d006      	beq.n	8006062 <UART_SetConfig+0x2b6>
 8006054:	e00b      	b.n	800606e <UART_SetConfig+0x2c2>
 8006056:	2300      	movs	r3, #0
 8006058:	77fb      	strb	r3, [r7, #31]
 800605a:	e04a      	b.n	80060f2 <UART_SetConfig+0x346>
 800605c:	2302      	movs	r3, #2
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e047      	b.n	80060f2 <UART_SetConfig+0x346>
 8006062:	2304      	movs	r3, #4
 8006064:	77fb      	strb	r3, [r7, #31]
 8006066:	e044      	b.n	80060f2 <UART_SetConfig+0x346>
 8006068:	2308      	movs	r3, #8
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e041      	b.n	80060f2 <UART_SetConfig+0x346>
 800606e:	2310      	movs	r3, #16
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e03e      	b.n	80060f2 <UART_SetConfig+0x346>
 8006074:	efff69f3 	.word	0xefff69f3
 8006078:	40011000 	.word	0x40011000
 800607c:	40023800 	.word	0x40023800
 8006080:	40004400 	.word	0x40004400
 8006084:	40004800 	.word	0x40004800
 8006088:	40004c00 	.word	0x40004c00
 800608c:	40005000 	.word	0x40005000
 8006090:	40011400 	.word	0x40011400
 8006094:	40007800 	.word	0x40007800
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a71      	ldr	r2, [pc, #452]	; (8006264 <UART_SetConfig+0x4b8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d125      	bne.n	80060ee <UART_SetConfig+0x342>
 80060a2:	4b71      	ldr	r3, [pc, #452]	; (8006268 <UART_SetConfig+0x4bc>)
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060b0:	d017      	beq.n	80060e2 <UART_SetConfig+0x336>
 80060b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060b6:	d817      	bhi.n	80060e8 <UART_SetConfig+0x33c>
 80060b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060bc:	d00b      	beq.n	80060d6 <UART_SetConfig+0x32a>
 80060be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c2:	d811      	bhi.n	80060e8 <UART_SetConfig+0x33c>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <UART_SetConfig+0x324>
 80060c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060cc:	d006      	beq.n	80060dc <UART_SetConfig+0x330>
 80060ce:	e00b      	b.n	80060e8 <UART_SetConfig+0x33c>
 80060d0:	2300      	movs	r3, #0
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e00d      	b.n	80060f2 <UART_SetConfig+0x346>
 80060d6:	2302      	movs	r3, #2
 80060d8:	77fb      	strb	r3, [r7, #31]
 80060da:	e00a      	b.n	80060f2 <UART_SetConfig+0x346>
 80060dc:	2304      	movs	r3, #4
 80060de:	77fb      	strb	r3, [r7, #31]
 80060e0:	e007      	b.n	80060f2 <UART_SetConfig+0x346>
 80060e2:	2308      	movs	r3, #8
 80060e4:	77fb      	strb	r3, [r7, #31]
 80060e6:	e004      	b.n	80060f2 <UART_SetConfig+0x346>
 80060e8:	2310      	movs	r3, #16
 80060ea:	77fb      	strb	r3, [r7, #31]
 80060ec:	e001      	b.n	80060f2 <UART_SetConfig+0x346>
 80060ee:	2310      	movs	r3, #16
 80060f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fa:	d15a      	bne.n	80061b2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80060fc:	7ffb      	ldrb	r3, [r7, #31]
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d827      	bhi.n	8006152 <UART_SetConfig+0x3a6>
 8006102:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <UART_SetConfig+0x35c>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	0800612d 	.word	0x0800612d
 800610c:	08006135 	.word	0x08006135
 8006110:	0800613d 	.word	0x0800613d
 8006114:	08006153 	.word	0x08006153
 8006118:	08006143 	.word	0x08006143
 800611c:	08006153 	.word	0x08006153
 8006120:	08006153 	.word	0x08006153
 8006124:	08006153 	.word	0x08006153
 8006128:	0800614b 	.word	0x0800614b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800612c:	f7fd ffe0 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 8006130:	61b8      	str	r0, [r7, #24]
        break;
 8006132:	e013      	b.n	800615c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006134:	f7fd fff0 	bl	8004118 <HAL_RCC_GetPCLK2Freq>
 8006138:	61b8      	str	r0, [r7, #24]
        break;
 800613a:	e00f      	b.n	800615c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800613c:	4b4b      	ldr	r3, [pc, #300]	; (800626c <UART_SetConfig+0x4c0>)
 800613e:	61bb      	str	r3, [r7, #24]
        break;
 8006140:	e00c      	b.n	800615c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006142:	f7fd fee7 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8006146:	61b8      	str	r0, [r7, #24]
        break;
 8006148:	e008      	b.n	800615c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800614a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614e:	61bb      	str	r3, [r7, #24]
        break;
 8006150:	e004      	b.n	800615c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	77bb      	strb	r3, [r7, #30]
        break;
 800615a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d074      	beq.n	800624c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	005a      	lsls	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	441a      	add	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	fbb2 f3f3 	udiv	r3, r2, r3
 8006176:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b0f      	cmp	r3, #15
 800617c:	d916      	bls.n	80061ac <UART_SetConfig+0x400>
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006184:	d212      	bcs.n	80061ac <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f023 030f 	bic.w	r3, r3, #15
 800618e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	b29b      	uxth	r3, r3
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	b29a      	uxth	r2, r3
 800619c:	89fb      	ldrh	r3, [r7, #14]
 800619e:	4313      	orrs	r3, r2
 80061a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	89fa      	ldrh	r2, [r7, #14]
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	e04f      	b.n	800624c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	77bb      	strb	r3, [r7, #30]
 80061b0:	e04c      	b.n	800624c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061b2:	7ffb      	ldrb	r3, [r7, #31]
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d828      	bhi.n	800620a <UART_SetConfig+0x45e>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <UART_SetConfig+0x414>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	0800620b 	.word	0x0800620b
 80061d0:	080061fb 	.word	0x080061fb
 80061d4:	0800620b 	.word	0x0800620b
 80061d8:	0800620b 	.word	0x0800620b
 80061dc:	0800620b 	.word	0x0800620b
 80061e0:	08006203 	.word	0x08006203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e4:	f7fd ff84 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 80061e8:	61b8      	str	r0, [r7, #24]
        break;
 80061ea:	e013      	b.n	8006214 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061ec:	f7fd ff94 	bl	8004118 <HAL_RCC_GetPCLK2Freq>
 80061f0:	61b8      	str	r0, [r7, #24]
        break;
 80061f2:	e00f      	b.n	8006214 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061f4:	4b1d      	ldr	r3, [pc, #116]	; (800626c <UART_SetConfig+0x4c0>)
 80061f6:	61bb      	str	r3, [r7, #24]
        break;
 80061f8:	e00c      	b.n	8006214 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061fa:	f7fd fe8b 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 80061fe:	61b8      	str	r0, [r7, #24]
        break;
 8006200:	e008      	b.n	8006214 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006206:	61bb      	str	r3, [r7, #24]
        break;
 8006208:	e004      	b.n	8006214 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	77bb      	strb	r3, [r7, #30]
        break;
 8006212:	bf00      	nop
    }

    if (pclk != 0U)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d018      	beq.n	800624c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	085a      	lsrs	r2, r3, #1
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	441a      	add	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	fbb2 f3f3 	udiv	r3, r2, r3
 800622c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	2b0f      	cmp	r3, #15
 8006232:	d909      	bls.n	8006248 <UART_SetConfig+0x49c>
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623a:	d205      	bcs.n	8006248 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	b29a      	uxth	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	e001      	b.n	800624c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006258:	7fbb      	ldrb	r3, [r7, #30]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40007c00 	.word	0x40007c00
 8006268:	40023800 	.word	0x40023800
 800626c:	00f42400 	.word	0x00f42400

08006270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01a      	beq.n	8006386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800636e:	d10a      	bne.n	8006386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	605a      	str	r2, [r3, #4]
  }
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063c4:	f7fb fb62 	bl	8001a8c <HAL_GetTick>
 80063c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d10e      	bne.n	80063f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f82d 	bl	8006446 <UART_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e023      	b.n	800643e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b04      	cmp	r3, #4
 8006402:	d10e      	bne.n	8006422 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f817 	bl	8006446 <UART_WaitOnFlagUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e00d      	b.n	800643e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b09c      	sub	sp, #112	; 0x70
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	4613      	mov	r3, r2
 8006454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006456:	e0a5      	b.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645e:	f000 80a1 	beq.w	80065a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006462:	f7fb fb13 	bl	8001a8c <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800646e:	429a      	cmp	r2, r3
 8006470:	d302      	bcc.n	8006478 <UART_WaitOnFlagUntilTimeout+0x32>
 8006472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006474:	2b00      	cmp	r3, #0
 8006476:	d13e      	bne.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006488:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800648c:	667b      	str	r3, [r7, #100]	; 0x64
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006498:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800649c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80064a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e6      	bne.n	8006478 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3308      	adds	r3, #8
 80064b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	f023 0301 	bic.w	r3, r3, #1
 80064c0:	663b      	str	r3, [r7, #96]	; 0x60
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80064cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e5      	bne.n	80064aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e067      	b.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d04f      	beq.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800650e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006512:	d147      	bne.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800651c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006532:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
 800653e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e6      	bne.n	800651e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	613b      	str	r3, [r7, #16]
   return(result);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f023 0301 	bic.w	r3, r3, #1
 8006566:	66bb      	str	r3, [r7, #104]	; 0x68
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3308      	adds	r3, #8
 800656e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006570:	623a      	str	r2, [r7, #32]
 8006572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	69f9      	ldr	r1, [r7, #28]
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	61bb      	str	r3, [r7, #24]
   return(result);
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e5      	bne.n	8006550 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2220      	movs	r2, #32
 8006594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e010      	b.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69da      	ldr	r2, [r3, #28]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	4013      	ands	r3, r2
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	bf0c      	ite	eq
 80065b4:	2301      	moveq	r3, #1
 80065b6:	2300      	movne	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	429a      	cmp	r2, r3
 80065c0:	f43f af4a 	beq.w	8006458 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3770      	adds	r7, #112	; 0x70
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b095      	sub	sp, #84	; 0x54
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f4:	643b      	str	r3, [r7, #64]	; 0x40
 80065f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e6      	bne.n	80065d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	61fb      	str	r3, [r7, #28]
   return(result);
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3308      	adds	r3, #8
 8006626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800662e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e5      	bne.n	8006608 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006640:	2b01      	cmp	r3, #1
 8006642:	d118      	bne.n	8006676 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	60bb      	str	r3, [r7, #8]
   return(result);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f023 0310 	bic.w	r3, r3, #16
 8006658:	647b      	str	r3, [r7, #68]	; 0x44
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6979      	ldr	r1, [r7, #20]
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	613b      	str	r3, [r7, #16]
   return(result);
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e6      	bne.n	8006644 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2220      	movs	r2, #32
 800667a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006688:	bf00      	nop
 800668a:	3754      	adds	r7, #84	; 0x54
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff fb5a 	bl	8005d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066dc:	61fb      	str	r3, [r7, #28]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6979      	ldr	r1, [r7, #20]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	613b      	str	r3, [r7, #16]
   return(result);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e6      	bne.n	80066c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff fb26 	bl	8005d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800670c:	bf00      	nop
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006714:	b084      	sub	sp, #16
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	f107 001c 	add.w	r0, r7, #28
 8006722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	2b01      	cmp	r3, #1
 800672a:	d120      	bne.n	800676e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	4b20      	ldr	r3, [pc, #128]	; (80067c0 <USB_CoreInit+0xac>)
 800673e:	4013      	ands	r3, r2
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006752:	2b01      	cmp	r3, #1
 8006754:	d105      	bne.n	8006762 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa92 	bl	8006c8c <USB_CoreReset>
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]
 800676c:	e010      	b.n	8006790 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa86 	bl	8006c8c <USB_CoreReset>
 8006780:	4603      	mov	r3, r0
 8006782:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	2b01      	cmp	r3, #1
 8006794:	d10b      	bne.n	80067ae <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f043 0206 	orr.w	r2, r3, #6
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f043 0220 	orr.w	r2, r3, #32
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067ba:	b004      	add	sp, #16
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	ffbdffbf 	.word	0xffbdffbf

080067c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f023 0201 	bic.w	r2, r3, #1
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006802:	78fb      	ldrb	r3, [r7, #3]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d115      	bne.n	8006834 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006814:	2001      	movs	r0, #1
 8006816:	f7fb f945 	bl	8001aa4 <HAL_Delay>
      ms++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3301      	adds	r3, #1
 800681e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa25 	bl	8006c70 <USB_GetMode>
 8006826:	4603      	mov	r3, r0
 8006828:	2b01      	cmp	r3, #1
 800682a:	d01e      	beq.n	800686a <USB_SetCurrentMode+0x84>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b31      	cmp	r3, #49	; 0x31
 8006830:	d9f0      	bls.n	8006814 <USB_SetCurrentMode+0x2e>
 8006832:	e01a      	b.n	800686a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d115      	bne.n	8006866 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006846:	2001      	movs	r0, #1
 8006848:	f7fb f92c 	bl	8001aa4 <HAL_Delay>
      ms++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fa0c 	bl	8006c70 <USB_GetMode>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <USB_SetCurrentMode+0x84>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b31      	cmp	r3, #49	; 0x31
 8006862:	d9f0      	bls.n	8006846 <USB_SetCurrentMode+0x60>
 8006864:	e001      	b.n	800686a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e005      	b.n	8006876 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b32      	cmp	r3, #50	; 0x32
 800686e:	d101      	bne.n	8006874 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006880:	b084      	sub	sp, #16
 8006882:	b580      	push	{r7, lr}
 8006884:	b086      	sub	sp, #24
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800688e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	e009      	b.n	80068b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	3340      	adds	r3, #64	; 0x40
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	2200      	movs	r2, #0
 80068ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	3301      	adds	r3, #1
 80068b2:	613b      	str	r3, [r7, #16]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b0e      	cmp	r3, #14
 80068b8:	d9f2      	bls.n	80068a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d11c      	bne.n	80068fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ce:	f043 0302 	orr.w	r3, r3, #2
 80068d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	e005      	b.n	8006906 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800690c:	461a      	mov	r2, r3
 800690e:	2300      	movs	r3, #0
 8006910:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006918:	4619      	mov	r1, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006920:	461a      	mov	r2, r3
 8006922:	680b      	ldr	r3, [r1, #0]
 8006924:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	2b01      	cmp	r3, #1
 800692a:	d10c      	bne.n	8006946 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006932:	2100      	movs	r1, #0
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f961 	bl	8006bfc <USB_SetDevSpeed>
 800693a:	e008      	b.n	800694e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800693c:	2101      	movs	r1, #1
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f95c 	bl	8006bfc <USB_SetDevSpeed>
 8006944:	e003      	b.n	800694e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006946:	2103      	movs	r1, #3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f957 	bl	8006bfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800694e:	2110      	movs	r1, #16
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f8f3 	bl	8006b3c <USB_FlushTxFifo>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f91d 	bl	8006ba0 <USB_FlushRxFifo>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006976:	461a      	mov	r2, r3
 8006978:	2300      	movs	r3, #0
 800697a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006982:	461a      	mov	r2, r3
 8006984:	2300      	movs	r3, #0
 8006986:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698e:	461a      	mov	r2, r3
 8006990:	2300      	movs	r3, #0
 8006992:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006994:	2300      	movs	r3, #0
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	e043      	b.n	8006a22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b0:	d118      	bne.n	80069e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	461a      	mov	r2, r3
 80069c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	e013      	b.n	80069f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069da:	461a      	mov	r2, r3
 80069dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e008      	b.n	80069f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f0:	461a      	mov	r2, r3
 80069f2:	2300      	movs	r3, #0
 80069f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a02:	461a      	mov	r2, r3
 8006a04:	2300      	movs	r3, #0
 8006a06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	461a      	mov	r2, r3
 8006a16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d3b7      	bcc.n	800699a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	613b      	str	r3, [r7, #16]
 8006a2e:	e043      	b.n	8006ab8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a46:	d118      	bne.n	8006a7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e013      	b.n	8006a8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a70:	461a      	mov	r2, r3
 8006a72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	e008      	b.n	8006a8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a86:	461a      	mov	r2, r3
 8006a88:	2300      	movs	r3, #0
 8006a8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a98:	461a      	mov	r2, r3
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ab0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d3b7      	bcc.n	8006a30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ae0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d105      	bne.n	8006af4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f043 0210 	orr.w	r2, r3, #16
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699a      	ldr	r2, [r3, #24]
 8006af8:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <USB_DevInit+0x2b4>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	f043 0208 	orr.w	r2, r3, #8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d105      	bne.n	8006b24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <USB_DevInit+0x2b8>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b30:	b004      	add	sp, #16
 8006b32:	4770      	bx	lr
 8006b34:	803c3800 	.word	0x803c3800
 8006b38:	40000004 	.word	0x40000004

08006b3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	4a12      	ldr	r2, [pc, #72]	; (8006b9c <USB_FlushTxFifo+0x60>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d901      	bls.n	8006b5a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e01a      	b.n	8006b90 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	daf3      	bge.n	8006b4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	019b      	lsls	r3, r3, #6
 8006b6a:	f043 0220 	orr.w	r2, r3, #32
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3301      	adds	r3, #1
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	4a08      	ldr	r2, [pc, #32]	; (8006b9c <USB_FlushTxFifo+0x60>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e006      	b.n	8006b90 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d0f1      	beq.n	8006b72 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	00030d40 	.word	0x00030d40

08006ba0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	4a11      	ldr	r2, [pc, #68]	; (8006bf8 <USB_FlushRxFifo+0x58>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d901      	bls.n	8006bbc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e017      	b.n	8006bec <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	daf3      	bge.n	8006bac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2210      	movs	r2, #16
 8006bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <USB_FlushRxFifo+0x58>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d901      	bls.n	8006bde <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e006      	b.n	8006bec <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0310 	and.w	r3, r3, #16
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	d0f1      	beq.n	8006bce <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	00030d40 	.word	0x00030d40

08006bfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	68f9      	ldr	r1, [r7, #12]
 8006c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c48:	f023 0303 	bic.w	r3, r3, #3
 8006c4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c5c:	f043 0302 	orr.w	r3, r3, #2
 8006c60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	4a13      	ldr	r2, [pc, #76]	; (8006cec <USB_CoreReset+0x60>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d901      	bls.n	8006ca8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e01a      	b.n	8006cde <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	daf3      	bge.n	8006c98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f043 0201 	orr.w	r2, r3, #1
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	4a09      	ldr	r2, [pc, #36]	; (8006cec <USB_CoreReset+0x60>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d901      	bls.n	8006cd0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e006      	b.n	8006cde <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d0f1      	beq.n	8006cc0 <USB_CoreReset+0x34>

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	00030d40 	.word	0x00030d40

08006cf0 <__errno>:
 8006cf0:	4b01      	ldr	r3, [pc, #4]	; (8006cf8 <__errno+0x8>)
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	20000018 	.word	0x20000018

08006cfc <__libc_init_array>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4d0d      	ldr	r5, [pc, #52]	; (8006d34 <__libc_init_array+0x38>)
 8006d00:	4c0d      	ldr	r4, [pc, #52]	; (8006d38 <__libc_init_array+0x3c>)
 8006d02:	1b64      	subs	r4, r4, r5
 8006d04:	10a4      	asrs	r4, r4, #2
 8006d06:	2600      	movs	r6, #0
 8006d08:	42a6      	cmp	r6, r4
 8006d0a:	d109      	bne.n	8006d20 <__libc_init_array+0x24>
 8006d0c:	4d0b      	ldr	r5, [pc, #44]	; (8006d3c <__libc_init_array+0x40>)
 8006d0e:	4c0c      	ldr	r4, [pc, #48]	; (8006d40 <__libc_init_array+0x44>)
 8006d10:	f000 fc4e 	bl	80075b0 <_init>
 8006d14:	1b64      	subs	r4, r4, r5
 8006d16:	10a4      	asrs	r4, r4, #2
 8006d18:	2600      	movs	r6, #0
 8006d1a:	42a6      	cmp	r6, r4
 8006d1c:	d105      	bne.n	8006d2a <__libc_init_array+0x2e>
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d24:	4798      	blx	r3
 8006d26:	3601      	adds	r6, #1
 8006d28:	e7ee      	b.n	8006d08 <__libc_init_array+0xc>
 8006d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2e:	4798      	blx	r3
 8006d30:	3601      	adds	r6, #1
 8006d32:	e7f2      	b.n	8006d1a <__libc_init_array+0x1e>
 8006d34:	08007dc4 	.word	0x08007dc4
 8006d38:	08007dc4 	.word	0x08007dc4
 8006d3c:	08007dc4 	.word	0x08007dc4
 8006d40:	08007dc8 	.word	0x08007dc8

08006d44 <memcpy>:
 8006d44:	440a      	add	r2, r1
 8006d46:	4291      	cmp	r1, r2
 8006d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d4c:	d100      	bne.n	8006d50 <memcpy+0xc>
 8006d4e:	4770      	bx	lr
 8006d50:	b510      	push	{r4, lr}
 8006d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d5a:	4291      	cmp	r1, r2
 8006d5c:	d1f9      	bne.n	8006d52 <memcpy+0xe>
 8006d5e:	bd10      	pop	{r4, pc}

08006d60 <memmove>:
 8006d60:	4288      	cmp	r0, r1
 8006d62:	b510      	push	{r4, lr}
 8006d64:	eb01 0402 	add.w	r4, r1, r2
 8006d68:	d902      	bls.n	8006d70 <memmove+0x10>
 8006d6a:	4284      	cmp	r4, r0
 8006d6c:	4623      	mov	r3, r4
 8006d6e:	d807      	bhi.n	8006d80 <memmove+0x20>
 8006d70:	1e43      	subs	r3, r0, #1
 8006d72:	42a1      	cmp	r1, r4
 8006d74:	d008      	beq.n	8006d88 <memmove+0x28>
 8006d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d7e:	e7f8      	b.n	8006d72 <memmove+0x12>
 8006d80:	4402      	add	r2, r0
 8006d82:	4601      	mov	r1, r0
 8006d84:	428a      	cmp	r2, r1
 8006d86:	d100      	bne.n	8006d8a <memmove+0x2a>
 8006d88:	bd10      	pop	{r4, pc}
 8006d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d92:	e7f7      	b.n	8006d84 <memmove+0x24>

08006d94 <memset>:
 8006d94:	4402      	add	r2, r0
 8006d96:	4603      	mov	r3, r0
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d100      	bne.n	8006d9e <memset+0xa>
 8006d9c:	4770      	bx	lr
 8006d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006da2:	e7f9      	b.n	8006d98 <memset+0x4>

08006da4 <siprintf>:
 8006da4:	b40e      	push	{r1, r2, r3}
 8006da6:	b500      	push	{lr}
 8006da8:	b09c      	sub	sp, #112	; 0x70
 8006daa:	ab1d      	add	r3, sp, #116	; 0x74
 8006dac:	9002      	str	r0, [sp, #8]
 8006dae:	9006      	str	r0, [sp, #24]
 8006db0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006db4:	4809      	ldr	r0, [pc, #36]	; (8006ddc <siprintf+0x38>)
 8006db6:	9107      	str	r1, [sp, #28]
 8006db8:	9104      	str	r1, [sp, #16]
 8006dba:	4909      	ldr	r1, [pc, #36]	; (8006de0 <siprintf+0x3c>)
 8006dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc0:	9105      	str	r1, [sp, #20]
 8006dc2:	6800      	ldr	r0, [r0, #0]
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	a902      	add	r1, sp, #8
 8006dc8:	f000 f868 	bl	8006e9c <_svfiprintf_r>
 8006dcc:	9b02      	ldr	r3, [sp, #8]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	b01c      	add	sp, #112	; 0x70
 8006dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd8:	b003      	add	sp, #12
 8006dda:	4770      	bx	lr
 8006ddc:	20000018 	.word	0x20000018
 8006de0:	ffff0208 	.word	0xffff0208

08006de4 <__ssputs_r>:
 8006de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de8:	688e      	ldr	r6, [r1, #8]
 8006dea:	429e      	cmp	r6, r3
 8006dec:	4682      	mov	sl, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	4690      	mov	r8, r2
 8006df2:	461f      	mov	r7, r3
 8006df4:	d838      	bhi.n	8006e68 <__ssputs_r+0x84>
 8006df6:	898a      	ldrh	r2, [r1, #12]
 8006df8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dfc:	d032      	beq.n	8006e64 <__ssputs_r+0x80>
 8006dfe:	6825      	ldr	r5, [r4, #0]
 8006e00:	6909      	ldr	r1, [r1, #16]
 8006e02:	eba5 0901 	sub.w	r9, r5, r1
 8006e06:	6965      	ldr	r5, [r4, #20]
 8006e08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e10:	3301      	adds	r3, #1
 8006e12:	444b      	add	r3, r9
 8006e14:	106d      	asrs	r5, r5, #1
 8006e16:	429d      	cmp	r5, r3
 8006e18:	bf38      	it	cc
 8006e1a:	461d      	movcc	r5, r3
 8006e1c:	0553      	lsls	r3, r2, #21
 8006e1e:	d531      	bpl.n	8006e84 <__ssputs_r+0xa0>
 8006e20:	4629      	mov	r1, r5
 8006e22:	f000 fb1f 	bl	8007464 <_malloc_r>
 8006e26:	4606      	mov	r6, r0
 8006e28:	b950      	cbnz	r0, 8006e40 <__ssputs_r+0x5c>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	f8ca 3000 	str.w	r3, [sl]
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e36:	81a3      	strh	r3, [r4, #12]
 8006e38:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e40:	6921      	ldr	r1, [r4, #16]
 8006e42:	464a      	mov	r2, r9
 8006e44:	f7ff ff7e 	bl	8006d44 <memcpy>
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e52:	81a3      	strh	r3, [r4, #12]
 8006e54:	6126      	str	r6, [r4, #16]
 8006e56:	6165      	str	r5, [r4, #20]
 8006e58:	444e      	add	r6, r9
 8006e5a:	eba5 0509 	sub.w	r5, r5, r9
 8006e5e:	6026      	str	r6, [r4, #0]
 8006e60:	60a5      	str	r5, [r4, #8]
 8006e62:	463e      	mov	r6, r7
 8006e64:	42be      	cmp	r6, r7
 8006e66:	d900      	bls.n	8006e6a <__ssputs_r+0x86>
 8006e68:	463e      	mov	r6, r7
 8006e6a:	4632      	mov	r2, r6
 8006e6c:	6820      	ldr	r0, [r4, #0]
 8006e6e:	4641      	mov	r1, r8
 8006e70:	f7ff ff76 	bl	8006d60 <memmove>
 8006e74:	68a3      	ldr	r3, [r4, #8]
 8006e76:	6822      	ldr	r2, [r4, #0]
 8006e78:	1b9b      	subs	r3, r3, r6
 8006e7a:	4432      	add	r2, r6
 8006e7c:	60a3      	str	r3, [r4, #8]
 8006e7e:	6022      	str	r2, [r4, #0]
 8006e80:	2000      	movs	r0, #0
 8006e82:	e7db      	b.n	8006e3c <__ssputs_r+0x58>
 8006e84:	462a      	mov	r2, r5
 8006e86:	f000 fb47 	bl	8007518 <_realloc_r>
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d1e1      	bne.n	8006e54 <__ssputs_r+0x70>
 8006e90:	6921      	ldr	r1, [r4, #16]
 8006e92:	4650      	mov	r0, sl
 8006e94:	f000 fa96 	bl	80073c4 <_free_r>
 8006e98:	e7c7      	b.n	8006e2a <__ssputs_r+0x46>
	...

08006e9c <_svfiprintf_r>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	4698      	mov	r8, r3
 8006ea2:	898b      	ldrh	r3, [r1, #12]
 8006ea4:	061b      	lsls	r3, r3, #24
 8006ea6:	b09d      	sub	sp, #116	; 0x74
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	460d      	mov	r5, r1
 8006eac:	4614      	mov	r4, r2
 8006eae:	d50e      	bpl.n	8006ece <_svfiprintf_r+0x32>
 8006eb0:	690b      	ldr	r3, [r1, #16]
 8006eb2:	b963      	cbnz	r3, 8006ece <_svfiprintf_r+0x32>
 8006eb4:	2140      	movs	r1, #64	; 0x40
 8006eb6:	f000 fad5 	bl	8007464 <_malloc_r>
 8006eba:	6028      	str	r0, [r5, #0]
 8006ebc:	6128      	str	r0, [r5, #16]
 8006ebe:	b920      	cbnz	r0, 8006eca <_svfiprintf_r+0x2e>
 8006ec0:	230c      	movs	r3, #12
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec8:	e0d1      	b.n	800706e <_svfiprintf_r+0x1d2>
 8006eca:	2340      	movs	r3, #64	; 0x40
 8006ecc:	616b      	str	r3, [r5, #20]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed2:	2320      	movs	r3, #32
 8006ed4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ed8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006edc:	2330      	movs	r3, #48	; 0x30
 8006ede:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007088 <_svfiprintf_r+0x1ec>
 8006ee2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ee6:	f04f 0901 	mov.w	r9, #1
 8006eea:	4623      	mov	r3, r4
 8006eec:	469a      	mov	sl, r3
 8006eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ef2:	b10a      	cbz	r2, 8006ef8 <_svfiprintf_r+0x5c>
 8006ef4:	2a25      	cmp	r2, #37	; 0x25
 8006ef6:	d1f9      	bne.n	8006eec <_svfiprintf_r+0x50>
 8006ef8:	ebba 0b04 	subs.w	fp, sl, r4
 8006efc:	d00b      	beq.n	8006f16 <_svfiprintf_r+0x7a>
 8006efe:	465b      	mov	r3, fp
 8006f00:	4622      	mov	r2, r4
 8006f02:	4629      	mov	r1, r5
 8006f04:	4638      	mov	r0, r7
 8006f06:	f7ff ff6d 	bl	8006de4 <__ssputs_r>
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f000 80aa 	beq.w	8007064 <_svfiprintf_r+0x1c8>
 8006f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f12:	445a      	add	r2, fp
 8006f14:	9209      	str	r2, [sp, #36]	; 0x24
 8006f16:	f89a 3000 	ldrb.w	r3, [sl]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80a2 	beq.w	8007064 <_svfiprintf_r+0x1c8>
 8006f20:	2300      	movs	r3, #0
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295
 8006f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f2a:	f10a 0a01 	add.w	sl, sl, #1
 8006f2e:	9304      	str	r3, [sp, #16]
 8006f30:	9307      	str	r3, [sp, #28]
 8006f32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f36:	931a      	str	r3, [sp, #104]	; 0x68
 8006f38:	4654      	mov	r4, sl
 8006f3a:	2205      	movs	r2, #5
 8006f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f40:	4851      	ldr	r0, [pc, #324]	; (8007088 <_svfiprintf_r+0x1ec>)
 8006f42:	f7f9 f97d 	bl	8000240 <memchr>
 8006f46:	9a04      	ldr	r2, [sp, #16]
 8006f48:	b9d8      	cbnz	r0, 8006f82 <_svfiprintf_r+0xe6>
 8006f4a:	06d0      	lsls	r0, r2, #27
 8006f4c:	bf44      	itt	mi
 8006f4e:	2320      	movmi	r3, #32
 8006f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f54:	0711      	lsls	r1, r2, #28
 8006f56:	bf44      	itt	mi
 8006f58:	232b      	movmi	r3, #43	; 0x2b
 8006f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f62:	2b2a      	cmp	r3, #42	; 0x2a
 8006f64:	d015      	beq.n	8006f92 <_svfiprintf_r+0xf6>
 8006f66:	9a07      	ldr	r2, [sp, #28]
 8006f68:	4654      	mov	r4, sl
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	f04f 0c0a 	mov.w	ip, #10
 8006f70:	4621      	mov	r1, r4
 8006f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f76:	3b30      	subs	r3, #48	; 0x30
 8006f78:	2b09      	cmp	r3, #9
 8006f7a:	d94e      	bls.n	800701a <_svfiprintf_r+0x17e>
 8006f7c:	b1b0      	cbz	r0, 8006fac <_svfiprintf_r+0x110>
 8006f7e:	9207      	str	r2, [sp, #28]
 8006f80:	e014      	b.n	8006fac <_svfiprintf_r+0x110>
 8006f82:	eba0 0308 	sub.w	r3, r0, r8
 8006f86:	fa09 f303 	lsl.w	r3, r9, r3
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	9304      	str	r3, [sp, #16]
 8006f8e:	46a2      	mov	sl, r4
 8006f90:	e7d2      	b.n	8006f38 <_svfiprintf_r+0x9c>
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	1d19      	adds	r1, r3, #4
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	9103      	str	r1, [sp, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bfbb      	ittet	lt
 8006f9e:	425b      	neglt	r3, r3
 8006fa0:	f042 0202 	orrlt.w	r2, r2, #2
 8006fa4:	9307      	strge	r3, [sp, #28]
 8006fa6:	9307      	strlt	r3, [sp, #28]
 8006fa8:	bfb8      	it	lt
 8006faa:	9204      	strlt	r2, [sp, #16]
 8006fac:	7823      	ldrb	r3, [r4, #0]
 8006fae:	2b2e      	cmp	r3, #46	; 0x2e
 8006fb0:	d10c      	bne.n	8006fcc <_svfiprintf_r+0x130>
 8006fb2:	7863      	ldrb	r3, [r4, #1]
 8006fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb6:	d135      	bne.n	8007024 <_svfiprintf_r+0x188>
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	1d1a      	adds	r2, r3, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	9203      	str	r2, [sp, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	bfb8      	it	lt
 8006fc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fc8:	3402      	adds	r4, #2
 8006fca:	9305      	str	r3, [sp, #20]
 8006fcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007098 <_svfiprintf_r+0x1fc>
 8006fd0:	7821      	ldrb	r1, [r4, #0]
 8006fd2:	2203      	movs	r2, #3
 8006fd4:	4650      	mov	r0, sl
 8006fd6:	f7f9 f933 	bl	8000240 <memchr>
 8006fda:	b140      	cbz	r0, 8006fee <_svfiprintf_r+0x152>
 8006fdc:	2340      	movs	r3, #64	; 0x40
 8006fde:	eba0 000a 	sub.w	r0, r0, sl
 8006fe2:	fa03 f000 	lsl.w	r0, r3, r0
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	4303      	orrs	r3, r0
 8006fea:	3401      	adds	r4, #1
 8006fec:	9304      	str	r3, [sp, #16]
 8006fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff2:	4826      	ldr	r0, [pc, #152]	; (800708c <_svfiprintf_r+0x1f0>)
 8006ff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ff8:	2206      	movs	r2, #6
 8006ffa:	f7f9 f921 	bl	8000240 <memchr>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d038      	beq.n	8007074 <_svfiprintf_r+0x1d8>
 8007002:	4b23      	ldr	r3, [pc, #140]	; (8007090 <_svfiprintf_r+0x1f4>)
 8007004:	bb1b      	cbnz	r3, 800704e <_svfiprintf_r+0x1b2>
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	3307      	adds	r3, #7
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	3308      	adds	r3, #8
 8007010:	9303      	str	r3, [sp, #12]
 8007012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007014:	4433      	add	r3, r6
 8007016:	9309      	str	r3, [sp, #36]	; 0x24
 8007018:	e767      	b.n	8006eea <_svfiprintf_r+0x4e>
 800701a:	fb0c 3202 	mla	r2, ip, r2, r3
 800701e:	460c      	mov	r4, r1
 8007020:	2001      	movs	r0, #1
 8007022:	e7a5      	b.n	8006f70 <_svfiprintf_r+0xd4>
 8007024:	2300      	movs	r3, #0
 8007026:	3401      	adds	r4, #1
 8007028:	9305      	str	r3, [sp, #20]
 800702a:	4619      	mov	r1, r3
 800702c:	f04f 0c0a 	mov.w	ip, #10
 8007030:	4620      	mov	r0, r4
 8007032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007036:	3a30      	subs	r2, #48	; 0x30
 8007038:	2a09      	cmp	r2, #9
 800703a:	d903      	bls.n	8007044 <_svfiprintf_r+0x1a8>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0c5      	beq.n	8006fcc <_svfiprintf_r+0x130>
 8007040:	9105      	str	r1, [sp, #20]
 8007042:	e7c3      	b.n	8006fcc <_svfiprintf_r+0x130>
 8007044:	fb0c 2101 	mla	r1, ip, r1, r2
 8007048:	4604      	mov	r4, r0
 800704a:	2301      	movs	r3, #1
 800704c:	e7f0      	b.n	8007030 <_svfiprintf_r+0x194>
 800704e:	ab03      	add	r3, sp, #12
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	462a      	mov	r2, r5
 8007054:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <_svfiprintf_r+0x1f8>)
 8007056:	a904      	add	r1, sp, #16
 8007058:	4638      	mov	r0, r7
 800705a:	f3af 8000 	nop.w
 800705e:	1c42      	adds	r2, r0, #1
 8007060:	4606      	mov	r6, r0
 8007062:	d1d6      	bne.n	8007012 <_svfiprintf_r+0x176>
 8007064:	89ab      	ldrh	r3, [r5, #12]
 8007066:	065b      	lsls	r3, r3, #25
 8007068:	f53f af2c 	bmi.w	8006ec4 <_svfiprintf_r+0x28>
 800706c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800706e:	b01d      	add	sp, #116	; 0x74
 8007070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007074:	ab03      	add	r3, sp, #12
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	462a      	mov	r2, r5
 800707a:	4b06      	ldr	r3, [pc, #24]	; (8007094 <_svfiprintf_r+0x1f8>)
 800707c:	a904      	add	r1, sp, #16
 800707e:	4638      	mov	r0, r7
 8007080:	f000 f87a 	bl	8007178 <_printf_i>
 8007084:	e7eb      	b.n	800705e <_svfiprintf_r+0x1c2>
 8007086:	bf00      	nop
 8007088:	08007d88 	.word	0x08007d88
 800708c:	08007d92 	.word	0x08007d92
 8007090:	00000000 	.word	0x00000000
 8007094:	08006de5 	.word	0x08006de5
 8007098:	08007d8e 	.word	0x08007d8e

0800709c <_printf_common>:
 800709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	4616      	mov	r6, r2
 80070a2:	4699      	mov	r9, r3
 80070a4:	688a      	ldr	r2, [r1, #8]
 80070a6:	690b      	ldr	r3, [r1, #16]
 80070a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	bfb8      	it	lt
 80070b0:	4613      	movlt	r3, r2
 80070b2:	6033      	str	r3, [r6, #0]
 80070b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070b8:	4607      	mov	r7, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	b10a      	cbz	r2, 80070c2 <_printf_common+0x26>
 80070be:	3301      	adds	r3, #1
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	0699      	lsls	r1, r3, #26
 80070c6:	bf42      	ittt	mi
 80070c8:	6833      	ldrmi	r3, [r6, #0]
 80070ca:	3302      	addmi	r3, #2
 80070cc:	6033      	strmi	r3, [r6, #0]
 80070ce:	6825      	ldr	r5, [r4, #0]
 80070d0:	f015 0506 	ands.w	r5, r5, #6
 80070d4:	d106      	bne.n	80070e4 <_printf_common+0x48>
 80070d6:	f104 0a19 	add.w	sl, r4, #25
 80070da:	68e3      	ldr	r3, [r4, #12]
 80070dc:	6832      	ldr	r2, [r6, #0]
 80070de:	1a9b      	subs	r3, r3, r2
 80070e0:	42ab      	cmp	r3, r5
 80070e2:	dc26      	bgt.n	8007132 <_printf_common+0x96>
 80070e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070e8:	1e13      	subs	r3, r2, #0
 80070ea:	6822      	ldr	r2, [r4, #0]
 80070ec:	bf18      	it	ne
 80070ee:	2301      	movne	r3, #1
 80070f0:	0692      	lsls	r2, r2, #26
 80070f2:	d42b      	bmi.n	800714c <_printf_common+0xb0>
 80070f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070f8:	4649      	mov	r1, r9
 80070fa:	4638      	mov	r0, r7
 80070fc:	47c0      	blx	r8
 80070fe:	3001      	adds	r0, #1
 8007100:	d01e      	beq.n	8007140 <_printf_common+0xa4>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	68e5      	ldr	r5, [r4, #12]
 8007106:	6832      	ldr	r2, [r6, #0]
 8007108:	f003 0306 	and.w	r3, r3, #6
 800710c:	2b04      	cmp	r3, #4
 800710e:	bf08      	it	eq
 8007110:	1aad      	subeq	r5, r5, r2
 8007112:	68a3      	ldr	r3, [r4, #8]
 8007114:	6922      	ldr	r2, [r4, #16]
 8007116:	bf0c      	ite	eq
 8007118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800711c:	2500      	movne	r5, #0
 800711e:	4293      	cmp	r3, r2
 8007120:	bfc4      	itt	gt
 8007122:	1a9b      	subgt	r3, r3, r2
 8007124:	18ed      	addgt	r5, r5, r3
 8007126:	2600      	movs	r6, #0
 8007128:	341a      	adds	r4, #26
 800712a:	42b5      	cmp	r5, r6
 800712c:	d11a      	bne.n	8007164 <_printf_common+0xc8>
 800712e:	2000      	movs	r0, #0
 8007130:	e008      	b.n	8007144 <_printf_common+0xa8>
 8007132:	2301      	movs	r3, #1
 8007134:	4652      	mov	r2, sl
 8007136:	4649      	mov	r1, r9
 8007138:	4638      	mov	r0, r7
 800713a:	47c0      	blx	r8
 800713c:	3001      	adds	r0, #1
 800713e:	d103      	bne.n	8007148 <_printf_common+0xac>
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007148:	3501      	adds	r5, #1
 800714a:	e7c6      	b.n	80070da <_printf_common+0x3e>
 800714c:	18e1      	adds	r1, r4, r3
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	2030      	movs	r0, #48	; 0x30
 8007152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007156:	4422      	add	r2, r4
 8007158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800715c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007160:	3302      	adds	r3, #2
 8007162:	e7c7      	b.n	80070f4 <_printf_common+0x58>
 8007164:	2301      	movs	r3, #1
 8007166:	4622      	mov	r2, r4
 8007168:	4649      	mov	r1, r9
 800716a:	4638      	mov	r0, r7
 800716c:	47c0      	blx	r8
 800716e:	3001      	adds	r0, #1
 8007170:	d0e6      	beq.n	8007140 <_printf_common+0xa4>
 8007172:	3601      	adds	r6, #1
 8007174:	e7d9      	b.n	800712a <_printf_common+0x8e>
	...

08007178 <_printf_i>:
 8007178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800717c:	460c      	mov	r4, r1
 800717e:	4691      	mov	r9, r2
 8007180:	7e27      	ldrb	r7, [r4, #24]
 8007182:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007184:	2f78      	cmp	r7, #120	; 0x78
 8007186:	4680      	mov	r8, r0
 8007188:	469a      	mov	sl, r3
 800718a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800718e:	d807      	bhi.n	80071a0 <_printf_i+0x28>
 8007190:	2f62      	cmp	r7, #98	; 0x62
 8007192:	d80a      	bhi.n	80071aa <_printf_i+0x32>
 8007194:	2f00      	cmp	r7, #0
 8007196:	f000 80d8 	beq.w	800734a <_printf_i+0x1d2>
 800719a:	2f58      	cmp	r7, #88	; 0x58
 800719c:	f000 80a3 	beq.w	80072e6 <_printf_i+0x16e>
 80071a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071a8:	e03a      	b.n	8007220 <_printf_i+0xa8>
 80071aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071ae:	2b15      	cmp	r3, #21
 80071b0:	d8f6      	bhi.n	80071a0 <_printf_i+0x28>
 80071b2:	a001      	add	r0, pc, #4	; (adr r0, 80071b8 <_printf_i+0x40>)
 80071b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80071b8:	08007211 	.word	0x08007211
 80071bc:	08007225 	.word	0x08007225
 80071c0:	080071a1 	.word	0x080071a1
 80071c4:	080071a1 	.word	0x080071a1
 80071c8:	080071a1 	.word	0x080071a1
 80071cc:	080071a1 	.word	0x080071a1
 80071d0:	08007225 	.word	0x08007225
 80071d4:	080071a1 	.word	0x080071a1
 80071d8:	080071a1 	.word	0x080071a1
 80071dc:	080071a1 	.word	0x080071a1
 80071e0:	080071a1 	.word	0x080071a1
 80071e4:	08007331 	.word	0x08007331
 80071e8:	08007255 	.word	0x08007255
 80071ec:	08007313 	.word	0x08007313
 80071f0:	080071a1 	.word	0x080071a1
 80071f4:	080071a1 	.word	0x080071a1
 80071f8:	08007353 	.word	0x08007353
 80071fc:	080071a1 	.word	0x080071a1
 8007200:	08007255 	.word	0x08007255
 8007204:	080071a1 	.word	0x080071a1
 8007208:	080071a1 	.word	0x080071a1
 800720c:	0800731b 	.word	0x0800731b
 8007210:	680b      	ldr	r3, [r1, #0]
 8007212:	1d1a      	adds	r2, r3, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	600a      	str	r2, [r1, #0]
 8007218:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800721c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007220:	2301      	movs	r3, #1
 8007222:	e0a3      	b.n	800736c <_printf_i+0x1f4>
 8007224:	6825      	ldr	r5, [r4, #0]
 8007226:	6808      	ldr	r0, [r1, #0]
 8007228:	062e      	lsls	r6, r5, #24
 800722a:	f100 0304 	add.w	r3, r0, #4
 800722e:	d50a      	bpl.n	8007246 <_printf_i+0xce>
 8007230:	6805      	ldr	r5, [r0, #0]
 8007232:	600b      	str	r3, [r1, #0]
 8007234:	2d00      	cmp	r5, #0
 8007236:	da03      	bge.n	8007240 <_printf_i+0xc8>
 8007238:	232d      	movs	r3, #45	; 0x2d
 800723a:	426d      	negs	r5, r5
 800723c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007240:	485e      	ldr	r0, [pc, #376]	; (80073bc <_printf_i+0x244>)
 8007242:	230a      	movs	r3, #10
 8007244:	e019      	b.n	800727a <_printf_i+0x102>
 8007246:	f015 0f40 	tst.w	r5, #64	; 0x40
 800724a:	6805      	ldr	r5, [r0, #0]
 800724c:	600b      	str	r3, [r1, #0]
 800724e:	bf18      	it	ne
 8007250:	b22d      	sxthne	r5, r5
 8007252:	e7ef      	b.n	8007234 <_printf_i+0xbc>
 8007254:	680b      	ldr	r3, [r1, #0]
 8007256:	6825      	ldr	r5, [r4, #0]
 8007258:	1d18      	adds	r0, r3, #4
 800725a:	6008      	str	r0, [r1, #0]
 800725c:	0628      	lsls	r0, r5, #24
 800725e:	d501      	bpl.n	8007264 <_printf_i+0xec>
 8007260:	681d      	ldr	r5, [r3, #0]
 8007262:	e002      	b.n	800726a <_printf_i+0xf2>
 8007264:	0669      	lsls	r1, r5, #25
 8007266:	d5fb      	bpl.n	8007260 <_printf_i+0xe8>
 8007268:	881d      	ldrh	r5, [r3, #0]
 800726a:	4854      	ldr	r0, [pc, #336]	; (80073bc <_printf_i+0x244>)
 800726c:	2f6f      	cmp	r7, #111	; 0x6f
 800726e:	bf0c      	ite	eq
 8007270:	2308      	moveq	r3, #8
 8007272:	230a      	movne	r3, #10
 8007274:	2100      	movs	r1, #0
 8007276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800727a:	6866      	ldr	r6, [r4, #4]
 800727c:	60a6      	str	r6, [r4, #8]
 800727e:	2e00      	cmp	r6, #0
 8007280:	bfa2      	ittt	ge
 8007282:	6821      	ldrge	r1, [r4, #0]
 8007284:	f021 0104 	bicge.w	r1, r1, #4
 8007288:	6021      	strge	r1, [r4, #0]
 800728a:	b90d      	cbnz	r5, 8007290 <_printf_i+0x118>
 800728c:	2e00      	cmp	r6, #0
 800728e:	d04d      	beq.n	800732c <_printf_i+0x1b4>
 8007290:	4616      	mov	r6, r2
 8007292:	fbb5 f1f3 	udiv	r1, r5, r3
 8007296:	fb03 5711 	mls	r7, r3, r1, r5
 800729a:	5dc7      	ldrb	r7, [r0, r7]
 800729c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072a0:	462f      	mov	r7, r5
 80072a2:	42bb      	cmp	r3, r7
 80072a4:	460d      	mov	r5, r1
 80072a6:	d9f4      	bls.n	8007292 <_printf_i+0x11a>
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d10b      	bne.n	80072c4 <_printf_i+0x14c>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	07df      	lsls	r7, r3, #31
 80072b0:	d508      	bpl.n	80072c4 <_printf_i+0x14c>
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	6861      	ldr	r1, [r4, #4]
 80072b6:	4299      	cmp	r1, r3
 80072b8:	bfde      	ittt	le
 80072ba:	2330      	movle	r3, #48	; 0x30
 80072bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072c4:	1b92      	subs	r2, r2, r6
 80072c6:	6122      	str	r2, [r4, #16]
 80072c8:	f8cd a000 	str.w	sl, [sp]
 80072cc:	464b      	mov	r3, r9
 80072ce:	aa03      	add	r2, sp, #12
 80072d0:	4621      	mov	r1, r4
 80072d2:	4640      	mov	r0, r8
 80072d4:	f7ff fee2 	bl	800709c <_printf_common>
 80072d8:	3001      	adds	r0, #1
 80072da:	d14c      	bne.n	8007376 <_printf_i+0x1fe>
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	b004      	add	sp, #16
 80072e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e6:	4835      	ldr	r0, [pc, #212]	; (80073bc <_printf_i+0x244>)
 80072e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	680e      	ldr	r6, [r1, #0]
 80072f0:	061f      	lsls	r7, r3, #24
 80072f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80072f6:	600e      	str	r6, [r1, #0]
 80072f8:	d514      	bpl.n	8007324 <_printf_i+0x1ac>
 80072fa:	07d9      	lsls	r1, r3, #31
 80072fc:	bf44      	itt	mi
 80072fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007302:	6023      	strmi	r3, [r4, #0]
 8007304:	b91d      	cbnz	r5, 800730e <_printf_i+0x196>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	f023 0320 	bic.w	r3, r3, #32
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	2310      	movs	r3, #16
 8007310:	e7b0      	b.n	8007274 <_printf_i+0xfc>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	f043 0320 	orr.w	r3, r3, #32
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	2378      	movs	r3, #120	; 0x78
 800731c:	4828      	ldr	r0, [pc, #160]	; (80073c0 <_printf_i+0x248>)
 800731e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007322:	e7e3      	b.n	80072ec <_printf_i+0x174>
 8007324:	065e      	lsls	r6, r3, #25
 8007326:	bf48      	it	mi
 8007328:	b2ad      	uxthmi	r5, r5
 800732a:	e7e6      	b.n	80072fa <_printf_i+0x182>
 800732c:	4616      	mov	r6, r2
 800732e:	e7bb      	b.n	80072a8 <_printf_i+0x130>
 8007330:	680b      	ldr	r3, [r1, #0]
 8007332:	6826      	ldr	r6, [r4, #0]
 8007334:	6960      	ldr	r0, [r4, #20]
 8007336:	1d1d      	adds	r5, r3, #4
 8007338:	600d      	str	r5, [r1, #0]
 800733a:	0635      	lsls	r5, r6, #24
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	d501      	bpl.n	8007344 <_printf_i+0x1cc>
 8007340:	6018      	str	r0, [r3, #0]
 8007342:	e002      	b.n	800734a <_printf_i+0x1d2>
 8007344:	0671      	lsls	r1, r6, #25
 8007346:	d5fb      	bpl.n	8007340 <_printf_i+0x1c8>
 8007348:	8018      	strh	r0, [r3, #0]
 800734a:	2300      	movs	r3, #0
 800734c:	6123      	str	r3, [r4, #16]
 800734e:	4616      	mov	r6, r2
 8007350:	e7ba      	b.n	80072c8 <_printf_i+0x150>
 8007352:	680b      	ldr	r3, [r1, #0]
 8007354:	1d1a      	adds	r2, r3, #4
 8007356:	600a      	str	r2, [r1, #0]
 8007358:	681e      	ldr	r6, [r3, #0]
 800735a:	6862      	ldr	r2, [r4, #4]
 800735c:	2100      	movs	r1, #0
 800735e:	4630      	mov	r0, r6
 8007360:	f7f8 ff6e 	bl	8000240 <memchr>
 8007364:	b108      	cbz	r0, 800736a <_printf_i+0x1f2>
 8007366:	1b80      	subs	r0, r0, r6
 8007368:	6060      	str	r0, [r4, #4]
 800736a:	6863      	ldr	r3, [r4, #4]
 800736c:	6123      	str	r3, [r4, #16]
 800736e:	2300      	movs	r3, #0
 8007370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007374:	e7a8      	b.n	80072c8 <_printf_i+0x150>
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	4632      	mov	r2, r6
 800737a:	4649      	mov	r1, r9
 800737c:	4640      	mov	r0, r8
 800737e:	47d0      	blx	sl
 8007380:	3001      	adds	r0, #1
 8007382:	d0ab      	beq.n	80072dc <_printf_i+0x164>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	079b      	lsls	r3, r3, #30
 8007388:	d413      	bmi.n	80073b2 <_printf_i+0x23a>
 800738a:	68e0      	ldr	r0, [r4, #12]
 800738c:	9b03      	ldr	r3, [sp, #12]
 800738e:	4298      	cmp	r0, r3
 8007390:	bfb8      	it	lt
 8007392:	4618      	movlt	r0, r3
 8007394:	e7a4      	b.n	80072e0 <_printf_i+0x168>
 8007396:	2301      	movs	r3, #1
 8007398:	4632      	mov	r2, r6
 800739a:	4649      	mov	r1, r9
 800739c:	4640      	mov	r0, r8
 800739e:	47d0      	blx	sl
 80073a0:	3001      	adds	r0, #1
 80073a2:	d09b      	beq.n	80072dc <_printf_i+0x164>
 80073a4:	3501      	adds	r5, #1
 80073a6:	68e3      	ldr	r3, [r4, #12]
 80073a8:	9903      	ldr	r1, [sp, #12]
 80073aa:	1a5b      	subs	r3, r3, r1
 80073ac:	42ab      	cmp	r3, r5
 80073ae:	dcf2      	bgt.n	8007396 <_printf_i+0x21e>
 80073b0:	e7eb      	b.n	800738a <_printf_i+0x212>
 80073b2:	2500      	movs	r5, #0
 80073b4:	f104 0619 	add.w	r6, r4, #25
 80073b8:	e7f5      	b.n	80073a6 <_printf_i+0x22e>
 80073ba:	bf00      	nop
 80073bc:	08007d99 	.word	0x08007d99
 80073c0:	08007daa 	.word	0x08007daa

080073c4 <_free_r>:
 80073c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073c6:	2900      	cmp	r1, #0
 80073c8:	d048      	beq.n	800745c <_free_r+0x98>
 80073ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ce:	9001      	str	r0, [sp, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f1a1 0404 	sub.w	r4, r1, #4
 80073d6:	bfb8      	it	lt
 80073d8:	18e4      	addlt	r4, r4, r3
 80073da:	f000 f8d3 	bl	8007584 <__malloc_lock>
 80073de:	4a20      	ldr	r2, [pc, #128]	; (8007460 <_free_r+0x9c>)
 80073e0:	9801      	ldr	r0, [sp, #4]
 80073e2:	6813      	ldr	r3, [r2, #0]
 80073e4:	4615      	mov	r5, r2
 80073e6:	b933      	cbnz	r3, 80073f6 <_free_r+0x32>
 80073e8:	6063      	str	r3, [r4, #4]
 80073ea:	6014      	str	r4, [r2, #0]
 80073ec:	b003      	add	sp, #12
 80073ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073f2:	f000 b8cd 	b.w	8007590 <__malloc_unlock>
 80073f6:	42a3      	cmp	r3, r4
 80073f8:	d90b      	bls.n	8007412 <_free_r+0x4e>
 80073fa:	6821      	ldr	r1, [r4, #0]
 80073fc:	1862      	adds	r2, r4, r1
 80073fe:	4293      	cmp	r3, r2
 8007400:	bf04      	itt	eq
 8007402:	681a      	ldreq	r2, [r3, #0]
 8007404:	685b      	ldreq	r3, [r3, #4]
 8007406:	6063      	str	r3, [r4, #4]
 8007408:	bf04      	itt	eq
 800740a:	1852      	addeq	r2, r2, r1
 800740c:	6022      	streq	r2, [r4, #0]
 800740e:	602c      	str	r4, [r5, #0]
 8007410:	e7ec      	b.n	80073ec <_free_r+0x28>
 8007412:	461a      	mov	r2, r3
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	b10b      	cbz	r3, 800741c <_free_r+0x58>
 8007418:	42a3      	cmp	r3, r4
 800741a:	d9fa      	bls.n	8007412 <_free_r+0x4e>
 800741c:	6811      	ldr	r1, [r2, #0]
 800741e:	1855      	adds	r5, r2, r1
 8007420:	42a5      	cmp	r5, r4
 8007422:	d10b      	bne.n	800743c <_free_r+0x78>
 8007424:	6824      	ldr	r4, [r4, #0]
 8007426:	4421      	add	r1, r4
 8007428:	1854      	adds	r4, r2, r1
 800742a:	42a3      	cmp	r3, r4
 800742c:	6011      	str	r1, [r2, #0]
 800742e:	d1dd      	bne.n	80073ec <_free_r+0x28>
 8007430:	681c      	ldr	r4, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	6053      	str	r3, [r2, #4]
 8007436:	4421      	add	r1, r4
 8007438:	6011      	str	r1, [r2, #0]
 800743a:	e7d7      	b.n	80073ec <_free_r+0x28>
 800743c:	d902      	bls.n	8007444 <_free_r+0x80>
 800743e:	230c      	movs	r3, #12
 8007440:	6003      	str	r3, [r0, #0]
 8007442:	e7d3      	b.n	80073ec <_free_r+0x28>
 8007444:	6825      	ldr	r5, [r4, #0]
 8007446:	1961      	adds	r1, r4, r5
 8007448:	428b      	cmp	r3, r1
 800744a:	bf04      	itt	eq
 800744c:	6819      	ldreq	r1, [r3, #0]
 800744e:	685b      	ldreq	r3, [r3, #4]
 8007450:	6063      	str	r3, [r4, #4]
 8007452:	bf04      	itt	eq
 8007454:	1949      	addeq	r1, r1, r5
 8007456:	6021      	streq	r1, [r4, #0]
 8007458:	6054      	str	r4, [r2, #4]
 800745a:	e7c7      	b.n	80073ec <_free_r+0x28>
 800745c:	b003      	add	sp, #12
 800745e:	bd30      	pop	{r4, r5, pc}
 8007460:	200004ac 	.word	0x200004ac

08007464 <_malloc_r>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	1ccd      	adds	r5, r1, #3
 8007468:	f025 0503 	bic.w	r5, r5, #3
 800746c:	3508      	adds	r5, #8
 800746e:	2d0c      	cmp	r5, #12
 8007470:	bf38      	it	cc
 8007472:	250c      	movcc	r5, #12
 8007474:	2d00      	cmp	r5, #0
 8007476:	4606      	mov	r6, r0
 8007478:	db01      	blt.n	800747e <_malloc_r+0x1a>
 800747a:	42a9      	cmp	r1, r5
 800747c:	d903      	bls.n	8007486 <_malloc_r+0x22>
 800747e:	230c      	movs	r3, #12
 8007480:	6033      	str	r3, [r6, #0]
 8007482:	2000      	movs	r0, #0
 8007484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007486:	f000 f87d 	bl	8007584 <__malloc_lock>
 800748a:	4921      	ldr	r1, [pc, #132]	; (8007510 <_malloc_r+0xac>)
 800748c:	680a      	ldr	r2, [r1, #0]
 800748e:	4614      	mov	r4, r2
 8007490:	b99c      	cbnz	r4, 80074ba <_malloc_r+0x56>
 8007492:	4f20      	ldr	r7, [pc, #128]	; (8007514 <_malloc_r+0xb0>)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	b923      	cbnz	r3, 80074a2 <_malloc_r+0x3e>
 8007498:	4621      	mov	r1, r4
 800749a:	4630      	mov	r0, r6
 800749c:	f000 f862 	bl	8007564 <_sbrk_r>
 80074a0:	6038      	str	r0, [r7, #0]
 80074a2:	4629      	mov	r1, r5
 80074a4:	4630      	mov	r0, r6
 80074a6:	f000 f85d 	bl	8007564 <_sbrk_r>
 80074aa:	1c43      	adds	r3, r0, #1
 80074ac:	d123      	bne.n	80074f6 <_malloc_r+0x92>
 80074ae:	230c      	movs	r3, #12
 80074b0:	6033      	str	r3, [r6, #0]
 80074b2:	4630      	mov	r0, r6
 80074b4:	f000 f86c 	bl	8007590 <__malloc_unlock>
 80074b8:	e7e3      	b.n	8007482 <_malloc_r+0x1e>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	1b5b      	subs	r3, r3, r5
 80074be:	d417      	bmi.n	80074f0 <_malloc_r+0x8c>
 80074c0:	2b0b      	cmp	r3, #11
 80074c2:	d903      	bls.n	80074cc <_malloc_r+0x68>
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	441c      	add	r4, r3
 80074c8:	6025      	str	r5, [r4, #0]
 80074ca:	e004      	b.n	80074d6 <_malloc_r+0x72>
 80074cc:	6863      	ldr	r3, [r4, #4]
 80074ce:	42a2      	cmp	r2, r4
 80074d0:	bf0c      	ite	eq
 80074d2:	600b      	streq	r3, [r1, #0]
 80074d4:	6053      	strne	r3, [r2, #4]
 80074d6:	4630      	mov	r0, r6
 80074d8:	f000 f85a 	bl	8007590 <__malloc_unlock>
 80074dc:	f104 000b 	add.w	r0, r4, #11
 80074e0:	1d23      	adds	r3, r4, #4
 80074e2:	f020 0007 	bic.w	r0, r0, #7
 80074e6:	1ac2      	subs	r2, r0, r3
 80074e8:	d0cc      	beq.n	8007484 <_malloc_r+0x20>
 80074ea:	1a1b      	subs	r3, r3, r0
 80074ec:	50a3      	str	r3, [r4, r2]
 80074ee:	e7c9      	b.n	8007484 <_malloc_r+0x20>
 80074f0:	4622      	mov	r2, r4
 80074f2:	6864      	ldr	r4, [r4, #4]
 80074f4:	e7cc      	b.n	8007490 <_malloc_r+0x2c>
 80074f6:	1cc4      	adds	r4, r0, #3
 80074f8:	f024 0403 	bic.w	r4, r4, #3
 80074fc:	42a0      	cmp	r0, r4
 80074fe:	d0e3      	beq.n	80074c8 <_malloc_r+0x64>
 8007500:	1a21      	subs	r1, r4, r0
 8007502:	4630      	mov	r0, r6
 8007504:	f000 f82e 	bl	8007564 <_sbrk_r>
 8007508:	3001      	adds	r0, #1
 800750a:	d1dd      	bne.n	80074c8 <_malloc_r+0x64>
 800750c:	e7cf      	b.n	80074ae <_malloc_r+0x4a>
 800750e:	bf00      	nop
 8007510:	200004ac 	.word	0x200004ac
 8007514:	200004b0 	.word	0x200004b0

08007518 <_realloc_r>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	4607      	mov	r7, r0
 800751c:	4614      	mov	r4, r2
 800751e:	460e      	mov	r6, r1
 8007520:	b921      	cbnz	r1, 800752c <_realloc_r+0x14>
 8007522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007526:	4611      	mov	r1, r2
 8007528:	f7ff bf9c 	b.w	8007464 <_malloc_r>
 800752c:	b922      	cbnz	r2, 8007538 <_realloc_r+0x20>
 800752e:	f7ff ff49 	bl	80073c4 <_free_r>
 8007532:	4625      	mov	r5, r4
 8007534:	4628      	mov	r0, r5
 8007536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007538:	f000 f830 	bl	800759c <_malloc_usable_size_r>
 800753c:	42a0      	cmp	r0, r4
 800753e:	d20f      	bcs.n	8007560 <_realloc_r+0x48>
 8007540:	4621      	mov	r1, r4
 8007542:	4638      	mov	r0, r7
 8007544:	f7ff ff8e 	bl	8007464 <_malloc_r>
 8007548:	4605      	mov	r5, r0
 800754a:	2800      	cmp	r0, #0
 800754c:	d0f2      	beq.n	8007534 <_realloc_r+0x1c>
 800754e:	4631      	mov	r1, r6
 8007550:	4622      	mov	r2, r4
 8007552:	f7ff fbf7 	bl	8006d44 <memcpy>
 8007556:	4631      	mov	r1, r6
 8007558:	4638      	mov	r0, r7
 800755a:	f7ff ff33 	bl	80073c4 <_free_r>
 800755e:	e7e9      	b.n	8007534 <_realloc_r+0x1c>
 8007560:	4635      	mov	r5, r6
 8007562:	e7e7      	b.n	8007534 <_realloc_r+0x1c>

08007564 <_sbrk_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d06      	ldr	r5, [pc, #24]	; (8007580 <_sbrk_r+0x1c>)
 8007568:	2300      	movs	r3, #0
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7f9 ff46 	bl	8001400 <_sbrk>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_sbrk_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_sbrk_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	20000ac0 	.word	0x20000ac0

08007584 <__malloc_lock>:
 8007584:	4801      	ldr	r0, [pc, #4]	; (800758c <__malloc_lock+0x8>)
 8007586:	f000 b811 	b.w	80075ac <__retarget_lock_acquire_recursive>
 800758a:	bf00      	nop
 800758c:	20000ac8 	.word	0x20000ac8

08007590 <__malloc_unlock>:
 8007590:	4801      	ldr	r0, [pc, #4]	; (8007598 <__malloc_unlock+0x8>)
 8007592:	f000 b80c 	b.w	80075ae <__retarget_lock_release_recursive>
 8007596:	bf00      	nop
 8007598:	20000ac8 	.word	0x20000ac8

0800759c <_malloc_usable_size_r>:
 800759c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a0:	1f18      	subs	r0, r3, #4
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bfbc      	itt	lt
 80075a6:	580b      	ldrlt	r3, [r1, r0]
 80075a8:	18c0      	addlt	r0, r0, r3
 80075aa:	4770      	bx	lr

080075ac <__retarget_lock_acquire_recursive>:
 80075ac:	4770      	bx	lr

080075ae <__retarget_lock_release_recursive>:
 80075ae:	4770      	bx	lr

080075b0 <_init>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr

080075bc <_fini>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	bf00      	nop
 80075c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c2:	bc08      	pop	{r3}
 80075c4:	469e      	mov	lr, r3
 80075c6:	4770      	bx	lr
